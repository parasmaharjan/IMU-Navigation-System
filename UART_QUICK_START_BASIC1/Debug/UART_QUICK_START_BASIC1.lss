
UART_QUICK_START_BASIC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e1c  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  1000ae1c  1000ae1c  0000ae1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000284  1000ae80  1000ae80  0000ae80  2**2
                  ALLOC
  3 .stack        00000804  1000b104  1000b104  0000ae80  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0000ae80  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0000aea8  2**0
                  CONTENTS, READONLY
  6 .debug_info   00016de8  00000000  00000000  0000af03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f01  00000000  00000000  00021ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003b9b  00000000  00000000  00023bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000528  00000000  00000000  00027787  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000480  00000000  00000000  00027caf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000186c8  00000000  00000000  0002812f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007649  00000000  00000000  000407f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000f03ac  00000000  00000000  00047e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000013a8  00000000  00000000  001381ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	1000ae1c 	.word	0x1000ae1c
10008068:	1000ae1c 	.word	0x1000ae1c
1000806c:	1000ae80 	.word	0x1000ae80
10008070:	1000b104 	.word	0x1000b104
10008074:	1000ae80 	.word	0x1000ae80
10008078:	1000ae20 	.word	0x1000ae20
1000807c:	1000ae84 	.word	0x1000ae84
10008080:	10009bb5 	.word	0x10009bb5
10008084:	10009911 	.word	0x10009911

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	1000ae80 	.word	0x1000ae80
100080a8:	00000000 	.word	0x00000000
100080ac:	1000ae1c 	.word	0x1000ae1c

100080b0 <frame_dummy>:
100080b0:	b508      	push	{r3, lr}
100080b2:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4807      	ldr	r0, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4908      	ldr	r1, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd08      	pop	{r3, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	1000ae1c 	.word	0x1000ae1c
100080dc:	1000ae84 	.word	0x1000ae84
100080e0:	1000ae1c 	.word	0x1000ae1c
100080e4:	00000000 	.word	0x00000000

100080e8 <i2c_init_sentral>:
	}
	return;
}

void i2c_init_sentral(void)
{
100080e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100080ea:	b087      	sub	sp, #28
	uint32_t time_overflow = 0;
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
100080ec:	ac01      	add	r4, sp, #4
100080ee:	1c20      	adds	r0, r4, #0
100080f0:	4b12      	ldr	r3, [pc, #72]	; (1000813c <i2c_init_sentral+0x54>)
100080f2:	4798      	blx	r3
	
	config_i2c_master.pin_number_pad0 = SENTRAL_PIN_PAD0;
100080f4:	230e      	movs	r3, #14
100080f6:	6063      	str	r3, [r4, #4]
	config_i2c_master.pin_number_pad1 = SENTRAL_PIN_PAD1;
100080f8:	3301      	adds	r3, #1
100080fa:	60e3      	str	r3, [r4, #12]
	config_i2c_master.pinmux_sel_pad0 = SENTRAL_MUX_PAD0;
100080fc:	3b0b      	subs	r3, #11
100080fe:	60a3      	str	r3, [r4, #8]
	config_i2c_master.pinmux_sel_pad1 = SENTRAL_MUX_PAD1;
10008100:	6123      	str	r3, [r4, #16]
	
	config_i2c_master.clock_source = I2C_CLOCK_SOURCE_SELECT_CLOCK_3;
10008102:	3b01      	subs	r3, #1
10008104:	7023      	strb	r3, [r4, #0]
	config_i2c_master.clock_divider = 0x10;
10008106:	330d      	adds	r3, #13
10008108:	8063      	strh	r3, [r4, #2]
	
	/* Initialize and enable device with config */
	while(i2c_master_init(&i2c_master_instance, SENTRAL_I2C_MODULE, &config_i2c_master) != STATUS_OK) {
1000810a:	4c0d      	ldr	r4, [pc, #52]	; (10008140 <i2c_init_sentral+0x58>)
1000810c:	4e0d      	ldr	r6, [pc, #52]	; (10008144 <i2c_init_sentral+0x5c>)
1000810e:	4d0e      	ldr	r5, [pc, #56]	; (10008148 <i2c_init_sentral+0x60>)
10008110:	4f0e      	ldr	r7, [pc, #56]	; (1000814c <i2c_init_sentral+0x64>)
10008112:	e002      	b.n	1000811a <i2c_init_sentral+0x32>
10008114:	3c01      	subs	r4, #1
		if(time_overflow++ > 10000) break;
10008116:	2c00      	cmp	r4, #0
10008118:	d005      	beq.n	10008126 <i2c_init_sentral+0x3e>
	
	config_i2c_master.clock_source = I2C_CLOCK_SOURCE_SELECT_CLOCK_3;
	config_i2c_master.clock_divider = 0x10;
	
	/* Initialize and enable device with config */
	while(i2c_master_init(&i2c_master_instance, SENTRAL_I2C_MODULE, &config_i2c_master) != STATUS_OK) {
1000811a:	1c30      	adds	r0, r6, #0
1000811c:	1c29      	adds	r1, r5, #0
1000811e:	aa01      	add	r2, sp, #4
10008120:	47b8      	blx	r7
10008122:	2800      	cmp	r0, #0
10008124:	d1f6      	bne.n	10008114 <i2c_init_sentral+0x2c>
		if(time_overflow++ > 10000) break;
	}
	i2c_enable(i2c_master_instance.hw);	
10008126:	4b07      	ldr	r3, [pc, #28]	; (10008144 <i2c_init_sentral+0x5c>)
10008128:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2C *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000812a:	2028      	movs	r0, #40	; 0x28
1000812c:	2101      	movs	r1, #1
1000812e:	5c13      	ldrb	r3, [r2, r0]
10008130:	4219      	tst	r1, r3
10008132:	d1fc      	bne.n	1000812e <i2c_init_sentral+0x46>
static inline void i2c_enable(I2C *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_I2C_MODULE_ENABLE_ENABLE_Pos);
10008134:	2301      	movs	r3, #1
10008136:	7513      	strb	r3, [r2, #20]
	/*delay(100);*/
	return;
}
10008138:	b007      	add	sp, #28
1000813a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000813c:	100083a9 	.word	0x100083a9
10008140:	00002712 	.word	0x00002712
10008144:	1000aebc 	.word	0x1000aebc
10008148:	40003400 	.word	0x40003400
1000814c:	100083c1 	.word	0x100083c1

10008150 <i2c_sentral_write_register>:

/*---- Function definition for writing n bytes starting from particular register  -----*/
void i2c_sentral_write_register(uint8_t regAddr, uint8_t *writeByte, uint8_t writeByteLen) {
10008150:	b5f0      	push	{r4, r5, r6, r7, lr}
10008152:	b083      	sub	sp, #12
10008154:	af00      	add	r7, sp, #0

	uint8_t writeRegBytes[writeByteLen + 1], i;
10008156:	1c56      	adds	r6, r2, #1
10008158:	1c13      	adds	r3, r2, #0
1000815a:	3308      	adds	r3, #8
1000815c:	08db      	lsrs	r3, r3, #3
1000815e:	00db      	lsls	r3, r3, #3
10008160:	466c      	mov	r4, sp
10008162:	1ae3      	subs	r3, r4, r3
10008164:	469d      	mov	sp, r3
10008166:	466d      	mov	r5, sp
	writeRegBytes[0] = regAddr;
10008168:	7028      	strb	r0, [r5, #0]
	for(i= 0; i < writeByteLen; i++ ) {
1000816a:	2a00      	cmp	r2, #0
1000816c:	d007      	beq.n	1000817e <i2c_sentral_write_register+0x2e>
1000816e:	2300      	movs	r3, #0
10008170:	18e8      	adds	r0, r5, r3
		writeRegBytes[i+1] = writeByte[i];
10008172:	5ccc      	ldrb	r4, [r1, r3]
10008174:	7044      	strb	r4, [r0, #1]
10008176:	3301      	adds	r3, #1
/*---- Function definition for writing n bytes starting from particular register  -----*/
void i2c_sentral_write_register(uint8_t regAddr, uint8_t *writeByte, uint8_t writeByteLen) {

	uint8_t writeRegBytes[writeByteLen + 1], i;
	writeRegBytes[0] = regAddr;
	for(i= 0; i < writeByteLen; i++ ) {
10008178:	b2d8      	uxtb	r0, r3
1000817a:	4282      	cmp	r2, r0
1000817c:	d8f8      	bhi.n	10008170 <i2c_sentral_write_register+0x20>
		writeRegBytes[i+1] = writeByte[i];
	}

	struct i2c_master_packet writeRegAddr = {
1000817e:	2328      	movs	r3, #40	; 0x28
10008180:	803b      	strh	r3, [r7, #0]
10008182:	807e      	strh	r6, [r7, #2]
10008184:	607d      	str	r5, [r7, #4]
		.address = SLAVE_ADDRESS,
		.data_length = sizeof(writeRegBytes),
		.data = writeRegBytes,
	};

	i2c_master_write_packet_wait(&i2c_master_instance, &writeRegAddr);
10008186:	4803      	ldr	r0, [pc, #12]	; (10008194 <i2c_sentral_write_register+0x44>)
10008188:	1c39      	adds	r1, r7, #0
1000818a:	4b03      	ldr	r3, [pc, #12]	; (10008198 <i2c_sentral_write_register+0x48>)
1000818c:	4798      	blx	r3
}
1000818e:	46bd      	mov	sp, r7
10008190:	b003      	add	sp, #12
10008192:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008194:	1000aebc 	.word	0x1000aebc
10008198:	100084d5 	.word	0x100084d5

1000819c <i2c_sentral_read_reg>:
	i2c_master_read_packet_wait(&i2c_master_instance, &readBytes);
	return;
}

/* --- Function definition for reading single bytes from particular register ---*/
uint8_t i2c_sentral_read_reg(uint8_t regAdr) {
1000819c:	b570      	push	{r4, r5, r6, lr}
1000819e:	b088      	sub	sp, #32
100081a0:	466b      	mov	r3, sp
100081a2:	1ddc      	adds	r4, r3, #7
100081a4:	71d8      	strb	r0, [r3, #7]
	
	struct i2c_master_packet writeRgAddr = {
100081a6:	a906      	add	r1, sp, #24
100081a8:	2228      	movs	r2, #40	; 0x28
100081aa:	800a      	strh	r2, [r1, #0]
100081ac:	2301      	movs	r3, #1
100081ae:	804b      	strh	r3, [r1, #2]
100081b0:	604c      	str	r4, [r1, #4]
		.address = SLAVE_ADDRESS,
		.data_length = 1,
		.data = &regAdr,
	};
	uint8_t getByt;
	struct i2c_master_packet rdBytes = {
100081b2:	ac03      	add	r4, sp, #12
100081b4:	8022      	strh	r2, [r4, #0]
100081b6:	8063      	strh	r3, [r4, #2]
100081b8:	2517      	movs	r5, #23
100081ba:	446d      	add	r5, sp
100081bc:	9504      	str	r5, [sp, #16]
		.address = SLAVE_ADDRESS,
		.data_length = 1,
		.data = &getByt,
	};
	i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &writeRgAddr);
100081be:	4e05      	ldr	r6, [pc, #20]	; (100081d4 <i2c_sentral_read_reg+0x38>)
100081c0:	1c30      	adds	r0, r6, #0
100081c2:	4b05      	ldr	r3, [pc, #20]	; (100081d8 <i2c_sentral_read_reg+0x3c>)
100081c4:	4798      	blx	r3
	i2c_master_read_packet_wait(&i2c_master_instance, &rdBytes);
100081c6:	1c30      	adds	r0, r6, #0
100081c8:	1c21      	adds	r1, r4, #0
100081ca:	4b04      	ldr	r3, [pc, #16]	; (100081dc <i2c_sentral_read_reg+0x40>)
100081cc:	4798      	blx	r3
	return getByt;
100081ce:	7828      	ldrb	r0, [r5, #0]
}
100081d0:	b008      	add	sp, #32
100081d2:	bd70      	pop	{r4, r5, r6, pc}
100081d4:	1000aebc 	.word	0x1000aebc
100081d8:	10008505 	.word	0x10008505
100081dc:	100084a5 	.word	0x100084a5

100081e0 <reset_sentral>:


void reset_sentral(void) {	
100081e0:	b500      	push	{lr}
100081e2:	b083      	sub	sp, #12
	uint8_t myByte = SENTRAL_RESET_CMD;
100081e4:	466b      	mov	r3, sp
100081e6:	1dd9      	adds	r1, r3, #7
100081e8:	2301      	movs	r3, #1
100081ea:	700b      	strb	r3, [r1, #0]
	i2c_sentral_write_register(SENTRAL_RST_REQ_REG, &myByte, 1);
100081ec:	209b      	movs	r0, #155	; 0x9b
100081ee:	2201      	movs	r2, #1
100081f0:	4b01      	ldr	r3, [pc, #4]	; (100081f8 <reset_sentral+0x18>)
100081f2:	4798      	blx	r3
	return;
}
100081f4:	b003      	add	sp, #12
100081f6:	bd00      	pop	{pc}
100081f8:	10008151 	.word	0x10008151

100081fc <config_sentral>:

uint8_t config_sentral(void) {
100081fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100081fe:	464f      	mov	r7, r9
10008200:	4646      	mov	r6, r8
10008202:	b4c0      	push	{r6, r7}
10008204:	4c10      	ldr	r4, [pc, #64]	; (10008248 <config_sentral+0x4c>)
10008206:	2310      	movs	r3, #16
10008208:	4699      	mov	r9, r3
1000820a:	44a1      	add	r9, r4
	uint8_t testByte, i, count = 0;
1000820c:	2600      	movs	r6, #0
	for(i = 0; i < sizeof(Configuration)/2; i++) {
		i2c_sentral_write_register(Configuration[i][0], (uint8_t *)&Configuration[i][1], 1);
1000820e:	4b0f      	ldr	r3, [pc, #60]	; (1000824c <config_sentral+0x50>)
10008210:	4698      	mov	r8, r3
		testByte = i2c_sentral_read_reg(Configuration[i][0]);	
10008212:	4f0f      	ldr	r7, [pc, #60]	; (10008250 <config_sentral+0x54>)
}

uint8_t config_sentral(void) {
	uint8_t testByte, i, count = 0;
	for(i = 0; i < sizeof(Configuration)/2; i++) {
		i2c_sentral_write_register(Configuration[i][0], (uint8_t *)&Configuration[i][1], 1);
10008214:	7825      	ldrb	r5, [r4, #0]
10008216:	1c61      	adds	r1, r4, #1
10008218:	1c28      	adds	r0, r5, #0
1000821a:	2201      	movs	r2, #1
1000821c:	47c0      	blx	r8
		testByte = i2c_sentral_read_reg(Configuration[i][0]);	
1000821e:	1c28      	adds	r0, r5, #0
10008220:	47b8      	blx	r7
			
		if(testByte != Configuration[i][1]) {
10008222:	7863      	ldrb	r3, [r4, #1]
10008224:	4283      	cmp	r3, r0
10008226:	d001      	beq.n	1000822c <config_sentral+0x30>
			count++;
10008228:	3601      	adds	r6, #1
1000822a:	b2f6      	uxtb	r6, r6
1000822c:	3402      	adds	r4, #2
	return;
}

uint8_t config_sentral(void) {
	uint8_t testByte, i, count = 0;
	for(i = 0; i < sizeof(Configuration)/2; i++) {
1000822e:	454c      	cmp	r4, r9
10008230:	d1f0      	bne.n	10008214 <config_sentral+0x18>
		
	("Register Content of Algorithm Status Register : %d\r\n", i2c_sentral_read_reg(SENTRAL_ALGORITHM_STATUS_REG));	
		//printf("Register Content of Pass Through Status Register : %d\r\n", i2c_sentral_read_reg(SENTRAL_PASS_THROUGH_STATUS_REG));
	#endif
	
	if(i2c_sentral_read_reg(SENTRAL_ALGORITHM_STATUS_REG) & 0x01)	{
10008232:	2038      	movs	r0, #56	; 0x38
10008234:	4c06      	ldr	r4, [pc, #24]	; (10008250 <config_sentral+0x54>)
10008236:	47a0      	blx	r4
		//printf("Device in standby mode \r\n");
	}
	if(i2c_sentral_read_reg(SENTRAL_PASS_THROUGH_STATUS_REG) & 0x01){
10008238:	209e      	movs	r0, #158	; 0x9e
1000823a:	47a0      	blx	r4
		//printf("Device in Pass-Through mode \r\n");
	}
	return count;
}
1000823c:	1c30      	adds	r0, r6, #0
1000823e:	bc0c      	pop	{r2, r3}
10008240:	4690      	mov	r8, r2
10008242:	4699      	mov	r9, r3
10008244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008246:	46c0      	nop			; (mov r8, r8)
10008248:	1000ab44 	.word	0x1000ab44
1000824c:	10008151 	.word	0x10008151
10008250:	1000819d 	.word	0x1000819d

10008254 <check_sentral_eeprom_status>:

uint8_t check_sentral_eeprom_status(void) {
10008254:	b508      	push	{r3, lr}
	uint8_t myByte = i2c_sentral_read_reg(SENTRAL_EEPROM_STATUS_REG);	
10008256:	2037      	movs	r0, #55	; 0x37
10008258:	4b06      	ldr	r3, [pc, #24]	; (10008274 <check_sentral_eeprom_status+0x20>)
1000825a:	4798      	blx	r3
	//printf("SENtral Status Reg Content : %d \r\n", myByte);
	if(myByte & 0x01) {
		////printf("EEPROM detected!\r\n");
		if(myByte & 0x02) {
1000825c:	2303      	movs	r3, #3
1000825e:	4003      	ands	r3, r0
				////printf("Uploaded Successful!\r\n");
				return true;
			}
			} else {
			////printf("EEPROM upload not done...\r\n");
			return false;
10008260:	2200      	movs	r2, #0
uint8_t check_sentral_eeprom_status(void) {
	uint8_t myByte = i2c_sentral_read_reg(SENTRAL_EEPROM_STATUS_REG);	
	//printf("SENtral Status Reg Content : %d \r\n", myByte);
	if(myByte & 0x01) {
		////printf("EEPROM detected!\r\n");
		if(myByte & 0x02) {
10008262:	2b03      	cmp	r3, #3
10008264:	d104      	bne.n	10008270 <check_sentral_eeprom_status+0x1c>
			////printf("Done EEPROM upload...\r\n");
			if(myByte & 0x04){
10008266:	0880      	lsrs	r0, r0, #2
10008268:	2301      	movs	r3, #1
1000826a:	4058      	eors	r0, r3
				////printf("Uploaded with error / CRC Error !\r\n");
				} else {
				////printf("Uploaded Successful!\r\n");
				return true;
1000826c:	3201      	adds	r2, #1
1000826e:	4002      	ands	r2, r0
		} else {
		////printf("EEPROM Not detected..\r\n");
		return false;
	}
	return 0;
}
10008270:	1c10      	adds	r0, r2, #0
10008272:	bd08      	pop	{r3, pc}
10008274:	1000819d 	.word	0x1000819d

10008278 <init_sentral>:

void init_sentral(void) {	
10008278:	b508      	push	{r3, lr}
	
	static uint8_t reset_count = 0;
	reset_count++;
1000827a:	4a0f      	ldr	r2, [pc, #60]	; (100082b8 <init_sentral+0x40>)
1000827c:	7813      	ldrb	r3, [r2, #0]
1000827e:	3301      	adds	r3, #1
10008280:	7013      	strb	r3, [r2, #0]
	if(check_sentral_eeprom_status()) {
10008282:	4b0e      	ldr	r3, [pc, #56]	; (100082bc <init_sentral+0x44>)
10008284:	4798      	blx	r3
10008286:	2800      	cmp	r0, #0
10008288:	d002      	beq.n	10008290 <init_sentral+0x18>
		if(0 < config_sentral()) {
1000828a:	4b0d      	ldr	r3, [pc, #52]	; (100082c0 <init_sentral+0x48>)
1000828c:	4798      	blx	r3
1000828e:	e011      	b.n	100082b4 <init_sentral+0x3c>
			////printf("Error uploading data !");			
			} else {
			////printf("Done uploading control bytes into SENtral registers !\r\n");
		}
	} else {
		reset_sentral();
10008290:	4b0c      	ldr	r3, [pc, #48]	; (100082c4 <init_sentral+0x4c>)
10008292:	4798      	blx	r3
10008294:	22fa      	movs	r2, #250	; 0xfa
10008296:	0052      	lsls	r2, r2, #1
		return false;
	}
	return 0;
}

void init_sentral(void) {	
10008298:	21fa      	movs	r1, #250	; 0xfa
1000829a:	0089      	lsls	r1, r1, #2
1000829c:	e006      	b.n	100082ac <init_sentral+0x34>
/* Delay for this function only */
static void delay(uint32_t count)
{
	for (uint32_t i = 0; i < count; i++) {
		for (uint32_t j = 0; j < 1000; j++)
		asm volatile ("nop");
1000829e:	46c0      	nop			; (mov r8, r8)
100082a0:	3b01      	subs	r3, #1

/* Delay for this function only */
static void delay(uint32_t count)
{
	for (uint32_t i = 0; i < count; i++) {
		for (uint32_t j = 0; j < 1000; j++)
100082a2:	2b00      	cmp	r3, #0
100082a4:	d1fb      	bne.n	1000829e <init_sentral+0x26>
100082a6:	3a01      	subs	r2, #1
#endif

/* Delay for this function only */
static void delay(uint32_t count)
{
	for (uint32_t i = 0; i < count; i++) {
100082a8:	2a00      	cmp	r2, #0
100082aa:	d001      	beq.n	100082b0 <init_sentral+0x38>
		return false;
	}
	return 0;
}

void init_sentral(void) {	
100082ac:	1c0b      	adds	r3, r1, #0
100082ae:	e7f6      	b.n	1000829e <init_sentral+0x26>
		////printf("Resetting SENtral for %d time(s)!\r\n", reset_count);
		/* If the device is not configured correctly 
		 * Keep sending reset upload the command values 
		 * recursively.
		 */
		init_sentral(); 
100082b0:	f7ff ffe2 	bl	10008278 <init_sentral>
	}
	////printf("Done initialization of SENtral.\r\n");
	return ;
}
100082b4:	bd08      	pop	{r3, pc}
100082b6:	46c0      	nop			; (mov r8, r8)
100082b8:	1000ae9c 	.word	0x1000ae9c
100082bc:	10008255 	.word	0x10008255
100082c0:	100081fd 	.word	0x100081fd
100082c4:	100081e1 	.word	0x100081e1

100082c8 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100082ca:	464f      	mov	r7, r9
100082cc:	4646      	mov	r6, r8
100082ce:	b4c0      	push	{r6, r7}
100082d0:	4681      	mov	r9, r0
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2C *const i2c_module    = (module->hw);
100082d2:	6802      	ldr	r2, [r0, #0]
	uint16_t length = packet->data_length;
100082d4:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
100082d6:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2C *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
100082d8:	2d00      	cmp	r5, #0
100082da:	d02f      	beq.n	1000833c <_i2c_master_read_packet+0x74>
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2C *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100082dc:	2628      	movs	r6, #40	; 0x28
100082de:	2401      	movs	r4, #1
100082e0:	5d93      	ldrb	r3, [r2, r6]
100082e2:	421c      	tst	r4, r3
100082e4:	d1fc      	bne.n	100082e0 <_i2c_master_read_packet+0x18>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082e6:	2301      	movs	r3, #1
100082e8:	2434      	movs	r4, #52	; 0x34
100082ea:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
100082ec:	3c14      	subs	r4, #20
100082ee:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
100082f0:	880b      	ldrh	r3, [r1, #0]
100082f2:	005b      	lsls	r3, r3, #1
100082f4:	2402      	movs	r4, #2
100082f6:	34ff      	adds	r4, #255	; 0xff
100082f8:	4323      	orrs	r3, r4
100082fa:	b29b      	uxth	r3, r3
100082fc:	8013      	strh	r3, [r2, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
100082fe:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008300:	2301      	movs	r3, #1
10008302:	4698      	mov	r8, r3
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
10008304:	7b13      	ldrb	r3, [r2, #12]
10008306:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008308:	4640      	mov	r0, r8
1000830a:	4218      	tst	r0, r3
1000830c:	d006      	beq.n	1000831c <_i2c_master_read_packet+0x54>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000830e:	1c67      	adds	r7, r4, #1
10008310:	7910      	ldrb	r0, [r2, #4]
10008312:	4684      	mov	ip, r0
10008314:	6848      	ldr	r0, [r1, #4]
10008316:	4666      	mov	r6, ip
10008318:	5506      	strb	r6, [r0, r4]
1000831a:	b2bc      	uxth	r4, r7
	} while (counter < length); 
1000831c:	42ac      	cmp	r4, r5
1000831e:	d3f1      	bcc.n	10008304 <_i2c_master_read_packet+0x3c>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008320:	06db      	lsls	r3, r3, #27
10008322:	d403      	bmi.n	1000832c <_i2c_master_read_packet+0x64>
10008324:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
10008326:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008328:	420b      	tst	r3, r1
1000832a:	d0fc      	beq.n	10008326 <_i2c_master_read_packet+0x5e>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000832c:	464b      	mov	r3, r9
1000832e:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
10008330:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
10008332:	2900      	cmp	r1, #0
10008334:	d102      	bne.n	1000833c <_i2c_master_read_packet+0x74>
		i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
10008336:	3320      	adds	r3, #32
10008338:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
1000833a:	2300      	movs	r3, #0
}
1000833c:	1c18      	adds	r0, r3, #0
1000833e:	bc0c      	pop	{r2, r3}
10008340:	4690      	mov	r8, r2
10008342:	4699      	mov	r9, r3
10008344:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008346:	46c0      	nop			; (mov r8, r8)

10008348 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008348:	b5f0      	push	{r4, r5, r6, r7, lr}
1000834a:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2C *const i2c_module = (module->hw);
1000834c:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000834e:	884e      	ldrh	r6, [r1, #2]
10008350:	2528      	movs	r5, #40	; 0x28
10008352:	2401      	movs	r4, #1
10008354:	5d53      	ldrb	r3, [r2, r5]
10008356:	421c      	tst	r4, r3
10008358:	d1fc      	bne.n	10008354 <_i2c_master_write_packet+0xc>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000835a:	2301      	movs	r3, #1
1000835c:	2434      	movs	r4, #52	; 0x34
1000835e:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
10008360:	3c14      	subs	r4, #20
10008362:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
10008364:	880b      	ldrh	r3, [r1, #0]
10008366:	005b      	lsls	r3, r3, #1
10008368:	34e0      	adds	r4, #224	; 0xe0
1000836a:	4323      	orrs	r3, r4
1000836c:	b29b      	uxth	r3, r3
1000836e:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2C *const i2c_module = (module->hw);
	uint16_t counter = 0;
10008370:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008372:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
10008374:	7a13      	ldrb	r3, [r2, #8]
10008376:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008378:	421d      	tst	r5, r3
1000837a:	d004      	beq.n	10008386 <_i2c_master_write_packet+0x3e>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000837c:	1c67      	adds	r7, r4, #1
1000837e:	6848      	ldr	r0, [r1, #4]
10008380:	5d04      	ldrb	r4, [r0, r4]
10008382:	8014      	strh	r4, [r2, #0]
10008384:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
10008386:	42b4      	cmp	r4, r6
10008388:	d3f4      	bcc.n	10008374 <_i2c_master_write_packet+0x2c>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000838a:	06db      	lsls	r3, r3, #27
1000838c:	d403      	bmi.n	10008396 <_i2c_master_write_packet+0x4e>
1000838e:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
10008390:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008392:	420b      	tst	r3, r1
10008394:	d0fc      	beq.n	10008390 <_i2c_master_write_packet+0x48>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
10008396:	4663      	mov	r3, ip
10008398:	795b      	ldrb	r3, [r3, #5]
1000839a:	2b00      	cmp	r3, #0
1000839c:	d102      	bne.n	100083a4 <_i2c_master_write_packet+0x5c>
		i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
1000839e:	2100      	movs	r1, #0
100083a0:	3320      	adds	r3, #32
100083a2:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
100083a4:	2000      	movs	r0, #0
100083a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100083a8 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
100083a8:	2303      	movs	r3, #3
100083aa:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
100083ac:	330d      	adds	r3, #13
100083ae:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8_MUX2_I2C0_SDA;
100083b0:	3b08      	subs	r3, #8
100083b2:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9_MUX2_I2C0_SCL;
100083b4:	3301      	adds	r3, #1
100083b6:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_MUX2_I2C0_SDA;
100083b8:	3b07      	subs	r3, #7
100083ba:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_MUX2_I2C0_SCL;
100083bc:	6103      	str	r3, [r0, #16]
}
100083be:	4770      	bx	lr

100083c0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2C *const hw,
		const struct i2c_master_config *const config)
{
100083c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
100083c2:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
100083c4:	2800      	cmp	r0, #0
100083c6:	d059      	beq.n	1000847c <i2c_master_init+0xbc>
100083c8:	2a00      	cmp	r2, #0
100083ca:	d059      	beq.n	10008480 <i2c_master_init+0xc0>
100083cc:	2528      	movs	r5, #40	; 0x28
100083ce:	2401      	movs	r4, #1
100083d0:	5d4b      	ldrb	r3, [r1, r5]
100083d2:	421c      	tst	r4, r3
100083d4:	d1fc      	bne.n	100083d0 <i2c_master_init+0x10>
100083d6:	1c14      	adds	r4, r2, #0
100083d8:	1c05      	adds	r5, r0, #0
 *
 */
static inline void i2c_disable(I2C *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
100083da:	2300      	movs	r3, #0
100083dc:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
100083de:	6803      	ldr	r3, [r0, #0]
100083e0:	4a28      	ldr	r2, [pc, #160]	; (10008484 <i2c_master_init+0xc4>)
100083e2:	4293      	cmp	r3, r2
100083e4:	d103      	bne.n	100083ee <i2c_master_init+0x2e>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
100083e6:	2003      	movs	r0, #3
100083e8:	4b27      	ldr	r3, [pc, #156]	; (10008488 <i2c_master_init+0xc8>)
100083ea:	4798      	blx	r3
100083ec:	e006      	b.n	100083fc <i2c_master_init+0x3c>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
100083ee:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
100083f0:	4a26      	ldr	r2, [pc, #152]	; (1000848c <i2c_master_init+0xcc>)
100083f2:	4293      	cmp	r3, r2
100083f4:	d145      	bne.n	10008482 <i2c_master_init+0xc2>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
100083f6:	3002      	adds	r0, #2
100083f8:	4b23      	ldr	r3, [pc, #140]	; (10008488 <i2c_master_init+0xc8>)
100083fa:	4798      	blx	r3
		return STATUS_ERR_INVALID_ARG;
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Initialize values in module. */
	module->registered_callback = 0;
100083fc:	2300      	movs	r3, #0
100083fe:	742b      	strb	r3, [r5, #16]
	module->enabled_callback    = 0;
10008400:	746b      	strb	r3, [r5, #17]
	module->buffer_length       = 0;
10008402:	826b      	strh	r3, [r5, #18]
	module->buffer_remaining    = 0;
10008404:	82ab      	strh	r3, [r5, #20]
	module->status              = STATUS_OK;
10008406:	2200      	movs	r2, #0
10008408:	776a      	strb	r2, [r5, #29]
	module->buffer              = NULL;
1000840a:	61ab      	str	r3, [r5, #24]

	_i2c_instances = (void*)module;
1000840c:	4b20      	ldr	r3, [pc, #128]	; (10008490 <i2c_master_init+0xd0>)
1000840e:	601d      	str	r5, [r3, #0]
	if (module->hw == I2C0) {
10008410:	682b      	ldr	r3, [r5, #0]
10008412:	4a1c      	ldr	r2, [pc, #112]	; (10008484 <i2c_master_init+0xc4>)
10008414:	4293      	cmp	r3, r2
10008416:	d10f      	bne.n	10008438 <i2c_master_init+0x78>
		system_register_isr(RAM_ISR_TABLE_I2CRX0_INDEX, (uint32_t)_i2c_master_isr_handler);
10008418:	4f1e      	ldr	r7, [pc, #120]	; (10008494 <i2c_master_init+0xd4>)
1000841a:	2018      	movs	r0, #24
1000841c:	1c39      	adds	r1, r7, #0
1000841e:	4e1e      	ldr	r6, [pc, #120]	; (10008498 <i2c_master_init+0xd8>)
10008420:	47b0      	blx	r6
		system_register_isr(RAM_ISR_TABLE_I2CTX0_INDEX, (uint32_t)_i2c_master_isr_handler);
10008422:	2019      	movs	r0, #25
10008424:	1c39      	adds	r1, r7, #0
10008426:	47b0      	blx	r6

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10008428:	4b1c      	ldr	r3, [pc, #112]	; (1000849c <i2c_master_init+0xdc>)
1000842a:	2280      	movs	r2, #128	; 0x80
1000842c:	0052      	lsls	r2, r2, #1
1000842e:	601a      	str	r2, [r3, #0]
10008430:	3201      	adds	r2, #1
10008432:	32ff      	adds	r2, #255	; 0xff
10008434:	601a      	str	r2, [r3, #0]
10008436:	e011      	b.n	1000845c <i2c_master_init+0x9c>
		NVIC_EnableIRQ(I2C0_RX_IRQn);
		NVIC_EnableIRQ(I2C0_TX_IRQn);
	} else if (module->hw == I2C1) {
10008438:	4a14      	ldr	r2, [pc, #80]	; (1000848c <i2c_master_init+0xcc>)
1000843a:	4293      	cmp	r3, r2
1000843c:	d10e      	bne.n	1000845c <i2c_master_init+0x9c>
		system_register_isr(RAM_ISR_TABLE_I2CRX1_INDEX, (uint32_t)_i2c_master_isr_handler);
1000843e:	4f15      	ldr	r7, [pc, #84]	; (10008494 <i2c_master_init+0xd4>)
10008440:	201a      	movs	r0, #26
10008442:	1c39      	adds	r1, r7, #0
10008444:	4e14      	ldr	r6, [pc, #80]	; (10008498 <i2c_master_init+0xd8>)
10008446:	47b0      	blx	r6
		system_register_isr(RAM_ISR_TABLE_I2CTX1_INDEX, (uint32_t)_i2c_master_isr_handler);
10008448:	201b      	movs	r0, #27
1000844a:	1c39      	adds	r1, r7, #0
1000844c:	47b0      	blx	r6
1000844e:	4b13      	ldr	r3, [pc, #76]	; (1000849c <i2c_master_init+0xdc>)
10008450:	2280      	movs	r2, #128	; 0x80
10008452:	00d2      	lsls	r2, r2, #3
10008454:	601a      	str	r2, [r3, #0]
10008456:	2280      	movs	r2, #128	; 0x80
10008458:	0112      	lsls	r2, r2, #4
1000845a:	601a      	str	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2C *const i2c_module = (module->hw);
1000845c:	682d      	ldr	r5, [r5, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000845e:	7920      	ldrb	r0, [r4, #4]
10008460:	8921      	ldrh	r1, [r4, #8]
10008462:	4e0f      	ldr	r6, [pc, #60]	; (100084a0 <i2c_master_init+0xe0>)
10008464:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
10008466:	7b20      	ldrb	r0, [r4, #12]
10008468:	8a21      	ldrh	r1, [r4, #16]
1000846a:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000846c:	7823      	ldrb	r3, [r4, #0]
1000846e:	742b      	strb	r3, [r5, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
10008470:	8863      	ldrh	r3, [r4, #2]
10008472:	832b      	strh	r3, [r5, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_I2C_MASTER_MODE_MASTER_ENABLE_1;
10008474:	2301      	movs	r3, #1
10008476:	772b      	strb	r3, [r5, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
10008478:	2000      	movs	r0, #0
1000847a:	e002      	b.n	10008482 <i2c_master_init+0xc2>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000847c:	2017      	movs	r0, #23
1000847e:	e000      	b.n	10008482 <i2c_master_init+0xc2>
10008480:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
10008482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008484:	40003000 	.word	0x40003000
10008488:	10008f49 	.word	0x10008f49
1000848c:	40003400 	.word	0x40003400
10008490:	1000aedc 	.word	0x1000aedc
10008494:	10008535 	.word	0x10008535
10008498:	100093b1 	.word	0x100093b1
1000849c:	e000e100 	.word	0xe000e100
100084a0:	10008a05 	.word	0x10008a05

100084a4 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100084a4:	b508      	push	{r3, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
100084a6:	2800      	cmp	r0, #0
100084a8:	d00c      	beq.n	100084c4 <i2c_master_read_packet_wait+0x20>
100084aa:	2900      	cmp	r1, #0
100084ac:	d00c      	beq.n	100084c8 <i2c_master_read_packet_wait+0x24>
		return STATUS_ERR_INVALID_ARG;

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
100084ae:	8a82      	ldrh	r2, [r0, #20]
100084b0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
100084b2:	2305      	movs	r3, #5
	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
100084b4:	2a00      	cmp	r2, #0
100084b6:	d108      	bne.n	100084ca <i2c_master_read_packet_wait+0x26>
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100084b8:	2300      	movs	r3, #0
100084ba:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
100084bc:	4b04      	ldr	r3, [pc, #16]	; (100084d0 <i2c_master_read_packet_wait+0x2c>)
100084be:	4798      	blx	r3
100084c0:	1c03      	adds	r3, r0, #0
100084c2:	e002      	b.n	100084ca <i2c_master_read_packet_wait+0x26>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
100084c4:	2317      	movs	r3, #23
100084c6:	e000      	b.n	100084ca <i2c_master_read_packet_wait+0x26>
100084c8:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
100084ca:	1c18      	adds	r0, r3, #0
100084cc:	bd08      	pop	{r3, pc}
100084ce:	46c0      	nop			; (mov r8, r8)
100084d0:	100082c9 	.word	0x100082c9

100084d4 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100084d4:	b508      	push	{r3, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100084d6:	2800      	cmp	r0, #0
100084d8:	d00c      	beq.n	100084f4 <i2c_master_write_packet_wait+0x20>
100084da:	2900      	cmp	r1, #0
100084dc:	d00c      	beq.n	100084f8 <i2c_master_write_packet_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
	}
#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
100084de:	8a82      	ldrh	r2, [r0, #20]
100084e0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
100084e2:	2305      	movs	r3, #5
	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
	}
#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
100084e4:	2a00      	cmp	r2, #0
100084e6:	d108      	bne.n	100084fa <i2c_master_write_packet_wait+0x26>
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100084e8:	2300      	movs	r3, #0
100084ea:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100084ec:	4b04      	ldr	r3, [pc, #16]	; (10008500 <i2c_master_write_packet_wait+0x2c>)
100084ee:	4798      	blx	r3
100084f0:	1c03      	adds	r3, r0, #0
100084f2:	e002      	b.n	100084fa <i2c_master_write_packet_wait+0x26>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100084f4:	2317      	movs	r3, #23
100084f6:	e000      	b.n	100084fa <i2c_master_write_packet_wait+0x26>
100084f8:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
100084fa:	1c18      	adds	r0, r3, #0
100084fc:	bd08      	pop	{r3, pc}
100084fe:	46c0      	nop			; (mov r8, r8)
10008500:	10008349 	.word	0x10008349

10008504 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008504:	b508      	push	{r3, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
10008506:	2800      	cmp	r0, #0
10008508:	d00c      	beq.n	10008524 <i2c_master_write_packet_wait_no_stop+0x20>
1000850a:	2900      	cmp	r1, #0
1000850c:	d00c      	beq.n	10008528 <i2c_master_write_packet_wait_no_stop+0x24>
		return STATUS_ERR_INVALID_ARG;
	}
#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
1000850e:	8a82      	ldrh	r2, [r0, #20]
10008510:	b292      	uxth	r2, r2
		return STATUS_BUSY;
10008512:	2305      	movs	r3, #5
	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
	}
#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
10008514:	2a00      	cmp	r2, #0
10008516:	d108      	bne.n	1000852a <i2c_master_write_packet_wait_no_stop+0x26>
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
10008518:	3b04      	subs	r3, #4
1000851a:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
1000851c:	4b04      	ldr	r3, [pc, #16]	; (10008530 <i2c_master_write_packet_wait_no_stop+0x2c>)
1000851e:	4798      	blx	r3
10008520:	1c03      	adds	r3, r0, #0
10008522:	e002      	b.n	1000852a <i2c_master_write_packet_wait_no_stop+0x26>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008524:	2317      	movs	r3, #23
10008526:	e000      	b.n	1000852a <i2c_master_write_packet_wait_no_stop+0x26>
10008528:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
1000852a:	1c18      	adds	r0, r3, #0
1000852c:	bd08      	pop	{r3, pc}
1000852e:	46c0      	nop			; (mov r8, r8)
10008530:	10008349 	.word	0x10008349

10008534 <_i2c_master_isr_handler>:

/**
 * Interrupt handler for I<SUP>2</SUP>C master.
 */
void _i2c_master_isr_handler(void)
{
10008534:	b570      	push	{r4, r5, r6, lr}
10008536:	b082      	sub	sp, #8
	/* Get software module for callback handling */
	struct i2c_master_module *module =
10008538:	4b57      	ldr	r3, [pc, #348]	; (10008698 <_i2c_master_isr_handler+0x164>)
1000853a:	681c      	ldr	r4, [r3, #0]
			(struct i2c_master_module*)_i2c_instances;

	Assert(module);

	I2C *const i2c_module = module->hw;
1000853c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
1000853e:	7c63      	ldrb	r3, [r4, #17]
			module->registered_callback;
10008540:	7c25      	ldrb	r5, [r4, #16]
	Assert(module);

	I2C *const i2c_module = module->hw;

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
10008542:	401d      	ands	r5, r3
			module->registered_callback;

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
10008544:	8a63      	ldrh	r3, [r4, #18]
10008546:	b29b      	uxth	r3, r3
10008548:	2b00      	cmp	r3, #0
1000854a:	d107      	bne.n	1000855c <_i2c_master_isr_handler+0x28>
1000854c:	8aa3      	ldrh	r3, [r4, #20]
1000854e:	b29b      	uxth	r3, r3
10008550:	2b00      	cmp	r3, #0
10008552:	d003      	beq.n	1000855c <_i2c_master_isr_handler+0x28>
		module->buffer_length = module->buffer_remaining;
10008554:	8aa3      	ldrh	r3, [r4, #20]
10008556:	b29b      	uxth	r3, r3
10008558:	8263      	strh	r3, [r4, #18]
1000855a:	e04e      	b.n	100085fa <_i2c_master_isr_handler+0xc6>
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
1000855c:	8a63      	ldrh	r3, [r4, #18]
1000855e:	b29b      	uxth	r3, r3
10008560:	2b00      	cmp	r3, #0
10008562:	d019      	beq.n	10008598 <_i2c_master_isr_handler+0x64>
10008564:	8aa3      	ldrh	r3, [r4, #20]
10008566:	b29b      	uxth	r3, r3
10008568:	2b00      	cmp	r3, #0
1000856a:	d115      	bne.n	10008598 <_i2c_master_isr_handler+0x64>
			(module->status == STATUS_BUSY) &&
1000856c:	7f63      	ldrb	r3, [r4, #29]
			module->registered_callback;

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		module->buffer_length = module->buffer_remaining;
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
1000856e:	2b05      	cmp	r3, #5
10008570:	d112      	bne.n	10008598 <_i2c_master_isr_handler+0x64>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
10008572:	7f23      	ldrb	r3, [r4, #28]

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		module->buffer_length = module->buffer_remaining;
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
10008574:	2b00      	cmp	r3, #0
10008576:	d10f      	bne.n	10008598 <_i2c_master_isr_handler+0x64>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Disable write interrupt flag */
		i2c_module->TX_INTERRUPT_MASK.reg = 0;
10008578:	222c      	movs	r2, #44	; 0x2c
1000857a:	54b3      	strb	r3, [r6, r2]

		module->buffer_length = 0;
1000857c:	8263      	strh	r3, [r4, #18]
		module->status        = STATUS_OK;
1000857e:	7763      	strb	r3, [r4, #29]

		if (!module->no_stop) {
10008580:	7963      	ldrb	r3, [r4, #5]
10008582:	2b00      	cmp	r3, #0
10008584:	d102      	bne.n	1000858c <_i2c_master_isr_handler+0x58>
			/* Send stop condition */
			i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
10008586:	2200      	movs	r2, #0
10008588:	3320      	adds	r3, #32
1000858a:	54f2      	strb	r2, [r6, r3]
		} 

		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
1000858c:	07eb      	lsls	r3, r5, #31
1000858e:	d534      	bpl.n	100085fa <_i2c_master_isr_handler+0xc6>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
10008590:	68a3      	ldr	r3, [r4, #8]
10008592:	1c20      	adds	r0, r4, #0
10008594:	4798      	blx	r3
10008596:	e030      	b.n	100085fa <_i2c_master_isr_handler+0xc6>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
10008598:	8a63      	ldrh	r3, [r4, #18]
1000859a:	b29b      	uxth	r3, r3
1000859c:	2b00      	cmp	r3, #0
1000859e:	d02c      	beq.n	100085fa <_i2c_master_isr_handler+0xc6>
100085a0:	8aa3      	ldrh	r3, [r4, #20]
100085a2:	b29b      	uxth	r3, r3
100085a4:	2b00      	cmp	r3, #0
100085a6:	d028      	beq.n	100085fa <_i2c_master_isr_handler+0xc6>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
100085a8:	7f23      	ldrb	r3, [r4, #28]
100085aa:	2b00      	cmp	r3, #0
100085ac:	d117      	bne.n	100085de <_i2c_master_isr_handler+0xaa>
	Assert(module->hw);

	I2C *const i2c_module = module->hw;

	/* Find index to get next byte in buffer */
	volatile uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
100085ae:	8a63      	ldrh	r3, [r4, #18]
100085b0:	8aa2      	ldrh	r2, [r4, #20]
100085b2:	1a9b      	subs	r3, r3, r2
100085b4:	b29b      	uxth	r3, r3
100085b6:	466a      	mov	r2, sp
100085b8:	80d3      	strh	r3, [r2, #6]

	module->buffer_remaining--;
100085ba:	8aa3      	ldrh	r3, [r4, #20]
100085bc:	3b01      	subs	r3, #1
100085be:	b29b      	uxth	r3, r3
100085c0:	82a3      	strh	r3, [r4, #20]

	/* Write byte from buffer to slave */
	i2c_module->TRANSMIT_DATA.reg = module->buffer[buffer_index];
100085c2:	88d3      	ldrh	r3, [r2, #6]
100085c4:	69a2      	ldr	r2, [r4, #24]
100085c6:	4694      	mov	ip, r2
100085c8:	4463      	add	r3, ip
100085ca:	781b      	ldrb	r3, [r3, #0]
100085cc:	8033      	strh	r3, [r6, #0]
	
	if (module->buffer_remaining <= 0) {
100085ce:	8aa3      	ldrh	r3, [r4, #20]
100085d0:	b29b      	uxth	r3, r3
100085d2:	2b00      	cmp	r3, #0
100085d4:	d111      	bne.n	100085fa <_i2c_master_isr_handler+0xc6>
		i2c_module->TX_INTERRUPT_MASK.reg = I2C_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
100085d6:	2210      	movs	r2, #16
100085d8:	332c      	adds	r3, #44	; 0x2c
100085da:	54f2      	strb	r2, [r6, r3]
100085dc:	e00d      	b.n	100085fa <_i2c_master_isr_handler+0xc6>
	Assert(module->hw);

	I2C *const i2c_module = module->hw;

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
100085de:	8a63      	ldrh	r3, [r4, #18]
100085e0:	8aa1      	ldrh	r1, [r4, #20]

	module->buffer_remaining--;
100085e2:	8aa2      	ldrh	r2, [r4, #20]
100085e4:	3a01      	subs	r2, #1
100085e6:	b292      	uxth	r2, r2
100085e8:	82a2      	strh	r2, [r4, #20]
	Assert(module->hw);

	I2C *const i2c_module = module->hw;

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
100085ea:	1a5b      	subs	r3, r3, r1

	module->buffer_remaining--;

	module->buffer[buffer_index] = i2c_module->RECEIVE_DATA.reg;
100085ec:	b29b      	uxth	r3, r3
100085ee:	69a2      	ldr	r2, [r4, #24]
100085f0:	4694      	mov	ip, r2
100085f2:	4463      	add	r3, ip
100085f4:	7932      	ldrb	r2, [r6, #4]
100085f6:	b2d2      	uxtb	r2, r2
100085f8:	701a      	strb	r2, [r3, #0]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
100085fa:	8a63      	ldrh	r3, [r4, #18]
100085fc:	b29b      	uxth	r3, r3
100085fe:	2b00      	cmp	r3, #0
10008600:	d01c      	beq.n	1000863c <_i2c_master_isr_handler+0x108>
10008602:	8aa3      	ldrh	r3, [r4, #20]
10008604:	b29b      	uxth	r3, r3
10008606:	2b00      	cmp	r3, #0
10008608:	d118      	bne.n	1000863c <_i2c_master_isr_handler+0x108>
			(module->status == STATUS_BUSY) &&
1000860a:	7f63      	ldrb	r3, [r4, #29]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
1000860c:	2b05      	cmp	r3, #5
1000860e:	d115      	bne.n	1000863c <_i2c_master_isr_handler+0x108>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
10008610:	7f23      	ldrb	r3, [r4, #28]
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
10008612:	2b01      	cmp	r3, #1
10008614:	d112      	bne.n	1000863c <_i2c_master_isr_handler+0x108>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
		/* Disable read interrupt flag */
		i2c_module->RX_INTERRUPT_MASK.reg = 0;
10008616:	2300      	movs	r3, #0
10008618:	2230      	movs	r2, #48	; 0x30
1000861a:	54b3      	strb	r3, [r6, r2]

		module->buffer_length = 0;
1000861c:	8263      	strh	r3, [r4, #18]
		module->status        = STATUS_OK;
1000861e:	7763      	strb	r3, [r4, #29]

		if (!module->no_stop) {
10008620:	7963      	ldrb	r3, [r4, #5]
10008622:	2b00      	cmp	r3, #0
10008624:	d102      	bne.n	1000862c <_i2c_master_isr_handler+0xf8>
			/* Send stop condition */
			i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
10008626:	2200      	movs	r2, #0
10008628:	3320      	adds	r3, #32
1000862a:	54f2      	strb	r2, [r6, r3]
		}
		
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
1000862c:	07ab      	lsls	r3, r5, #30
1000862e:	d505      	bpl.n	1000863c <_i2c_master_isr_handler+0x108>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
10008630:	7f23      	ldrb	r3, [r4, #28]
10008632:	2b01      	cmp	r3, #1
10008634:	d102      	bne.n	1000863c <_i2c_master_isr_handler+0x108>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
10008636:	68e3      	ldr	r3, [r4, #12]
10008638:	1c20      	adds	r0, r4, #0
1000863a:	4798      	blx	r3
		}
	}
	if (module->transfer_direction == I2C_TRANSFER_READ) {
1000863c:	7f23      	ldrb	r3, [r4, #28]
1000863e:	2b01      	cmp	r3, #1
10008640:	d114      	bne.n	1000866c <_i2c_master_isr_handler+0x138>
		if (module->hw == I2C0) {
10008642:	6823      	ldr	r3, [r4, #0]
10008644:	4a15      	ldr	r2, [pc, #84]	; (1000869c <_i2c_master_isr_handler+0x168>)
10008646:	4293      	cmp	r3, r2
10008648:	d106      	bne.n	10008658 <_i2c_master_isr_handler+0x124>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000864a:	2180      	movs	r1, #128	; 0x80
1000864c:	0049      	lsls	r1, r1, #1
1000864e:	23c0      	movs	r3, #192	; 0xc0
10008650:	005b      	lsls	r3, r3, #1
10008652:	4a13      	ldr	r2, [pc, #76]	; (100086a0 <_i2c_master_isr_handler+0x16c>)
10008654:	50d1      	str	r1, [r2, r3]
10008656:	e01d      	b.n	10008694 <_i2c_master_isr_handler+0x160>
			NVIC_ClearPendingIRQ(I2C0_RX_IRQn);
		} else if (module->hw == I2C1) {
10008658:	4a12      	ldr	r2, [pc, #72]	; (100086a4 <_i2c_master_isr_handler+0x170>)
1000865a:	4293      	cmp	r3, r2
1000865c:	d11a      	bne.n	10008694 <_i2c_master_isr_handler+0x160>
1000865e:	2180      	movs	r1, #128	; 0x80
10008660:	00c9      	lsls	r1, r1, #3
10008662:	23c0      	movs	r3, #192	; 0xc0
10008664:	005b      	lsls	r3, r3, #1
10008666:	4a0e      	ldr	r2, [pc, #56]	; (100086a0 <_i2c_master_isr_handler+0x16c>)
10008668:	50d1      	str	r1, [r2, r3]
1000866a:	e013      	b.n	10008694 <_i2c_master_isr_handler+0x160>
			NVIC_ClearPendingIRQ(I2C1_RX_IRQn);
		} 
	} else {
		if (module->hw == I2C0) {
1000866c:	6823      	ldr	r3, [r4, #0]
1000866e:	4a0b      	ldr	r2, [pc, #44]	; (1000869c <_i2c_master_isr_handler+0x168>)
10008670:	4293      	cmp	r3, r2
10008672:	d106      	bne.n	10008682 <_i2c_master_isr_handler+0x14e>
10008674:	2180      	movs	r1, #128	; 0x80
10008676:	0089      	lsls	r1, r1, #2
10008678:	23c0      	movs	r3, #192	; 0xc0
1000867a:	005b      	lsls	r3, r3, #1
1000867c:	4a08      	ldr	r2, [pc, #32]	; (100086a0 <_i2c_master_isr_handler+0x16c>)
1000867e:	50d1      	str	r1, [r2, r3]
10008680:	e008      	b.n	10008694 <_i2c_master_isr_handler+0x160>
			NVIC_ClearPendingIRQ(I2C0_TX_IRQn);
		} else if (module->hw == I2C1) {
10008682:	4a08      	ldr	r2, [pc, #32]	; (100086a4 <_i2c_master_isr_handler+0x170>)
10008684:	4293      	cmp	r3, r2
10008686:	d105      	bne.n	10008694 <_i2c_master_isr_handler+0x160>
10008688:	2180      	movs	r1, #128	; 0x80
1000868a:	0109      	lsls	r1, r1, #4
1000868c:	23c0      	movs	r3, #192	; 0xc0
1000868e:	005b      	lsls	r3, r3, #1
10008690:	4a03      	ldr	r2, [pc, #12]	; (100086a0 <_i2c_master_isr_handler+0x16c>)
10008692:	50d1      	str	r1, [r2, r3]
			NVIC_ClearPendingIRQ(I2C1_TX_IRQn);
		}
	}
}
10008694:	b002      	add	sp, #8
10008696:	bd70      	pop	{r4, r5, r6, pc}
10008698:	1000aedc 	.word	0x1000aedc
1000869c:	40003000 	.word	0x40003000
100086a0:	e000e100 	.word	0xe000e100
100086a4:	40003400 	.word	0x40003400

100086a8 <timer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TIMER module configuration structure to set
 */
void timer_get_config_defaults(struct timer_config *config)
{
	config->reload_value = 0;
100086a8:	2300      	movs	r3, #0
100086aa:	6003      	str	r3, [r0, #0]
	config->interrupt_enable = true;
100086ac:	3301      	adds	r3, #1
100086ae:	7103      	strb	r3, [r0, #4]
}
100086b0:	4770      	bx	lr
100086b2:	46c0      	nop			; (mov r8, r8)

100086b4 <timer_clear_interrupt_status>:
 *
 * Clear the TIMER0 module interrupt status
 */
void timer_clear_interrupt_status(void)
{
	TIMER0->INTSTATUSCLEAR.reg = 1;
100086b4:	2201      	movs	r2, #1
100086b6:	2380      	movs	r3, #128	; 0x80
100086b8:	05db      	lsls	r3, r3, #23
100086ba:	731a      	strb	r2, [r3, #12]
	/* Wait for operation finish */
	while (TIMER0->INTSTATUSCLEAR.reg);
100086bc:	1c1a      	adds	r2, r3, #0
100086be:	7b13      	ldrb	r3, [r2, #12]
100086c0:	2b00      	cmp	r3, #0
100086c2:	d1fc      	bne.n	100086be <timer_clear_interrupt_status+0xa>
}
100086c4:	4770      	bx	lr
100086c6:	46c0      	nop			; (mov r8, r8)

100086c8 <timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void timer_isr_handler(void)
{
100086c8:	b508      	push	{r3, lr}
 *
 * \retval The status of module
 */
uint32_t timer_get_interrupt_status(void)
{
	return TIMER0->INTSTATUSCLEAR.reg;
100086ca:	2380      	movs	r3, #128	; 0x80
100086cc:	05db      	lsls	r3, r3, #23
100086ce:	7b1b      	ldrb	r3, [r3, #12]
 * Timer ISR handler.
 *
 */
static void timer_isr_handler(void)
{
	if (timer_get_interrupt_status()) {
100086d0:	2b00      	cmp	r3, #0
100086d2:	d006      	beq.n	100086e2 <timer_isr_handler+0x1a>
		timer_clear_interrupt_status();
100086d4:	4b03      	ldr	r3, [pc, #12]	; (100086e4 <timer_isr_handler+0x1c>)
100086d6:	4798      	blx	r3
		
		if (timer_callback) {
100086d8:	4b03      	ldr	r3, [pc, #12]	; (100086e8 <timer_isr_handler+0x20>)
100086da:	681b      	ldr	r3, [r3, #0]
100086dc:	2b00      	cmp	r3, #0
100086de:	d000      	beq.n	100086e2 <timer_isr_handler+0x1a>
			timer_callback();
100086e0:	4798      	blx	r3
		}
	}
}
100086e2:	bd08      	pop	{r3, pc}
100086e4:	100086b5 	.word	0x100086b5
100086e8:	1000aea0 	.word	0x1000aea0

100086ec <timer_enable>:
 *
 * Enable the TIMER0 module
 */
void timer_enable(void)
{
	TIMER0->CTRL.reg |= TIMER_CTRL_ENABLE;
100086ec:	2280      	movs	r2, #128	; 0x80
100086ee:	05d2      	lsls	r2, r2, #23
100086f0:	7811      	ldrb	r1, [r2, #0]
100086f2:	2301      	movs	r3, #1
100086f4:	430b      	orrs	r3, r1
100086f6:	7013      	strb	r3, [r2, #0]
}
100086f8:	4770      	bx	lr
100086fa:	46c0      	nop			; (mov r8, r8)

100086fc <timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void timer_register_callback(timer_callback_t fun)
{
	timer_callback = fun; 
100086fc:	4b01      	ldr	r3, [pc, #4]	; (10008704 <timer_register_callback+0x8>)
100086fe:	6018      	str	r0, [r3, #0]
}
10008700:	4770      	bx	lr
10008702:	46c0      	nop			; (mov r8, r8)
10008704:	1000aea0 	.word	0x1000aea0

10008708 <timer_init>:
 * \param[in]     config       Pointer to the TIMER configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void timer_init(const struct timer_config *config)
{
10008708:	b510      	push	{r4, lr}
1000870a:	1c04      	adds	r4, r0, #0
	/* Global reset */
	system_peripheral_reset(PERIPHERAL_TIMER);
1000870c:	2006      	movs	r0, #6
1000870e:	4b09      	ldr	r3, [pc, #36]	; (10008734 <timer_init+0x2c>)
10008710:	4798      	blx	r3

	TIMER0->CTRL.reg = config->interrupt_enable << TIMER_CTRL_INTERRUPT_ENABLE_Pos;
10008712:	7923      	ldrb	r3, [r4, #4]
10008714:	00db      	lsls	r3, r3, #3
10008716:	b2db      	uxtb	r3, r3
10008718:	2280      	movs	r2, #128	; 0x80
1000871a:	05d2      	lsls	r2, r2, #23
1000871c:	7013      	strb	r3, [r2, #0]
	TIMER0->RELOAD.reg = config->reload_value;
1000871e:	6823      	ldr	r3, [r4, #0]
10008720:	6093      	str	r3, [r2, #8]
	
	timer_callback = NULL;
10008722:	2200      	movs	r2, #0
10008724:	4b04      	ldr	r3, [pc, #16]	; (10008738 <timer_init+0x30>)
10008726:	601a      	str	r2, [r3, #0]
	system_register_isr(RAM_ISR_TABLE_TIMER0_INDEX, (uint32_t)timer_isr_handler);
10008728:	202a      	movs	r0, #42	; 0x2a
1000872a:	4904      	ldr	r1, [pc, #16]	; (1000873c <timer_init+0x34>)
1000872c:	4b04      	ldr	r3, [pc, #16]	; (10008740 <timer_init+0x38>)
1000872e:	4798      	blx	r3
10008730:	bd10      	pop	{r4, pc}
10008732:	46c0      	nop			; (mov r8, r8)
10008734:	10008f49 	.word	0x10008f49
10008738:	1000aea0 	.word	0x1000aea0
1000873c:	100086c9 	.word	0x100086c9
10008740:	100093b1 	.word	0x100093b1

10008744 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
10008744:	b5f0      	push	{r4, r5, r6, r7, lr}
10008746:	4647      	mov	r7, r8
10008748:	b480      	push	{r7}
1000874a:	1c0c      	adds	r4, r1, #0
1000874c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000874e:	2800      	cmp	r0, #0
10008750:	d110      	bne.n	10008774 <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
10008752:	2a00      	cmp	r2, #0
10008754:	dd0a      	ble.n	1000876c <_read+0x28>
10008756:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
10008758:	4e09      	ldr	r6, [pc, #36]	; (10008780 <_read+0x3c>)
1000875a:	4d0a      	ldr	r5, [pc, #40]	; (10008784 <_read+0x40>)
1000875c:	6830      	ldr	r0, [r6, #0]
1000875e:	1c21      	adds	r1, r4, #0
10008760:	682b      	ldr	r3, [r5, #0]
10008762:	4798      	blx	r3
		ptr++;
10008764:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
10008766:	42bc      	cmp	r4, r7
10008768:	d1f8      	bne.n	1000875c <_read+0x18>
1000876a:	e001      	b.n	10008770 <_read+0x2c>
1000876c:	2300      	movs	r3, #0
1000876e:	4698      	mov	r8, r3
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
10008770:	4640      	mov	r0, r8
10008772:	e001      	b.n	10008778 <_read+0x34>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
10008774:	2001      	movs	r0, #1
10008776:	4240      	negs	r0, r0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
10008778:	bc04      	pop	{r2}
1000877a:	4690      	mov	r8, r2
1000877c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000877e:	46c0      	nop			; (mov r8, r8)
10008780:	1000aee8 	.word	0x1000aee8
10008784:	1000aee0 	.word	0x1000aee0

10008788 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
10008788:	b5f0      	push	{r4, r5, r6, r7, lr}
1000878a:	4647      	mov	r7, r8
1000878c:	b480      	push	{r7}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000878e:	3801      	subs	r0, #1
10008790:	2802      	cmp	r0, #2
10008792:	d815      	bhi.n	100087c0 <_write+0x38>
		return -1;
	}

	for (; len != 0; --len) {
10008794:	2a00      	cmp	r2, #0
10008796:	d010      	beq.n	100087ba <_write+0x32>
10008798:	1c15      	adds	r5, r2, #0
1000879a:	1c0e      	adds	r6, r1, #0
1000879c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000879e:	4b0c      	ldr	r3, [pc, #48]	; (100087d0 <_write+0x48>)
100087a0:	4698      	mov	r8, r3
100087a2:	4f0c      	ldr	r7, [pc, #48]	; (100087d4 <_write+0x4c>)
100087a4:	4643      	mov	r3, r8
100087a6:	6818      	ldr	r0, [r3, #0]
100087a8:	5d31      	ldrb	r1, [r6, r4]
100087aa:	683b      	ldr	r3, [r7, #0]
100087ac:	4798      	blx	r3
100087ae:	2800      	cmp	r0, #0
100087b0:	db09      	blt.n	100087c6 <_write+0x3e>
			return -1;
		}
		++nChars;
100087b2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
100087b4:	42a5      	cmp	r5, r4
100087b6:	d1f5      	bne.n	100087a4 <_write+0x1c>
100087b8:	e000      	b.n	100087bc <_write+0x34>
100087ba:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
100087bc:	1c20      	adds	r0, r4, #0
100087be:	e004      	b.n	100087ca <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
100087c0:	2001      	movs	r0, #1
100087c2:	4240      	negs	r0, r0
100087c4:	e001      	b.n	100087ca <_write+0x42>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
100087c6:	2001      	movs	r0, #1
100087c8:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
100087ca:	bc04      	pop	{r2}
100087cc:	4690      	mov	r8, r2
100087ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
100087d0:	1000aee8 	.word	0x1000aee8
100087d4:	1000aee4 	.word	0x1000aee4

100087d8 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
100087d8:	2300      	movs	r3, #0
100087da:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
100087dc:	2201      	movs	r2, #1
100087de:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
100087e0:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
100087e2:	70c3      	strb	r3, [r0, #3]
}
100087e4:	4770      	bx	lr
100087e6:	46c0      	nop			; (mov r8, r8)

100087e8 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
100087e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
100087ea:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
100087ec:	2801      	cmp	r0, #1
100087ee:	d800      	bhi.n	100087f2 <gpio_pin_set_config+0xa>
100087f0:	e0d0      	b.n	10008994 <gpio_pin_set_config+0x1ac>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
100087f2:	2807      	cmp	r0, #7
100087f4:	d809      	bhi.n	1000880a <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
100087f6:	4d68      	ldr	r5, [pc, #416]	; (10008998 <gpio_pin_set_config+0x1b0>)
100087f8:	6c6a      	ldr	r2, [r5, #68]	; 0x44
100087fa:	3b10      	subs	r3, #16
100087fc:	4003      	ands	r3, r0
100087fe:	009b      	lsls	r3, r3, #2
10008800:	2407      	movs	r4, #7
10008802:	409c      	lsls	r4, r3
10008804:	43a2      	bics	r2, r4
10008806:	646a      	str	r2, [r5, #68]	; 0x44
10008808:	e02c      	b.n	10008864 <gpio_pin_set_config+0x7c>
		} else if (gpio_pin <= 15) {
1000880a:	280f      	cmp	r0, #15
1000880c:	d809      	bhi.n	10008822 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000880e:	4d62      	ldr	r5, [pc, #392]	; (10008998 <gpio_pin_set_config+0x1b0>)
10008810:	6caa      	ldr	r2, [r5, #72]	; 0x48
10008812:	2307      	movs	r3, #7
10008814:	4003      	ands	r3, r0
10008816:	009b      	lsls	r3, r3, #2
10008818:	2407      	movs	r4, #7
1000881a:	409c      	lsls	r4, r3
1000881c:	43a2      	bics	r2, r4
1000881e:	64aa      	str	r2, [r5, #72]	; 0x48
10008820:	e020      	b.n	10008864 <gpio_pin_set_config+0x7c>
		} else if (gpio_pin <= 23) {
10008822:	2817      	cmp	r0, #23
10008824:	d809      	bhi.n	1000883a <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008826:	4d5c      	ldr	r5, [pc, #368]	; (10008998 <gpio_pin_set_config+0x1b0>)
10008828:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000882a:	2307      	movs	r3, #7
1000882c:	4003      	ands	r3, r0
1000882e:	009b      	lsls	r3, r3, #2
10008830:	2407      	movs	r4, #7
10008832:	409c      	lsls	r4, r3
10008834:	43a2      	bics	r2, r4
10008836:	64ea      	str	r2, [r5, #76]	; 0x4c
10008838:	e014      	b.n	10008864 <gpio_pin_set_config+0x7c>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000883a:	1c03      	adds	r3, r0, #0
1000883c:	3b2c      	subs	r3, #44	; 0x2c
1000883e:	2b03      	cmp	r3, #3
10008840:	d810      	bhi.n	10008864 <gpio_pin_set_config+0x7c>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
10008842:	4d56      	ldr	r5, [pc, #344]	; (1000899c <gpio_pin_set_config+0x1b4>)
10008844:	2482      	movs	r4, #130	; 0x82
10008846:	00e4      	lsls	r4, r4, #3
10008848:	5d2b      	ldrb	r3, [r5, r4]
1000884a:	220f      	movs	r2, #15
1000884c:	4013      	ands	r3, r2
1000884e:	1c07      	adds	r7, r0, #0
10008850:	3f2c      	subs	r7, #44	; 0x2c
10008852:	2601      	movs	r6, #1
10008854:	40be      	lsls	r6, r7
10008856:	43b3      	bics	r3, r6
10008858:	401a      	ands	r2, r3
1000885a:	5d2b      	ldrb	r3, [r5, r4]
1000885c:	260f      	movs	r6, #15
1000885e:	43b3      	bics	r3, r6
10008860:	4313      	orrs	r3, r2
10008862:	552b      	strb	r3, [r5, r4]
		}
		
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
10008864:	1c03      	adds	r3, r0, #0
10008866:	3b1d      	subs	r3, #29
10008868:	2b02      	cmp	r3, #2
1000886a:	d82a      	bhi.n	100088c2 <gpio_pin_set_config+0xda>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000886c:	784b      	ldrb	r3, [r1, #1]
1000886e:	2b01      	cmp	r3, #1
10008870:	d108      	bne.n	10008884 <gpio_pin_set_config+0x9c>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
10008872:	4d4a      	ldr	r5, [pc, #296]	; (1000899c <gpio_pin_set_config+0x1b4>)
10008874:	7d2b      	ldrb	r3, [r5, #20]
10008876:	221f      	movs	r2, #31
10008878:	1a14      	subs	r4, r2, r0
1000887a:	3a1e      	subs	r2, #30
1000887c:	40a2      	lsls	r2, r4
1000887e:	4393      	bics	r3, r2
10008880:	752b      	strb	r3, [r5, #20]
10008882:	e009      	b.n	10008898 <gpio_pin_set_config+0xb0>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
10008884:	4d45      	ldr	r5, [pc, #276]	; (1000899c <gpio_pin_set_config+0x1b4>)
10008886:	7d2e      	ldrb	r6, [r5, #20]
10008888:	241f      	movs	r4, #31
1000888a:	1a24      	subs	r4, r4, r0
1000888c:	2201      	movs	r2, #1
1000888e:	1c13      	adds	r3, r2, #0
10008890:	40a3      	lsls	r3, r4
10008892:	4333      	orrs	r3, r6
10008894:	b2db      	uxtb	r3, r3
10008896:	752b      	strb	r3, [r5, #20]
			}
			if (config->aon_wakeup) {
10008898:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000889a:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000889c:	2a00      	cmp	r2, #0
1000889e:	d079      	beq.n	10008994 <gpio_pin_set_config+0x1ac>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
100088a0:	493e      	ldr	r1, [pc, #248]	; (1000899c <gpio_pin_set_config+0x1b4>)
100088a2:	880b      	ldrh	r3, [r1, #0]
100088a4:	221f      	movs	r2, #31
100088a6:	1a10      	subs	r0, r2, r0
100088a8:	0080      	lsls	r0, r0, #2
100088aa:	3a1e      	subs	r2, #30
100088ac:	4082      	lsls	r2, r0
100088ae:	4313      	orrs	r3, r2
100088b0:	b29b      	uxth	r3, r3
100088b2:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
100088b4:	4a3a      	ldr	r2, [pc, #232]	; (100089a0 <gpio_pin_set_config+0x1b8>)
100088b6:	7811      	ldrb	r1, [r2, #0]
100088b8:	2302      	movs	r3, #2
100088ba:	430b      	orrs	r3, r1
100088bc:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100088be:	2300      	movs	r3, #0
100088c0:	e068      	b.n	10008994 <gpio_pin_set_config+0x1ac>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
100088c2:	780a      	ldrb	r2, [r1, #0]
100088c4:	2a00      	cmp	r2, #0
100088c6:	d143      	bne.n	10008950 <gpio_pin_set_config+0x168>
				if(gpio_pin < 16) {
100088c8:	280f      	cmp	r0, #15
100088ca:	d808      	bhi.n	100088de <gpio_pin_set_config+0xf6>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
100088cc:	2301      	movs	r3, #1
100088ce:	4083      	lsls	r3, r0
100088d0:	b29b      	uxth	r3, r3
100088d2:	4a34      	ldr	r2, [pc, #208]	; (100089a4 <gpio_pin_set_config+0x1bc>)
100088d4:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100088d6:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
100088d8:	281f      	cmp	r0, #31
100088da:	d85b      	bhi.n	10008994 <gpio_pin_set_config+0x1ac>
100088dc:	e012      	b.n	10008904 <gpio_pin_set_config+0x11c>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
100088de:	281f      	cmp	r0, #31
100088e0:	d807      	bhi.n	100088f2 <gpio_pin_set_config+0x10a>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
100088e2:	230f      	movs	r3, #15
100088e4:	4003      	ands	r3, r0
100088e6:	2201      	movs	r2, #1
100088e8:	409a      	lsls	r2, r3
100088ea:	b293      	uxth	r3, r2
100088ec:	4a2e      	ldr	r2, [pc, #184]	; (100089a8 <gpio_pin_set_config+0x1c0>)
100088ee:	8293      	strh	r3, [r2, #20]
100088f0:	e008      	b.n	10008904 <gpio_pin_set_config+0x11c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
100088f2:	230f      	movs	r3, #15
100088f4:	4018      	ands	r0, r3
100088f6:	3b0e      	subs	r3, #14
100088f8:	4083      	lsls	r3, r0
100088fa:	b298      	uxth	r0, r3
100088fc:	4b2b      	ldr	r3, [pc, #172]	; (100089ac <gpio_pin_set_config+0x1c4>)
100088fe:	8298      	strh	r0, [r3, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008900:	2300      	movs	r3, #0
10008902:	e047      	b.n	10008994 <gpio_pin_set_config+0x1ac>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
10008904:	784b      	ldrb	r3, [r1, #1]
10008906:	2b01      	cmp	r3, #1
10008908:	d00d      	beq.n	10008926 <gpio_pin_set_config+0x13e>
1000890a:	2b00      	cmp	r3, #0
1000890c:	d002      	beq.n	10008914 <gpio_pin_set_config+0x12c>
1000890e:	2b02      	cmp	r3, #2
10008910:	d011      	beq.n	10008936 <gpio_pin_set_config+0x14e>
10008912:	e03e      	b.n	10008992 <gpio_pin_set_config+0x1aa>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
10008914:	4920      	ldr	r1, [pc, #128]	; (10008998 <gpio_pin_set_config+0x1b0>)
10008916:	6d0b      	ldr	r3, [r1, #80]	; 0x50
10008918:	2201      	movs	r2, #1
1000891a:	4082      	lsls	r2, r0
1000891c:	1c10      	adds	r0, r2, #0
1000891e:	4318      	orrs	r0, r3
10008920:	6508      	str	r0, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008922:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
10008924:	e036      	b.n	10008994 <gpio_pin_set_config+0x1ac>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008926:	491c      	ldr	r1, [pc, #112]	; (10008998 <gpio_pin_set_config+0x1b0>)
10008928:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000892a:	2201      	movs	r2, #1
1000892c:	4082      	lsls	r2, r0
1000892e:	4393      	bics	r3, r2
10008930:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008932:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
10008934:	e02e      	b.n	10008994 <gpio_pin_set_config+0x1ac>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
10008936:	4b18      	ldr	r3, [pc, #96]	; (10008998 <gpio_pin_set_config+0x1b0>)
10008938:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000893a:	2201      	movs	r2, #1
1000893c:	4082      	lsls	r2, r0
1000893e:	1c10      	adds	r0, r2, #0
10008940:	1c0a      	adds	r2, r1, #0
10008942:	4302      	orrs	r2, r0
10008944:	655a      	str	r2, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008946:	6d1a      	ldr	r2, [r3, #80]	; 0x50
10008948:	4382      	bics	r2, r0
1000894a:	651a      	str	r2, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000894c:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000894e:	e021      	b.n	10008994 <gpio_pin_set_config+0x1ac>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008950:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
10008952:	2a01      	cmp	r2, #1
10008954:	d11e      	bne.n	10008994 <gpio_pin_set_config+0x1ac>
				if (gpio_pin < 16) {
10008956:	280f      	cmp	r0, #15
10008958:	d806      	bhi.n	10008968 <gpio_pin_set_config+0x180>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000895a:	3301      	adds	r3, #1
1000895c:	4083      	lsls	r3, r0
1000895e:	b298      	uxth	r0, r3
10008960:	4b10      	ldr	r3, [pc, #64]	; (100089a4 <gpio_pin_set_config+0x1bc>)
10008962:	8218      	strh	r0, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008964:	2300      	movs	r3, #0
10008966:	e015      	b.n	10008994 <gpio_pin_set_config+0x1ac>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
10008968:	281f      	cmp	r0, #31
1000896a:	d809      	bhi.n	10008980 <gpio_pin_set_config+0x198>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000896c:	230f      	movs	r3, #15
1000896e:	4018      	ands	r0, r3
10008970:	2201      	movs	r2, #1
10008972:	1c13      	adds	r3, r2, #0
10008974:	4083      	lsls	r3, r0
10008976:	b29b      	uxth	r3, r3
10008978:	4a0b      	ldr	r2, [pc, #44]	; (100089a8 <gpio_pin_set_config+0x1c0>)
1000897a:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000897c:	2300      	movs	r3, #0
1000897e:	e009      	b.n	10008994 <gpio_pin_set_config+0x1ac>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
10008980:	230f      	movs	r3, #15
10008982:	4018      	ands	r0, r3
10008984:	3b0e      	subs	r3, #14
10008986:	4083      	lsls	r3, r0
10008988:	b298      	uxth	r0, r3
1000898a:	4b08      	ldr	r3, [pc, #32]	; (100089ac <gpio_pin_set_config+0x1c4>)
1000898c:	8218      	strh	r0, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000898e:	2300      	movs	r3, #0
10008990:	e000      	b.n	10008994 <gpio_pin_set_config+0x1ac>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
10008992:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
10008994:	1c18      	adds	r0, r3, #0
10008996:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008998:	4000b000 	.word	0x4000b000
1000899c:	4000f000 	.word	0x4000f000
100089a0:	4000e000 	.word	0x4000e000
100089a4:	40010000 	.word	0x40010000
100089a8:	40011000 	.word	0x40011000
100089ac:	40013000 	.word	0x40013000

100089b0 <gpio_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle.
 */
void gpio_pin_toggle_output_level(const uint8_t gpio_pin)
{
	if (gpio_pin < 16) {
100089b0:	280f      	cmp	r0, #15
100089b2:	d808      	bhi.n	100089c6 <gpio_pin_toggle_output_level+0x16>
		GPIO0->DATAOUT.reg ^= (1 << gpio_pin);
100089b4:	4a10      	ldr	r2, [pc, #64]	; (100089f8 <gpio_pin_toggle_output_level+0x48>)
100089b6:	8891      	ldrh	r1, [r2, #4]
100089b8:	2301      	movs	r3, #1
100089ba:	4083      	lsls	r3, r0
100089bc:	1c18      	adds	r0, r3, #0
100089be:	4048      	eors	r0, r1
100089c0:	b280      	uxth	r0, r0
100089c2:	8090      	strh	r0, [r2, #4]
100089c4:	e016      	b.n	100089f4 <gpio_pin_toggle_output_level+0x44>
	} else if (gpio_pin < 32) {
100089c6:	281f      	cmp	r0, #31
100089c8:	d80a      	bhi.n	100089e0 <gpio_pin_toggle_output_level+0x30>
		GPIO1->DATAOUT.reg ^= (1 << (gpio_pin % 16));
100089ca:	4a0c      	ldr	r2, [pc, #48]	; (100089fc <gpio_pin_toggle_output_level+0x4c>)
100089cc:	8891      	ldrh	r1, [r2, #4]
100089ce:	230f      	movs	r3, #15
100089d0:	4018      	ands	r0, r3
100089d2:	3b0e      	subs	r3, #14
100089d4:	4083      	lsls	r3, r0
100089d6:	1c18      	adds	r0, r3, #0
100089d8:	4048      	eors	r0, r1
100089da:	b280      	uxth	r0, r0
100089dc:	8090      	strh	r0, [r2, #4]
100089de:	e009      	b.n	100089f4 <gpio_pin_toggle_output_level+0x44>
	} else {
		GPIO2->DATAOUT.reg ^= (1 << (gpio_pin % 16));
100089e0:	4a07      	ldr	r2, [pc, #28]	; (10008a00 <gpio_pin_toggle_output_level+0x50>)
100089e2:	8891      	ldrh	r1, [r2, #4]
100089e4:	230f      	movs	r3, #15
100089e6:	4018      	ands	r0, r3
100089e8:	3b0e      	subs	r3, #14
100089ea:	4083      	lsls	r3, r0
100089ec:	1c18      	adds	r0, r3, #0
100089ee:	4048      	eors	r0, r1
100089f0:	b280      	uxth	r0, r0
100089f2:	8090      	strh	r0, [r2, #4]
	}
}
100089f4:	4770      	bx	lr
100089f6:	46c0      	nop			; (mov r8, r8)
100089f8:	40010000 	.word	0x40010000
100089fc:	40011000 	.word	0x40011000
10008a00:	40013000 	.word	0x40013000

10008a04 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
10008a04:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
10008a06:	0a0c      	lsrs	r4, r1, #8

	pinmux_sel &= 0xFF;
10008a08:	23ff      	movs	r3, #255	; 0xff
10008a0a:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10008a0c:	2807      	cmp	r0, #7
10008a0e:	d835      	bhi.n	10008a7c <gpio_pinmux_cofiguration+0x78>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008a10:	4a51      	ldr	r2, [pc, #324]	; (10008b58 <gpio_pinmux_cofiguration+0x154>)
10008a12:	6c55      	ldr	r5, [r2, #68]	; 0x44
10008a14:	3bf8      	subs	r3, #248	; 0xf8
10008a16:	4003      	ands	r3, r0
10008a18:	009b      	lsls	r3, r3, #2
10008a1a:	2607      	movs	r6, #7
10008a1c:	409e      	lsls	r6, r3
10008a1e:	43b5      	bics	r5, r6
10008a20:	6455      	str	r5, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008a22:	6c55      	ldr	r5, [r2, #68]	; 0x44
10008a24:	1c0e      	adds	r6, r1, #0
10008a26:	409e      	lsls	r6, r3
10008a28:	1c33      	adds	r3, r6, #0
10008a2a:	432b      	orrs	r3, r5
10008a2c:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
10008a2e:	2901      	cmp	r1, #1
10008a30:	d000      	beq.n	10008a34 <gpio_pinmux_cofiguration+0x30>
10008a32:	e090      	b.n	10008b56 <gpio_pinmux_cofiguration+0x152>
			if (gpio_pin <= 3) {
10008a34:	2803      	cmp	r0, #3
10008a36:	d810      	bhi.n	10008a5a <gpio_pinmux_cofiguration+0x56>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008a38:	1c11      	adds	r1, r2, #0
10008a3a:	22d0      	movs	r2, #208	; 0xd0
10008a3c:	0052      	lsls	r2, r2, #1
10008a3e:	588d      	ldr	r5, [r1, r2]
10008a40:	2303      	movs	r3, #3
10008a42:	4018      	ands	r0, r3
10008a44:	00c0      	lsls	r0, r0, #3
10008a46:	333c      	adds	r3, #60	; 0x3c
10008a48:	4083      	lsls	r3, r0
10008a4a:	439d      	bics	r5, r3
10008a4c:	508d      	str	r5, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008a4e:	588b      	ldr	r3, [r1, r2]
10008a50:	4084      	lsls	r4, r0
10008a52:	1c20      	adds	r0, r4, #0
10008a54:	4318      	orrs	r0, r3
10008a56:	5088      	str	r0, [r1, r2]
10008a58:	e07d      	b.n	10008b56 <gpio_pinmux_cofiguration+0x152>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008a5a:	493f      	ldr	r1, [pc, #252]	; (10008b58 <gpio_pinmux_cofiguration+0x154>)
10008a5c:	22d2      	movs	r2, #210	; 0xd2
10008a5e:	0052      	lsls	r2, r2, #1
10008a60:	588d      	ldr	r5, [r1, r2]
10008a62:	2303      	movs	r3, #3
10008a64:	4018      	ands	r0, r3
10008a66:	00c0      	lsls	r0, r0, #3
10008a68:	333c      	adds	r3, #60	; 0x3c
10008a6a:	4083      	lsls	r3, r0
10008a6c:	439d      	bics	r5, r3
10008a6e:	508d      	str	r5, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008a70:	588b      	ldr	r3, [r1, r2]
10008a72:	4084      	lsls	r4, r0
10008a74:	1c20      	adds	r0, r4, #0
10008a76:	4318      	orrs	r0, r3
10008a78:	5088      	str	r0, [r1, r2]
10008a7a:	e06c      	b.n	10008b56 <gpio_pinmux_cofiguration+0x152>
			}
		}
	} else if (gpio_pin <= 15) {
10008a7c:	280f      	cmp	r0, #15
10008a7e:	d834      	bhi.n	10008aea <gpio_pinmux_cofiguration+0xe6>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008a80:	4a35      	ldr	r2, [pc, #212]	; (10008b58 <gpio_pinmux_cofiguration+0x154>)
10008a82:	6c95      	ldr	r5, [r2, #72]	; 0x48
10008a84:	2307      	movs	r3, #7
10008a86:	4003      	ands	r3, r0
10008a88:	009b      	lsls	r3, r3, #2
10008a8a:	2607      	movs	r6, #7
10008a8c:	409e      	lsls	r6, r3
10008a8e:	43b5      	bics	r5, r6
10008a90:	6495      	str	r5, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008a92:	6c95      	ldr	r5, [r2, #72]	; 0x48
10008a94:	1c0e      	adds	r6, r1, #0
10008a96:	409e      	lsls	r6, r3
10008a98:	1c33      	adds	r3, r6, #0
10008a9a:	432b      	orrs	r3, r5
10008a9c:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
10008a9e:	2901      	cmp	r1, #1
10008aa0:	d159      	bne.n	10008b56 <gpio_pinmux_cofiguration+0x152>
			if (gpio_pin <= 11) {
10008aa2:	280b      	cmp	r0, #11
10008aa4:	d810      	bhi.n	10008ac8 <gpio_pinmux_cofiguration+0xc4>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008aa6:	1c11      	adds	r1, r2, #0
10008aa8:	22d4      	movs	r2, #212	; 0xd4
10008aaa:	0052      	lsls	r2, r2, #1
10008aac:	588d      	ldr	r5, [r1, r2]
10008aae:	2303      	movs	r3, #3
10008ab0:	4018      	ands	r0, r3
10008ab2:	00c0      	lsls	r0, r0, #3
10008ab4:	333c      	adds	r3, #60	; 0x3c
10008ab6:	4083      	lsls	r3, r0
10008ab8:	439d      	bics	r5, r3
10008aba:	508d      	str	r5, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008abc:	588b      	ldr	r3, [r1, r2]
10008abe:	4084      	lsls	r4, r0
10008ac0:	1c20      	adds	r0, r4, #0
10008ac2:	4318      	orrs	r0, r3
10008ac4:	5088      	str	r0, [r1, r2]
10008ac6:	e046      	b.n	10008b56 <gpio_pinmux_cofiguration+0x152>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008ac8:	4923      	ldr	r1, [pc, #140]	; (10008b58 <gpio_pinmux_cofiguration+0x154>)
10008aca:	22d6      	movs	r2, #214	; 0xd6
10008acc:	0052      	lsls	r2, r2, #1
10008ace:	588d      	ldr	r5, [r1, r2]
10008ad0:	2303      	movs	r3, #3
10008ad2:	4018      	ands	r0, r3
10008ad4:	00c0      	lsls	r0, r0, #3
10008ad6:	333c      	adds	r3, #60	; 0x3c
10008ad8:	4083      	lsls	r3, r0
10008ada:	439d      	bics	r5, r3
10008adc:	508d      	str	r5, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008ade:	588b      	ldr	r3, [r1, r2]
10008ae0:	4084      	lsls	r4, r0
10008ae2:	1c20      	adds	r0, r4, #0
10008ae4:	4318      	orrs	r0, r3
10008ae6:	5088      	str	r0, [r1, r2]
10008ae8:	e035      	b.n	10008b56 <gpio_pinmux_cofiguration+0x152>
			}
		}
	} else if (gpio_pin <= 23) {
10008aea:	2817      	cmp	r0, #23
10008aec:	d833      	bhi.n	10008b56 <gpio_pinmux_cofiguration+0x152>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008aee:	4a1a      	ldr	r2, [pc, #104]	; (10008b58 <gpio_pinmux_cofiguration+0x154>)
10008af0:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
10008af2:	2307      	movs	r3, #7
10008af4:	4003      	ands	r3, r0
10008af6:	009b      	lsls	r3, r3, #2
10008af8:	2607      	movs	r6, #7
10008afa:	409e      	lsls	r6, r3
10008afc:	43b5      	bics	r5, r6
10008afe:	64d5      	str	r5, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008b00:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
10008b02:	1c0e      	adds	r6, r1, #0
10008b04:	409e      	lsls	r6, r3
10008b06:	1c33      	adds	r3, r6, #0
10008b08:	432b      	orrs	r3, r5
10008b0a:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
10008b0c:	2901      	cmp	r1, #1
10008b0e:	d122      	bne.n	10008b56 <gpio_pinmux_cofiguration+0x152>
			if (gpio_pin <= 19) {
10008b10:	2813      	cmp	r0, #19
10008b12:	d810      	bhi.n	10008b36 <gpio_pinmux_cofiguration+0x132>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008b14:	1c11      	adds	r1, r2, #0
10008b16:	22d8      	movs	r2, #216	; 0xd8
10008b18:	0052      	lsls	r2, r2, #1
10008b1a:	588d      	ldr	r5, [r1, r2]
10008b1c:	2303      	movs	r3, #3
10008b1e:	4018      	ands	r0, r3
10008b20:	00c0      	lsls	r0, r0, #3
10008b22:	333c      	adds	r3, #60	; 0x3c
10008b24:	4083      	lsls	r3, r0
10008b26:	439d      	bics	r5, r3
10008b28:	508d      	str	r5, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008b2a:	588b      	ldr	r3, [r1, r2]
10008b2c:	4084      	lsls	r4, r0
10008b2e:	1c20      	adds	r0, r4, #0
10008b30:	4318      	orrs	r0, r3
10008b32:	5088      	str	r0, [r1, r2]
10008b34:	e00f      	b.n	10008b56 <gpio_pinmux_cofiguration+0x152>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008b36:	4a08      	ldr	r2, [pc, #32]	; (10008b58 <gpio_pinmux_cofiguration+0x154>)
10008b38:	23da      	movs	r3, #218	; 0xda
10008b3a:	005b      	lsls	r3, r3, #1
10008b3c:	58d1      	ldr	r1, [r2, r3]
10008b3e:	2503      	movs	r5, #3
10008b40:	4028      	ands	r0, r5
10008b42:	00c0      	lsls	r0, r0, #3
10008b44:	353c      	adds	r5, #60	; 0x3c
10008b46:	4085      	lsls	r5, r0
10008b48:	43a9      	bics	r1, r5
10008b4a:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008b4c:	58d1      	ldr	r1, [r2, r3]
10008b4e:	4084      	lsls	r4, r0
10008b50:	1c20      	adds	r0, r4, #0
10008b52:	4308      	orrs	r0, r1
10008b54:	50d0      	str	r0, [r2, r3]
			}
		}
	}
}
10008b56:	bd70      	pop	{r4, r5, r6, pc}
10008b58:	4000b000 	.word	0x4000b000

10008b5c <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
10008b5c:	2801      	cmp	r0, #1
10008b5e:	d00d      	beq.n	10008b7c <system_clock_config+0x20>
10008b60:	2800      	cmp	r0, #0
10008b62:	d002      	beq.n	10008b6a <system_clock_config+0xe>
10008b64:	2802      	cmp	r0, #2
10008b66:	d01c      	beq.n	10008ba2 <system_clock_config+0x46>
10008b68:	e02e      	b.n	10008bc8 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008b6a:	4a18      	ldr	r2, [pc, #96]	; (10008bcc <system_clock_config+0x70>)
10008b6c:	6990      	ldr	r0, [r2, #24]
10008b6e:	230c      	movs	r3, #12
10008b70:	4303      	orrs	r3, r0
10008b72:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
10008b74:	4a16      	ldr	r2, [pc, #88]	; (10008bd0 <system_clock_config+0x74>)
10008b76:	4b17      	ldr	r3, [pc, #92]	; (10008bd4 <system_clock_config+0x78>)
10008b78:	601a      	str	r2, [r3, #0]
			break;
10008b7a:	e01a      	b.n	10008bb2 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008b7c:	4b13      	ldr	r3, [pc, #76]	; (10008bcc <system_clock_config+0x70>)
10008b7e:	6998      	ldr	r0, [r3, #24]
10008b80:	2208      	movs	r2, #8
10008b82:	4302      	orrs	r2, r0
10008b84:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008b86:	699a      	ldr	r2, [r3, #24]
10008b88:	2004      	movs	r0, #4
10008b8a:	4382      	bics	r2, r0
10008b8c:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
10008b8e:	4a12      	ldr	r2, [pc, #72]	; (10008bd8 <system_clock_config+0x7c>)
10008b90:	6853      	ldr	r3, [r2, #4]
10008b92:	2080      	movs	r0, #128	; 0x80
10008b94:	0300      	lsls	r0, r0, #12
10008b96:	4303      	orrs	r3, r0
10008b98:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
10008b9a:	4a10      	ldr	r2, [pc, #64]	; (10008bdc <system_clock_config+0x80>)
10008b9c:	4b0d      	ldr	r3, [pc, #52]	; (10008bd4 <system_clock_config+0x78>)
10008b9e:	601a      	str	r2, [r3, #0]
			break;
10008ba0:	e007      	b.n	10008bb2 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008ba2:	4a0a      	ldr	r2, [pc, #40]	; (10008bcc <system_clock_config+0x70>)
10008ba4:	6993      	ldr	r3, [r2, #24]
10008ba6:	200c      	movs	r0, #12
10008ba8:	4383      	bics	r3, r0
10008baa:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
10008bac:	4a08      	ldr	r2, [pc, #32]	; (10008bd0 <system_clock_config+0x74>)
10008bae:	4b09      	ldr	r3, [pc, #36]	; (10008bd4 <system_clock_config+0x78>)
10008bb0:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008bb2:	4b06      	ldr	r3, [pc, #24]	; (10008bcc <system_clock_config+0x70>)
10008bb4:	699a      	ldr	r2, [r3, #24]
10008bb6:	2003      	movs	r0, #3
10008bb8:	4382      	bics	r2, r0
10008bba:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008bbc:	699a      	ldr	r2, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);
10008bbe:	4001      	ands	r1, r0
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008bc0:	4311      	orrs	r1, r2
10008bc2:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
10008bc4:	2000      	movs	r0, #0
10008bc6:	e000      	b.n	10008bca <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
10008bc8:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
10008bca:	4770      	bx	lr
10008bcc:	4000b000 	.word	0x4000b000
10008bd0:	018cba80 	.word	0x018cba80
10008bd4:	1000aeec 	.word	0x1000aeec
10008bd8:	4000f000 	.word	0x4000f000
10008bdc:	001e8480 	.word	0x001e8480

10008be0 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
10008be0:	4b01      	ldr	r3, [pc, #4]	; (10008be8 <system_clock_get_value+0x8>)
10008be2:	6818      	ldr	r0, [r3, #0]
}
10008be4:	4770      	bx	lr
10008be6:	46c0      	nop			; (mov r8, r8)
10008be8:	1000aeec 	.word	0x1000aeec

10008bec <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
10008bec:	b500      	push	{lr}
	switch (peripheral) {
10008bee:	2835      	cmp	r0, #53	; 0x35
10008bf0:	d900      	bls.n	10008bf4 <system_clock_peripheral_enable+0x8>
10008bf2:	e1a2      	b.n	10008f3a <system_clock_peripheral_enable+0x34e>
10008bf4:	0080      	lsls	r0, r0, #2
10008bf6:	4bd2      	ldr	r3, [pc, #840]	; (10008f40 <system_clock_peripheral_enable+0x354>)
10008bf8:	581b      	ldr	r3, [r3, r0]
10008bfa:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008bfc:	4ad1      	ldr	r2, [pc, #836]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008bfe:	68d1      	ldr	r1, [r2, #12]
10008c00:	2302      	movs	r3, #2
10008c02:	430b      	orrs	r3, r1
10008c04:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c06:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
10008c08:	e198      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008c0a:	4ace      	ldr	r2, [pc, #824]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008c0c:	68d1      	ldr	r1, [r2, #12]
10008c0e:	2304      	movs	r3, #4
10008c10:	430b      	orrs	r3, r1
10008c12:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
10008c16:	e191      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008c18:	4aca      	ldr	r2, [pc, #808]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008c1a:	68d1      	ldr	r1, [r2, #12]
10008c1c:	2308      	movs	r3, #8
10008c1e:	430b      	orrs	r3, r1
10008c20:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c22:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
10008c24:	e18a      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008c26:	4ac7      	ldr	r2, [pc, #796]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008c28:	68d1      	ldr	r1, [r2, #12]
10008c2a:	2310      	movs	r3, #16
10008c2c:	430b      	orrs	r3, r1
10008c2e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
10008c32:	e183      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008c34:	4ac3      	ldr	r2, [pc, #780]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008c36:	68d1      	ldr	r1, [r2, #12]
10008c38:	2320      	movs	r3, #32
10008c3a:	430b      	orrs	r3, r1
10008c3c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c3e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
10008c40:	e17c      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008c42:	4ac0      	ldr	r2, [pc, #768]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008c44:	68d1      	ldr	r1, [r2, #12]
10008c46:	2380      	movs	r3, #128	; 0x80
10008c48:	430b      	orrs	r3, r1
10008c4a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
10008c4e:	e175      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008c50:	4abc      	ldr	r2, [pc, #752]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008c52:	68d3      	ldr	r3, [r2, #12]
10008c54:	2180      	movs	r1, #128	; 0x80
10008c56:	0049      	lsls	r1, r1, #1
10008c58:	430b      	orrs	r3, r1
10008c5a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
10008c5e:	e16d      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008c60:	4ab8      	ldr	r2, [pc, #736]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008c62:	68d3      	ldr	r3, [r2, #12]
10008c64:	2180      	movs	r1, #128	; 0x80
10008c66:	0109      	lsls	r1, r1, #4
10008c68:	430b      	orrs	r3, r1
10008c6a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
10008c6e:	e165      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008c70:	4ab4      	ldr	r2, [pc, #720]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008c72:	68d3      	ldr	r3, [r2, #12]
10008c74:	2180      	movs	r1, #128	; 0x80
10008c76:	0149      	lsls	r1, r1, #5
10008c78:	430b      	orrs	r3, r1
10008c7a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
10008c7e:	e15d      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008c80:	4ab0      	ldr	r2, [pc, #704]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008c82:	68d3      	ldr	r3, [r2, #12]
10008c84:	2180      	movs	r1, #128	; 0x80
10008c86:	0189      	lsls	r1, r1, #6
10008c88:	430b      	orrs	r3, r1
10008c8a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
10008c8e:	e155      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008c90:	4aac      	ldr	r2, [pc, #688]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008c92:	68d3      	ldr	r3, [r2, #12]
10008c94:	2180      	movs	r1, #128	; 0x80
10008c96:	01c9      	lsls	r1, r1, #7
10008c98:	430b      	orrs	r3, r1
10008c9a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
10008c9e:	e14d      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ca0:	4aa8      	ldr	r2, [pc, #672]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008ca2:	68d3      	ldr	r3, [r2, #12]
10008ca4:	2180      	movs	r1, #128	; 0x80
10008ca6:	0209      	lsls	r1, r1, #8
10008ca8:	430b      	orrs	r3, r1
10008caa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
10008cae:	e145      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008cb0:	4aa4      	ldr	r2, [pc, #656]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008cb2:	68d3      	ldr	r3, [r2, #12]
10008cb4:	2180      	movs	r1, #128	; 0x80
10008cb6:	0249      	lsls	r1, r1, #9
10008cb8:	430b      	orrs	r3, r1
10008cba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cbc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
10008cbe:	e13d      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008cc0:	4aa0      	ldr	r2, [pc, #640]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008cc2:	68d3      	ldr	r3, [r2, #12]
10008cc4:	2180      	movs	r1, #128	; 0x80
10008cc6:	0289      	lsls	r1, r1, #10
10008cc8:	430b      	orrs	r3, r1
10008cca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ccc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
10008cce:	e135      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008cd0:	4a9c      	ldr	r2, [pc, #624]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008cd2:	68d3      	ldr	r3, [r2, #12]
10008cd4:	2180      	movs	r1, #128	; 0x80
10008cd6:	02c9      	lsls	r1, r1, #11
10008cd8:	430b      	orrs	r3, r1
10008cda:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cdc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
10008cde:	e12d      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ce0:	4a98      	ldr	r2, [pc, #608]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008ce2:	68d3      	ldr	r3, [r2, #12]
10008ce4:	2180      	movs	r1, #128	; 0x80
10008ce6:	0309      	lsls	r1, r1, #12
10008ce8:	430b      	orrs	r3, r1
10008cea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
10008cee:	e125      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008cf0:	4a94      	ldr	r2, [pc, #592]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008cf2:	68d3      	ldr	r3, [r2, #12]
10008cf4:	2180      	movs	r1, #128	; 0x80
10008cf6:	0349      	lsls	r1, r1, #13
10008cf8:	430b      	orrs	r3, r1
10008cfa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cfc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10008cfe:	e11d      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d00:	4a90      	ldr	r2, [pc, #576]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008d02:	68d3      	ldr	r3, [r2, #12]
10008d04:	2180      	movs	r1, #128	; 0x80
10008d06:	0389      	lsls	r1, r1, #14
10008d08:	430b      	orrs	r3, r1
10008d0a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d0c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10008d0e:	e115      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d10:	4a8c      	ldr	r2, [pc, #560]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008d12:	68d3      	ldr	r3, [r2, #12]
10008d14:	2180      	movs	r1, #128	; 0x80
10008d16:	03c9      	lsls	r1, r1, #15
10008d18:	430b      	orrs	r3, r1
10008d1a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10008d1e:	e10d      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d20:	4a88      	ldr	r2, [pc, #544]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008d22:	68d3      	ldr	r3, [r2, #12]
10008d24:	2180      	movs	r1, #128	; 0x80
10008d26:	0409      	lsls	r1, r1, #16
10008d28:	430b      	orrs	r3, r1
10008d2a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
10008d2e:	e105      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d30:	4a84      	ldr	r2, [pc, #528]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008d32:	68d3      	ldr	r3, [r2, #12]
10008d34:	2180      	movs	r1, #128	; 0x80
10008d36:	0449      	lsls	r1, r1, #17
10008d38:	430b      	orrs	r3, r1
10008d3a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10008d3e:	e0fd      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d40:	4a80      	ldr	r2, [pc, #512]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008d42:	68d3      	ldr	r3, [r2, #12]
10008d44:	2180      	movs	r1, #128	; 0x80
10008d46:	0489      	lsls	r1, r1, #18
10008d48:	430b      	orrs	r3, r1
10008d4a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
10008d4e:	e0f5      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d50:	4a7c      	ldr	r2, [pc, #496]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008d52:	68d3      	ldr	r3, [r2, #12]
10008d54:	2180      	movs	r1, #128	; 0x80
10008d56:	04c9      	lsls	r1, r1, #19
10008d58:	430b      	orrs	r3, r1
10008d5a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
10008d5e:	e0ed      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d60:	4a78      	ldr	r2, [pc, #480]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008d62:	68d3      	ldr	r3, [r2, #12]
10008d64:	2180      	movs	r1, #128	; 0x80
10008d66:	0509      	lsls	r1, r1, #20
10008d68:	430b      	orrs	r3, r1
10008d6a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
10008d6e:	e0e5      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d70:	4a74      	ldr	r2, [pc, #464]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008d72:	68d3      	ldr	r3, [r2, #12]
10008d74:	2180      	movs	r1, #128	; 0x80
10008d76:	0549      	lsls	r1, r1, #21
10008d78:	430b      	orrs	r3, r1
10008d7a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
10008d7e:	e0dd      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d80:	4a70      	ldr	r2, [pc, #448]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008d82:	68d3      	ldr	r3, [r2, #12]
10008d84:	2180      	movs	r1, #128	; 0x80
10008d86:	0589      	lsls	r1, r1, #22
10008d88:	430b      	orrs	r3, r1
10008d8a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
10008d8e:	e0d5      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008d90:	4a6c      	ldr	r2, [pc, #432]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008d92:	68d3      	ldr	r3, [r2, #12]
10008d94:	2180      	movs	r1, #128	; 0x80
10008d96:	05c9      	lsls	r1, r1, #23
10008d98:	430b      	orrs	r3, r1
10008d9a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10008d9e:	e0cd      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008da0:	4a68      	ldr	r2, [pc, #416]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008da2:	6911      	ldr	r1, [r2, #16]
10008da4:	2301      	movs	r3, #1
10008da6:	430b      	orrs	r3, r1
10008da8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008daa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
10008dac:	e0c6      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008dae:	4a65      	ldr	r2, [pc, #404]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008db0:	6911      	ldr	r1, [r2, #16]
10008db2:	2302      	movs	r3, #2
10008db4:	430b      	orrs	r3, r1
10008db6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008db8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
10008dba:	e0bf      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008dbc:	4a61      	ldr	r2, [pc, #388]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008dbe:	6911      	ldr	r1, [r2, #16]
10008dc0:	2304      	movs	r3, #4
10008dc2:	430b      	orrs	r3, r1
10008dc4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dc6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
10008dc8:	e0b8      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008dca:	4a5e      	ldr	r2, [pc, #376]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008dcc:	6911      	ldr	r1, [r2, #16]
10008dce:	2308      	movs	r3, #8
10008dd0:	430b      	orrs	r3, r1
10008dd2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dd4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
10008dd6:	e0b1      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008dd8:	4a5a      	ldr	r2, [pc, #360]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008dda:	6911      	ldr	r1, [r2, #16]
10008ddc:	2310      	movs	r3, #16
10008dde:	430b      	orrs	r3, r1
10008de0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008de2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
10008de4:	e0aa      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008de6:	4a57      	ldr	r2, [pc, #348]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008de8:	6911      	ldr	r1, [r2, #16]
10008dea:	2320      	movs	r3, #32
10008dec:	430b      	orrs	r3, r1
10008dee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008df0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
10008df2:	e0a3      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008df4:	4a53      	ldr	r2, [pc, #332]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008df6:	6911      	ldr	r1, [r2, #16]
10008df8:	2340      	movs	r3, #64	; 0x40
10008dfa:	430b      	orrs	r3, r1
10008dfc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dfe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
10008e00:	e09c      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008e02:	4a50      	ldr	r2, [pc, #320]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008e04:	6911      	ldr	r1, [r2, #16]
10008e06:	2380      	movs	r3, #128	; 0x80
10008e08:	430b      	orrs	r3, r1
10008e0a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e0c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
10008e0e:	e095      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008e10:	4a4c      	ldr	r2, [pc, #304]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008e12:	6913      	ldr	r3, [r2, #16]
10008e14:	2180      	movs	r1, #128	; 0x80
10008e16:	0049      	lsls	r1, r1, #1
10008e18:	430b      	orrs	r3, r1
10008e1a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
10008e1e:	e08d      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008e20:	4a48      	ldr	r2, [pc, #288]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008e22:	6913      	ldr	r3, [r2, #16]
10008e24:	2180      	movs	r1, #128	; 0x80
10008e26:	0089      	lsls	r1, r1, #2
10008e28:	430b      	orrs	r3, r1
10008e2a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
10008e2e:	e085      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008e30:	4a44      	ldr	r2, [pc, #272]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008e32:	6913      	ldr	r3, [r2, #16]
10008e34:	2180      	movs	r1, #128	; 0x80
10008e36:	00c9      	lsls	r1, r1, #3
10008e38:	430b      	orrs	r3, r1
10008e3a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
10008e3e:	e07d      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008e40:	4a40      	ldr	r2, [pc, #256]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008e42:	6913      	ldr	r3, [r2, #16]
10008e44:	2180      	movs	r1, #128	; 0x80
10008e46:	0109      	lsls	r1, r1, #4
10008e48:	430b      	orrs	r3, r1
10008e4a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10008e4e:	e075      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008e50:	4a3c      	ldr	r2, [pc, #240]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008e52:	6913      	ldr	r3, [r2, #16]
10008e54:	2180      	movs	r1, #128	; 0x80
10008e56:	0149      	lsls	r1, r1, #5
10008e58:	430b      	orrs	r3, r1
10008e5a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10008e5e:	e06d      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008e60:	4a38      	ldr	r2, [pc, #224]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008e62:	6913      	ldr	r3, [r2, #16]
10008e64:	2180      	movs	r1, #128	; 0x80
10008e66:	0189      	lsls	r1, r1, #6
10008e68:	430b      	orrs	r3, r1
10008e6a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10008e6e:	e065      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008e70:	4a34      	ldr	r2, [pc, #208]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008e72:	6913      	ldr	r3, [r2, #16]
10008e74:	2180      	movs	r1, #128	; 0x80
10008e76:	01c9      	lsls	r1, r1, #7
10008e78:	430b      	orrs	r3, r1
10008e7a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
10008e7e:	e05d      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008e80:	4a30      	ldr	r2, [pc, #192]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008e82:	6913      	ldr	r3, [r2, #16]
10008e84:	2180      	movs	r1, #128	; 0x80
10008e86:	0209      	lsls	r1, r1, #8
10008e88:	430b      	orrs	r3, r1
10008e8a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10008e8e:	e055      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008e90:	4a2c      	ldr	r2, [pc, #176]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008e92:	6913      	ldr	r3, [r2, #16]
10008e94:	2180      	movs	r1, #128	; 0x80
10008e96:	0249      	lsls	r1, r1, #9
10008e98:	430b      	orrs	r3, r1
10008e9a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
10008e9e:	e04d      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ea0:	4a28      	ldr	r2, [pc, #160]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008ea2:	6913      	ldr	r3, [r2, #16]
10008ea4:	2180      	movs	r1, #128	; 0x80
10008ea6:	0289      	lsls	r1, r1, #10
10008ea8:	430b      	orrs	r3, r1
10008eaa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008eac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
10008eae:	e045      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008eb0:	4a24      	ldr	r2, [pc, #144]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008eb2:	6913      	ldr	r3, [r2, #16]
10008eb4:	2180      	movs	r1, #128	; 0x80
10008eb6:	02c9      	lsls	r1, r1, #11
10008eb8:	430b      	orrs	r3, r1
10008eba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ebc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
10008ebe:	e03d      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ec0:	4a20      	ldr	r2, [pc, #128]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008ec2:	6913      	ldr	r3, [r2, #16]
10008ec4:	2180      	movs	r1, #128	; 0x80
10008ec6:	0309      	lsls	r1, r1, #12
10008ec8:	430b      	orrs	r3, r1
10008eca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ecc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
10008ece:	e035      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ed0:	4a1c      	ldr	r2, [pc, #112]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008ed2:	6913      	ldr	r3, [r2, #16]
10008ed4:	2180      	movs	r1, #128	; 0x80
10008ed6:	0349      	lsls	r1, r1, #13
10008ed8:	430b      	orrs	r3, r1
10008eda:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008edc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
10008ede:	e02d      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ee0:	4a18      	ldr	r2, [pc, #96]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008ee2:	6913      	ldr	r3, [r2, #16]
10008ee4:	2180      	movs	r1, #128	; 0x80
10008ee6:	0389      	lsls	r1, r1, #14
10008ee8:	430b      	orrs	r3, r1
10008eea:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008eec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10008eee:	e025      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ef0:	4a14      	ldr	r2, [pc, #80]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008ef2:	6913      	ldr	r3, [r2, #16]
10008ef4:	2180      	movs	r1, #128	; 0x80
10008ef6:	03c9      	lsls	r1, r1, #15
10008ef8:	430b      	orrs	r3, r1
10008efa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008efc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10008efe:	e01d      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008f00:	4a10      	ldr	r2, [pc, #64]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008f02:	6913      	ldr	r3, [r2, #16]
10008f04:	2180      	movs	r1, #128	; 0x80
10008f06:	0409      	lsls	r1, r1, #16
10008f08:	430b      	orrs	r3, r1
10008f0a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f0c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10008f0e:	e015      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008f10:	4a0c      	ldr	r2, [pc, #48]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008f12:	7d11      	ldrb	r1, [r2, #20]
10008f14:	2301      	movs	r3, #1
10008f16:	430b      	orrs	r3, r1
10008f18:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f1a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
10008f1c:	e00e      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008f1e:	4a09      	ldr	r2, [pc, #36]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008f20:	7d11      	ldrb	r1, [r2, #20]
10008f22:	2302      	movs	r3, #2
10008f24:	430b      	orrs	r3, r1
10008f26:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f28:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
10008f2a:	e007      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008f2c:	4a05      	ldr	r2, [pc, #20]	; (10008f44 <system_clock_peripheral_enable+0x358>)
10008f2e:	7d11      	ldrb	r1, [r2, #20]
10008f30:	2304      	movs	r3, #4
10008f32:	430b      	orrs	r3, r1
10008f34:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f36:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
10008f38:	e000      	b.n	10008f3c <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
10008f3a:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10008f3c:	bd00      	pop	{pc}
10008f3e:	46c0      	nop			; (mov r8, r8)
10008f40:	1000ab54 	.word	0x1000ab54
10008f44:	4000b000 	.word	0x4000b000

10008f48 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
10008f48:	b500      	push	{lr}
	switch (peripheral) {
10008f4a:	2843      	cmp	r0, #67	; 0x43
10008f4c:	d900      	bls.n	10008f50 <system_peripheral_reset+0x8>
10008f4e:	e223      	b.n	10009398 <system_peripheral_reset+0x450>
10008f50:	0080      	lsls	r0, r0, #2
10008f52:	4be0      	ldr	r3, [pc, #896]	; (100092d4 <system_peripheral_reset+0x38c>)
10008f54:	581b      	ldr	r3, [r3, r0]
10008f56:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f58:	4bdf      	ldr	r3, [pc, #892]	; (100092d8 <system_peripheral_reset+0x390>)
10008f5a:	6859      	ldr	r1, [r3, #4]
10008f5c:	2202      	movs	r2, #2
10008f5e:	4391      	bics	r1, r2
10008f60:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f62:	6859      	ldr	r1, [r3, #4]
10008f64:	430a      	orrs	r2, r1
10008f66:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f68:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
10008f6a:	e216      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f6c:	4bda      	ldr	r3, [pc, #872]	; (100092d8 <system_peripheral_reset+0x390>)
10008f6e:	6859      	ldr	r1, [r3, #4]
10008f70:	2204      	movs	r2, #4
10008f72:	4391      	bics	r1, r2
10008f74:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f76:	6859      	ldr	r1, [r3, #4]
10008f78:	430a      	orrs	r2, r1
10008f7a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f7c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
		break;
10008f7e:	e20c      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f80:	4bd5      	ldr	r3, [pc, #852]	; (100092d8 <system_peripheral_reset+0x390>)
10008f82:	6859      	ldr	r1, [r3, #4]
10008f84:	2208      	movs	r2, #8
10008f86:	4391      	bics	r1, r2
10008f88:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f8a:	6859      	ldr	r1, [r3, #4]
10008f8c:	430a      	orrs	r2, r1
10008f8e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f90:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
		break;
10008f92:	e202      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f94:	4bd0      	ldr	r3, [pc, #832]	; (100092d8 <system_peripheral_reset+0x390>)
10008f96:	6859      	ldr	r1, [r3, #4]
10008f98:	2210      	movs	r2, #16
10008f9a:	4391      	bics	r1, r2
10008f9c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f9e:	6859      	ldr	r1, [r3, #4]
10008fa0:	430a      	orrs	r2, r1
10008fa2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fa4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
		break;
10008fa6:	e1f8      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008fa8:	4bcb      	ldr	r3, [pc, #812]	; (100092d8 <system_peripheral_reset+0x390>)
10008faa:	6859      	ldr	r1, [r3, #4]
10008fac:	2220      	movs	r2, #32
10008fae:	4391      	bics	r1, r2
10008fb0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008fb2:	6859      	ldr	r1, [r3, #4]
10008fb4:	430a      	orrs	r2, r1
10008fb6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fb8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
		break;
10008fba:	e1ee      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008fbc:	4bc6      	ldr	r3, [pc, #792]	; (100092d8 <system_peripheral_reset+0x390>)
10008fbe:	6859      	ldr	r1, [r3, #4]
10008fc0:	2240      	movs	r2, #64	; 0x40
10008fc2:	4391      	bics	r1, r2
10008fc4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008fc6:	6859      	ldr	r1, [r3, #4]
10008fc8:	430a      	orrs	r2, r1
10008fca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fcc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
		break;
10008fce:	e1e4      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008fd0:	4bc1      	ldr	r3, [pc, #772]	; (100092d8 <system_peripheral_reset+0x390>)
10008fd2:	6859      	ldr	r1, [r3, #4]
10008fd4:	2280      	movs	r2, #128	; 0x80
10008fd6:	4391      	bics	r1, r2
10008fd8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008fda:	6859      	ldr	r1, [r3, #4]
10008fdc:	430a      	orrs	r2, r1
10008fde:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fe0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
		break;
10008fe2:	e1da      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008fe4:	4bbc      	ldr	r3, [pc, #752]	; (100092d8 <system_peripheral_reset+0x390>)
10008fe6:	6859      	ldr	r1, [r3, #4]
10008fe8:	4abc      	ldr	r2, [pc, #752]	; (100092dc <system_peripheral_reset+0x394>)
10008fea:	400a      	ands	r2, r1
10008fec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008fee:	685a      	ldr	r2, [r3, #4]
10008ff0:	2180      	movs	r1, #128	; 0x80
10008ff2:	0049      	lsls	r1, r1, #1
10008ff4:	430a      	orrs	r2, r1
10008ff6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ff8:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
		break;
10008ffa:	e1ce      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ffc:	4bb6      	ldr	r3, [pc, #728]	; (100092d8 <system_peripheral_reset+0x390>)
10008ffe:	6859      	ldr	r1, [r3, #4]
10009000:	4ab7      	ldr	r2, [pc, #732]	; (100092e0 <system_peripheral_reset+0x398>)
10009002:	400a      	ands	r2, r1
10009004:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009006:	685a      	ldr	r2, [r3, #4]
10009008:	2180      	movs	r1, #128	; 0x80
1000900a:	0089      	lsls	r1, r1, #2
1000900c:	430a      	orrs	r2, r1
1000900e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009010:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
		break;
10009012:	e1c2      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009014:	4bb0      	ldr	r3, [pc, #704]	; (100092d8 <system_peripheral_reset+0x390>)
10009016:	6859      	ldr	r1, [r3, #4]
10009018:	4ab2      	ldr	r2, [pc, #712]	; (100092e4 <system_peripheral_reset+0x39c>)
1000901a:	400a      	ands	r2, r1
1000901c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000901e:	685a      	ldr	r2, [r3, #4]
10009020:	2180      	movs	r1, #128	; 0x80
10009022:	00c9      	lsls	r1, r1, #3
10009024:	430a      	orrs	r2, r1
10009026:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009028:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000902a:	e1b6      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000902c:	4baa      	ldr	r3, [pc, #680]	; (100092d8 <system_peripheral_reset+0x390>)
1000902e:	6859      	ldr	r1, [r3, #4]
10009030:	4aad      	ldr	r2, [pc, #692]	; (100092e8 <system_peripheral_reset+0x3a0>)
10009032:	400a      	ands	r2, r1
10009034:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009036:	685a      	ldr	r2, [r3, #4]
10009038:	2180      	movs	r1, #128	; 0x80
1000903a:	0109      	lsls	r1, r1, #4
1000903c:	430a      	orrs	r2, r1
1000903e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009040:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
		break;
10009042:	e1aa      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009044:	4ba4      	ldr	r3, [pc, #656]	; (100092d8 <system_peripheral_reset+0x390>)
10009046:	6859      	ldr	r1, [r3, #4]
10009048:	4aa8      	ldr	r2, [pc, #672]	; (100092ec <system_peripheral_reset+0x3a4>)
1000904a:	400a      	ands	r2, r1
1000904c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000904e:	685a      	ldr	r2, [r3, #4]
10009050:	2180      	movs	r1, #128	; 0x80
10009052:	0149      	lsls	r1, r1, #5
10009054:	430a      	orrs	r2, r1
10009056:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009058:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
		break;
1000905a:	e19e      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000905c:	4b9e      	ldr	r3, [pc, #632]	; (100092d8 <system_peripheral_reset+0x390>)
1000905e:	6859      	ldr	r1, [r3, #4]
10009060:	4aa3      	ldr	r2, [pc, #652]	; (100092f0 <system_peripheral_reset+0x3a8>)
10009062:	400a      	ands	r2, r1
10009064:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009066:	685a      	ldr	r2, [r3, #4]
10009068:	2180      	movs	r1, #128	; 0x80
1000906a:	0189      	lsls	r1, r1, #6
1000906c:	430a      	orrs	r2, r1
1000906e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009070:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
		break;
10009072:	e192      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009074:	4b98      	ldr	r3, [pc, #608]	; (100092d8 <system_peripheral_reset+0x390>)
10009076:	6859      	ldr	r1, [r3, #4]
10009078:	4a9e      	ldr	r2, [pc, #632]	; (100092f4 <system_peripheral_reset+0x3ac>)
1000907a:	400a      	ands	r2, r1
1000907c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000907e:	685a      	ldr	r2, [r3, #4]
10009080:	2180      	movs	r1, #128	; 0x80
10009082:	01c9      	lsls	r1, r1, #7
10009084:	430a      	orrs	r2, r1
10009086:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009088:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
		break;
1000908a:	e186      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000908c:	4b92      	ldr	r3, [pc, #584]	; (100092d8 <system_peripheral_reset+0x390>)
1000908e:	6859      	ldr	r1, [r3, #4]
10009090:	4a99      	ldr	r2, [pc, #612]	; (100092f8 <system_peripheral_reset+0x3b0>)
10009092:	400a      	ands	r2, r1
10009094:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009096:	685a      	ldr	r2, [r3, #4]
10009098:	2180      	movs	r1, #128	; 0x80
1000909a:	0209      	lsls	r1, r1, #8
1000909c:	430a      	orrs	r2, r1
1000909e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090a0:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
		break;
100090a2:	e17a      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100090a4:	4b8c      	ldr	r3, [pc, #560]	; (100092d8 <system_peripheral_reset+0x390>)
100090a6:	6859      	ldr	r1, [r3, #4]
100090a8:	4a94      	ldr	r2, [pc, #592]	; (100092fc <system_peripheral_reset+0x3b4>)
100090aa:	400a      	ands	r2, r1
100090ac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100090ae:	685a      	ldr	r2, [r3, #4]
100090b0:	2180      	movs	r1, #128	; 0x80
100090b2:	0249      	lsls	r1, r1, #9
100090b4:	430a      	orrs	r2, r1
100090b6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090b8:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
		break;
100090ba:	e16e      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100090bc:	4b86      	ldr	r3, [pc, #536]	; (100092d8 <system_peripheral_reset+0x390>)
100090be:	6859      	ldr	r1, [r3, #4]
100090c0:	4a8f      	ldr	r2, [pc, #572]	; (10009300 <system_peripheral_reset+0x3b8>)
100090c2:	400a      	ands	r2, r1
100090c4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100090c6:	685a      	ldr	r2, [r3, #4]
100090c8:	2180      	movs	r1, #128	; 0x80
100090ca:	0289      	lsls	r1, r1, #10
100090cc:	430a      	orrs	r2, r1
100090ce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090d0:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
		break;
100090d2:	e162      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100090d4:	4b80      	ldr	r3, [pc, #512]	; (100092d8 <system_peripheral_reset+0x390>)
100090d6:	6859      	ldr	r1, [r3, #4]
100090d8:	4a8a      	ldr	r2, [pc, #552]	; (10009304 <system_peripheral_reset+0x3bc>)
100090da:	400a      	ands	r2, r1
100090dc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100090de:	685a      	ldr	r2, [r3, #4]
100090e0:	2180      	movs	r1, #128	; 0x80
100090e2:	02c9      	lsls	r1, r1, #11
100090e4:	430a      	orrs	r2, r1
100090e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090e8:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
100090ea:	e156      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100090ec:	4b7a      	ldr	r3, [pc, #488]	; (100092d8 <system_peripheral_reset+0x390>)
100090ee:	6859      	ldr	r1, [r3, #4]
100090f0:	4a85      	ldr	r2, [pc, #532]	; (10009308 <system_peripheral_reset+0x3c0>)
100090f2:	400a      	ands	r2, r1
100090f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100090f6:	685a      	ldr	r2, [r3, #4]
100090f8:	2180      	movs	r1, #128	; 0x80
100090fa:	0309      	lsls	r1, r1, #12
100090fc:	430a      	orrs	r2, r1
100090fe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009100:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
10009102:	e14a      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009104:	4b74      	ldr	r3, [pc, #464]	; (100092d8 <system_peripheral_reset+0x390>)
10009106:	6859      	ldr	r1, [r3, #4]
10009108:	4a80      	ldr	r2, [pc, #512]	; (1000930c <system_peripheral_reset+0x3c4>)
1000910a:	400a      	ands	r2, r1
1000910c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000910e:	685a      	ldr	r2, [r3, #4]
10009110:	2180      	movs	r1, #128	; 0x80
10009112:	0349      	lsls	r1, r1, #13
10009114:	430a      	orrs	r2, r1
10009116:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009118:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000911a:	e13e      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000911c:	4b6e      	ldr	r3, [pc, #440]	; (100092d8 <system_peripheral_reset+0x390>)
1000911e:	6859      	ldr	r1, [r3, #4]
10009120:	4a7b      	ldr	r2, [pc, #492]	; (10009310 <system_peripheral_reset+0x3c8>)
10009122:	400a      	ands	r2, r1
10009124:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009126:	685a      	ldr	r2, [r3, #4]
10009128:	2180      	movs	r1, #128	; 0x80
1000912a:	0389      	lsls	r1, r1, #14
1000912c:	430a      	orrs	r2, r1
1000912e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009130:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
10009132:	e132      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009134:	4b68      	ldr	r3, [pc, #416]	; (100092d8 <system_peripheral_reset+0x390>)
10009136:	6859      	ldr	r1, [r3, #4]
10009138:	4a76      	ldr	r2, [pc, #472]	; (10009314 <system_peripheral_reset+0x3cc>)
1000913a:	400a      	ands	r2, r1
1000913c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000913e:	685a      	ldr	r2, [r3, #4]
10009140:	2180      	movs	r1, #128	; 0x80
10009142:	03c9      	lsls	r1, r1, #15
10009144:	430a      	orrs	r2, r1
10009146:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009148:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000914a:	e126      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000914c:	4b62      	ldr	r3, [pc, #392]	; (100092d8 <system_peripheral_reset+0x390>)
1000914e:	6859      	ldr	r1, [r3, #4]
10009150:	4a71      	ldr	r2, [pc, #452]	; (10009318 <system_peripheral_reset+0x3d0>)
10009152:	400a      	ands	r2, r1
10009154:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009156:	685a      	ldr	r2, [r3, #4]
10009158:	2180      	movs	r1, #128	; 0x80
1000915a:	0409      	lsls	r1, r1, #16
1000915c:	430a      	orrs	r2, r1
1000915e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009160:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
10009162:	e11a      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009164:	4b5c      	ldr	r3, [pc, #368]	; (100092d8 <system_peripheral_reset+0x390>)
10009166:	6859      	ldr	r1, [r3, #4]
10009168:	4a6c      	ldr	r2, [pc, #432]	; (1000931c <system_peripheral_reset+0x3d4>)
1000916a:	400a      	ands	r2, r1
1000916c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000916e:	685a      	ldr	r2, [r3, #4]
10009170:	2180      	movs	r1, #128	; 0x80
10009172:	0449      	lsls	r1, r1, #17
10009174:	430a      	orrs	r2, r1
10009176:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009178:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000917a:	e10e      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000917c:	4b56      	ldr	r3, [pc, #344]	; (100092d8 <system_peripheral_reset+0x390>)
1000917e:	6859      	ldr	r1, [r3, #4]
10009180:	4a67      	ldr	r2, [pc, #412]	; (10009320 <system_peripheral_reset+0x3d8>)
10009182:	400a      	ands	r2, r1
10009184:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009186:	685a      	ldr	r2, [r3, #4]
10009188:	2180      	movs	r1, #128	; 0x80
1000918a:	0489      	lsls	r1, r1, #18
1000918c:	430a      	orrs	r2, r1
1000918e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009190:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
		break;
10009192:	e102      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009194:	4b50      	ldr	r3, [pc, #320]	; (100092d8 <system_peripheral_reset+0x390>)
10009196:	6859      	ldr	r1, [r3, #4]
10009198:	4a62      	ldr	r2, [pc, #392]	; (10009324 <system_peripheral_reset+0x3dc>)
1000919a:	400a      	ands	r2, r1
1000919c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000919e:	685a      	ldr	r2, [r3, #4]
100091a0:	2180      	movs	r1, #128	; 0x80
100091a2:	04c9      	lsls	r1, r1, #19
100091a4:	430a      	orrs	r2, r1
100091a6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091a8:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
		break;
100091aa:	e0f6      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091ac:	4b4a      	ldr	r3, [pc, #296]	; (100092d8 <system_peripheral_reset+0x390>)
100091ae:	6859      	ldr	r1, [r3, #4]
100091b0:	4a5d      	ldr	r2, [pc, #372]	; (10009328 <system_peripheral_reset+0x3e0>)
100091b2:	400a      	ands	r2, r1
100091b4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091b6:	685a      	ldr	r2, [r3, #4]
100091b8:	2180      	movs	r1, #128	; 0x80
100091ba:	0509      	lsls	r1, r1, #20
100091bc:	430a      	orrs	r2, r1
100091be:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091c0:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
		break;
100091c2:	e0ea      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091c4:	4b44      	ldr	r3, [pc, #272]	; (100092d8 <system_peripheral_reset+0x390>)
100091c6:	6859      	ldr	r1, [r3, #4]
100091c8:	4a58      	ldr	r2, [pc, #352]	; (1000932c <system_peripheral_reset+0x3e4>)
100091ca:	400a      	ands	r2, r1
100091cc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091ce:	685a      	ldr	r2, [r3, #4]
100091d0:	2180      	movs	r1, #128	; 0x80
100091d2:	0549      	lsls	r1, r1, #21
100091d4:	430a      	orrs	r2, r1
100091d6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091d8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
		break;
100091da:	e0de      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091dc:	4b3e      	ldr	r3, [pc, #248]	; (100092d8 <system_peripheral_reset+0x390>)
100091de:	6859      	ldr	r1, [r3, #4]
100091e0:	4a53      	ldr	r2, [pc, #332]	; (10009330 <system_peripheral_reset+0x3e8>)
100091e2:	400a      	ands	r2, r1
100091e4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091e6:	685a      	ldr	r2, [r3, #4]
100091e8:	2180      	movs	r1, #128	; 0x80
100091ea:	0589      	lsls	r1, r1, #22
100091ec:	430a      	orrs	r2, r1
100091ee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091f0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
		break;
100091f2:	e0d2      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091f4:	4b38      	ldr	r3, [pc, #224]	; (100092d8 <system_peripheral_reset+0x390>)
100091f6:	6859      	ldr	r1, [r3, #4]
100091f8:	4a4e      	ldr	r2, [pc, #312]	; (10009334 <system_peripheral_reset+0x3ec>)
100091fa:	400a      	ands	r2, r1
100091fc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091fe:	685a      	ldr	r2, [r3, #4]
10009200:	2180      	movs	r1, #128	; 0x80
10009202:	05c9      	lsls	r1, r1, #23
10009204:	430a      	orrs	r2, r1
10009206:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009208:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
		break;
1000920a:	e0c6      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000920c:	4a32      	ldr	r2, [pc, #200]	; (100092d8 <system_peripheral_reset+0x390>)
1000920e:	6853      	ldr	r3, [r2, #4]
10009210:	005b      	lsls	r3, r3, #1
10009212:	085b      	lsrs	r3, r3, #1
10009214:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009216:	6853      	ldr	r3, [r2, #4]
10009218:	2180      	movs	r1, #128	; 0x80
1000921a:	0609      	lsls	r1, r1, #24
1000921c:	430b      	orrs	r3, r1
1000921e:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009220:	2000      	movs	r0, #0
		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
		break;
10009222:	e0ba      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009224:	4b2c      	ldr	r3, [pc, #176]	; (100092d8 <system_peripheral_reset+0x390>)
10009226:	891a      	ldrh	r2, [r3, #8]
10009228:	2101      	movs	r1, #1
1000922a:	438a      	bics	r2, r1
1000922c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000922e:	8919      	ldrh	r1, [r3, #8]
10009230:	2201      	movs	r2, #1
10009232:	430a      	orrs	r2, r1
10009234:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009236:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
		break;
10009238:	e0af      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000923a:	4b27      	ldr	r3, [pc, #156]	; (100092d8 <system_peripheral_reset+0x390>)
1000923c:	891a      	ldrh	r2, [r3, #8]
1000923e:	2102      	movs	r1, #2
10009240:	438a      	bics	r2, r1
10009242:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009244:	8919      	ldrh	r1, [r3, #8]
10009246:	2202      	movs	r2, #2
10009248:	430a      	orrs	r2, r1
1000924a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000924c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
		break;
1000924e:	e0a4      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009250:	4b21      	ldr	r3, [pc, #132]	; (100092d8 <system_peripheral_reset+0x390>)
10009252:	891a      	ldrh	r2, [r3, #8]
10009254:	2104      	movs	r1, #4
10009256:	438a      	bics	r2, r1
10009258:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000925a:	8919      	ldrh	r1, [r3, #8]
1000925c:	2204      	movs	r2, #4
1000925e:	430a      	orrs	r2, r1
10009260:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009262:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
		break;
10009264:	e099      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009266:	4b1c      	ldr	r3, [pc, #112]	; (100092d8 <system_peripheral_reset+0x390>)
10009268:	891a      	ldrh	r2, [r3, #8]
1000926a:	2108      	movs	r1, #8
1000926c:	438a      	bics	r2, r1
1000926e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009270:	8919      	ldrh	r1, [r3, #8]
10009272:	2208      	movs	r2, #8
10009274:	430a      	orrs	r2, r1
10009276:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009278:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000927a:	e08e      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000927c:	4b16      	ldr	r3, [pc, #88]	; (100092d8 <system_peripheral_reset+0x390>)
1000927e:	891a      	ldrh	r2, [r3, #8]
10009280:	2110      	movs	r1, #16
10009282:	438a      	bics	r2, r1
10009284:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009286:	8919      	ldrh	r1, [r3, #8]
10009288:	2210      	movs	r2, #16
1000928a:	430a      	orrs	r2, r1
1000928c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000928e:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
10009290:	e083      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009292:	4b11      	ldr	r3, [pc, #68]	; (100092d8 <system_peripheral_reset+0x390>)
10009294:	891a      	ldrh	r2, [r3, #8]
10009296:	2120      	movs	r1, #32
10009298:	438a      	bics	r2, r1
1000929a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000929c:	8919      	ldrh	r1, [r3, #8]
1000929e:	2220      	movs	r2, #32
100092a0:	430a      	orrs	r2, r1
100092a2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092a4:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
100092a6:	e078      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100092a8:	4b0b      	ldr	r3, [pc, #44]	; (100092d8 <system_peripheral_reset+0x390>)
100092aa:	891a      	ldrh	r2, [r3, #8]
100092ac:	2140      	movs	r1, #64	; 0x40
100092ae:	438a      	bics	r2, r1
100092b0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100092b2:	8919      	ldrh	r1, [r3, #8]
100092b4:	2240      	movs	r2, #64	; 0x40
100092b6:	430a      	orrs	r2, r1
100092b8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092ba:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
100092bc:	e06d      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100092be:	4b06      	ldr	r3, [pc, #24]	; (100092d8 <system_peripheral_reset+0x390>)
100092c0:	891a      	ldrh	r2, [r3, #8]
100092c2:	2180      	movs	r1, #128	; 0x80
100092c4:	438a      	bics	r2, r1
100092c6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100092c8:	8919      	ldrh	r1, [r3, #8]
100092ca:	2280      	movs	r2, #128	; 0x80
100092cc:	430a      	orrs	r2, r1
100092ce:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092d0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
		break;
100092d2:	e062      	b.n	1000939a <system_peripheral_reset+0x452>
100092d4:	1000ac2c 	.word	0x1000ac2c
100092d8:	4000b000 	.word	0x4000b000
100092dc:	fffffeff 	.word	0xfffffeff
100092e0:	fffffdff 	.word	0xfffffdff
100092e4:	fffffbff 	.word	0xfffffbff
100092e8:	fffff7ff 	.word	0xfffff7ff
100092ec:	ffffefff 	.word	0xffffefff
100092f0:	ffffdfff 	.word	0xffffdfff
100092f4:	ffffbfff 	.word	0xffffbfff
100092f8:	ffff7fff 	.word	0xffff7fff
100092fc:	fffeffff 	.word	0xfffeffff
10009300:	fffdffff 	.word	0xfffdffff
10009304:	fffbffff 	.word	0xfffbffff
10009308:	fff7ffff 	.word	0xfff7ffff
1000930c:	ffefffff 	.word	0xffefffff
10009310:	ffdfffff 	.word	0xffdfffff
10009314:	ffbfffff 	.word	0xffbfffff
10009318:	ff7fffff 	.word	0xff7fffff
1000931c:	feffffff 	.word	0xfeffffff
10009320:	fdffffff 	.word	0xfdffffff
10009324:	fbffffff 	.word	0xfbffffff
10009328:	f7ffffff 	.word	0xf7ffffff
1000932c:	efffffff 	.word	0xefffffff
10009330:	dfffffff 	.word	0xdfffffff
10009334:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009338:	4b18      	ldr	r3, [pc, #96]	; (1000939c <system_peripheral_reset+0x454>)
1000933a:	8919      	ldrh	r1, [r3, #8]
1000933c:	4a18      	ldr	r2, [pc, #96]	; (100093a0 <system_peripheral_reset+0x458>)
1000933e:	400a      	ands	r2, r1
10009340:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009342:	8919      	ldrh	r1, [r3, #8]
10009344:	2280      	movs	r2, #128	; 0x80
10009346:	0052      	lsls	r2, r2, #1
10009348:	430a      	orrs	r2, r1
1000934a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000934c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
		break;
1000934e:	e024      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009350:	4b12      	ldr	r3, [pc, #72]	; (1000939c <system_peripheral_reset+0x454>)
10009352:	8919      	ldrh	r1, [r3, #8]
10009354:	4a13      	ldr	r2, [pc, #76]	; (100093a4 <system_peripheral_reset+0x45c>)
10009356:	400a      	ands	r2, r1
10009358:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000935a:	8919      	ldrh	r1, [r3, #8]
1000935c:	2280      	movs	r2, #128	; 0x80
1000935e:	0092      	lsls	r2, r2, #2
10009360:	430a      	orrs	r2, r1
10009362:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009364:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
10009366:	e018      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009368:	4b0c      	ldr	r3, [pc, #48]	; (1000939c <system_peripheral_reset+0x454>)
1000936a:	8919      	ldrh	r1, [r3, #8]
1000936c:	4a0e      	ldr	r2, [pc, #56]	; (100093a8 <system_peripheral_reset+0x460>)
1000936e:	400a      	ands	r2, r1
10009370:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009372:	8919      	ldrh	r1, [r3, #8]
10009374:	2280      	movs	r2, #128	; 0x80
10009376:	00d2      	lsls	r2, r2, #3
10009378:	430a      	orrs	r2, r1
1000937a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000937c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000937e:	e00c      	b.n	1000939a <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009380:	4b06      	ldr	r3, [pc, #24]	; (1000939c <system_peripheral_reset+0x454>)
10009382:	8919      	ldrh	r1, [r3, #8]
10009384:	4a09      	ldr	r2, [pc, #36]	; (100093ac <system_peripheral_reset+0x464>)
10009386:	400a      	ands	r2, r1
10009388:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000938a:	8919      	ldrh	r1, [r3, #8]
1000938c:	2280      	movs	r2, #128	; 0x80
1000938e:	0112      	lsls	r2, r2, #4
10009390:	430a      	orrs	r2, r1
10009392:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009394:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
		break;
10009396:	e000      	b.n	1000939a <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
10009398:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000939a:	bd00      	pop	{pc}
1000939c:	4000b000 	.word	0x4000b000
100093a0:	fffffeff 	.word	0xfffffeff
100093a4:	fffffdff 	.word	0xfffffdff
100093a8:	fffffbff 	.word	0xfffffbff
100093ac:	fffff7ff 	.word	0xfffff7ff

100093b0 <system_register_isr>:
 */
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
100093b0:	2380      	movs	r3, #128	; 0x80
100093b2:	04db      	lsls	r3, r3, #19
100093b4:	469c      	mov	ip, r3
100093b6:	4460      	add	r0, ip
	*temp = isr_address;
100093b8:	0080      	lsls	r0, r0, #2
100093ba:	6001      	str	r1, [r0, #0]
}
100093bc:	4770      	bx	lr
100093be:	46c0      	nop			; (mov r8, r8)

100093c0 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
100093c0:	b538      	push	{r3, r4, r5, lr}
	struct uart_module *module = _uart_instances[0];
100093c2:	4b20      	ldr	r3, [pc, #128]	; (10009444 <uart_rx0_isr_handler+0x84>)
100093c4:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
100093c6:	6823      	ldr	r3, [r4, #0]
100093c8:	7d1d      	ldrb	r5, [r3, #20]
100093ca:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
100093cc:	066a      	lsls	r2, r5, #25
100093ce:	d513      	bpl.n	100093f8 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
100093d0:	211e      	movs	r1, #30
100093d2:	2222      	movs	r2, #34	; 0x22
100093d4:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
100093d6:	7e1a      	ldrb	r2, [r3, #24]
100093d8:	3123      	adds	r1, #35	; 0x23
100093da:	438a      	bics	r2, r1
100093dc:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
100093de:	2321      	movs	r3, #33	; 0x21
100093e0:	5ce3      	ldrb	r3, [r4, r3]
100093e2:	071b      	lsls	r3, r3, #28
100093e4:	d506      	bpl.n	100093f4 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
100093e6:	2320      	movs	r3, #32
100093e8:	5ce3      	ldrb	r3, [r4, r3]
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
100093ea:	071b      	lsls	r3, r3, #28
100093ec:	d502      	bpl.n	100093f4 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
100093ee:	1c20      	adds	r0, r4, #0
100093f0:	6923      	ldr	r3, [r4, #16]
100093f2:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
100093f4:	6823      	ldr	r3, [r4, #0]
100093f6:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
100093f8:	07eb      	lsls	r3, r5, #31
100093fa:	d522      	bpl.n	10009442 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
100093fc:	6823      	ldr	r3, [r4, #0]
100093fe:	7c1b      	ldrb	r3, [r3, #16]
10009400:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10009402:	6962      	ldr	r2, [r4, #20]
10009404:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10009406:	6963      	ldr	r3, [r4, #20]
10009408:	3301      	adds	r3, #1
1000940a:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000940c:	8ba3      	ldrh	r3, [r4, #28]
1000940e:	3b01      	subs	r3, #1
10009410:	b29b      	uxth	r3, r3
10009412:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10009414:	8ba3      	ldrh	r3, [r4, #28]
10009416:	b29b      	uxth	r3, r3
10009418:	2b00      	cmp	r3, #0
1000941a:	d112      	bne.n	10009442 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000941c:	3321      	adds	r3, #33	; 0x21
1000941e:	5ce3      	ldrb	r3, [r4, r3]
10009420:	075b      	lsls	r3, r3, #29
10009422:	d50e      	bpl.n	10009442 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10009424:	2320      	movs	r3, #32
10009426:	5ce3      	ldrb	r3, [r4, r3]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009428:	075b      	lsls	r3, r3, #29
1000942a:	d50a      	bpl.n	10009442 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000942c:	2200      	movs	r2, #0
1000942e:	2322      	movs	r3, #34	; 0x22
10009430:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10009432:	6822      	ldr	r2, [r4, #0]
10009434:	7e13      	ldrb	r3, [r2, #24]
10009436:	2101      	movs	r1, #1
10009438:	438b      	bics	r3, r1
1000943a:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000943c:	68e3      	ldr	r3, [r4, #12]
1000943e:	1c20      	adds	r0, r4, #0
10009440:	4798      	blx	r3
			}
		}
	}
}
10009442:	bd38      	pop	{r3, r4, r5, pc}
10009444:	1000aef0 	.word	0x1000aef0

10009448 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
10009448:	b538      	push	{r3, r4, r5, lr}
	struct uart_module *module = _uart_instances[0];
1000944a:	4b21      	ldr	r3, [pc, #132]	; (100094d0 <uart_tx0_isr_handler+0x88>)
1000944c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000944e:	6823      	ldr	r3, [r4, #0]
10009450:	791d      	ldrb	r5, [r3, #4]
10009452:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10009454:	07ea      	lsls	r2, r5, #31
10009456:	d517      	bpl.n	10009488 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10009458:	69a2      	ldr	r2, [r4, #24]
1000945a:	7811      	ldrb	r1, [r2, #0]
1000945c:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000945e:	3201      	adds	r2, #1
10009460:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
10009462:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009464:	8be3      	ldrh	r3, [r4, #30]
10009466:	3b01      	subs	r3, #1
10009468:	b29b      	uxth	r3, r3
1000946a:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000946c:	8be3      	ldrh	r3, [r4, #30]
1000946e:	b29b      	uxth	r3, r3
10009470:	2b00      	cmp	r3, #0
10009472:	d109      	bne.n	10009488 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009474:	6822      	ldr	r2, [r4, #0]
10009476:	7a13      	ldrb	r3, [r2, #8]
10009478:	2101      	movs	r1, #1
1000947a:	438b      	bics	r3, r1
1000947c:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000947e:	6822      	ldr	r2, [r4, #0]
10009480:	7a11      	ldrb	r1, [r2, #8]
10009482:	2310      	movs	r3, #16
10009484:	430b      	orrs	r3, r1
10009486:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10009488:	06eb      	lsls	r3, r5, #27
1000948a:	d512      	bpl.n	100094b2 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000948c:	2321      	movs	r3, #33	; 0x21
1000948e:	5ce3      	ldrb	r3, [r4, r3]
10009490:	07db      	lsls	r3, r3, #31
10009492:	d50e      	bpl.n	100094b2 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10009494:	2320      	movs	r3, #32
10009496:	5ce3      	ldrb	r3, [r4, r3]
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009498:	07db      	lsls	r3, r3, #31
1000949a:	d50a      	bpl.n	100094b2 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000949c:	2200      	movs	r2, #0
1000949e:	2322      	movs	r3, #34	; 0x22
100094a0:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
100094a2:	6822      	ldr	r2, [r4, #0]
100094a4:	7a13      	ldrb	r3, [r2, #8]
100094a6:	2110      	movs	r1, #16
100094a8:	438b      	bics	r3, r1
100094aa:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
100094ac:	1c20      	adds	r0, r4, #0
100094ae:	6863      	ldr	r3, [r4, #4]
100094b0:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
100094b2:	06ab      	lsls	r3, r5, #26
100094b4:	d50a      	bpl.n	100094cc <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
100094b6:	2321      	movs	r3, #33	; 0x21
100094b8:	5ce3      	ldrb	r3, [r4, r3]
100094ba:	079b      	lsls	r3, r3, #30
100094bc:	d506      	bpl.n	100094cc <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
100094be:	2320      	movs	r3, #32
100094c0:	5ce3      	ldrb	r3, [r4, r3]
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
100094c2:	079b      	lsls	r3, r3, #30
100094c4:	d502      	bpl.n	100094cc <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
100094c6:	68a3      	ldr	r3, [r4, #8]
100094c8:	1c20      	adds	r0, r4, #0
100094ca:	4798      	blx	r3
		}

	}
}
100094cc:	bd38      	pop	{r3, r4, r5, pc}
100094ce:	46c0      	nop			; (mov r8, r8)
100094d0:	1000aef0 	.word	0x1000aef0

100094d4 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
100094d4:	b538      	push	{r3, r4, r5, lr}
	struct uart_module *module = _uart_instances[1];
100094d6:	4b20      	ldr	r3, [pc, #128]	; (10009558 <uart_rx1_isr_handler+0x84>)
100094d8:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
100094da:	6823      	ldr	r3, [r4, #0]
100094dc:	7d1d      	ldrb	r5, [r3, #20]
100094de:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
100094e0:	066a      	lsls	r2, r5, #25
100094e2:	d513      	bpl.n	1000950c <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
100094e4:	211e      	movs	r1, #30
100094e6:	2222      	movs	r2, #34	; 0x22
100094e8:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
100094ea:	7e1a      	ldrb	r2, [r3, #24]
100094ec:	3123      	adds	r1, #35	; 0x23
100094ee:	438a      	bics	r2, r1
100094f0:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
100094f2:	2321      	movs	r3, #33	; 0x21
100094f4:	5ce3      	ldrb	r3, [r4, r3]
100094f6:	071b      	lsls	r3, r3, #28
100094f8:	d506      	bpl.n	10009508 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
100094fa:	2320      	movs	r3, #32
100094fc:	5ce3      	ldrb	r3, [r4, r3]
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
100094fe:	071b      	lsls	r3, r3, #28
10009500:	d502      	bpl.n	10009508 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
10009502:	1c20      	adds	r0, r4, #0
10009504:	6923      	ldr	r3, [r4, #16]
10009506:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10009508:	6823      	ldr	r3, [r4, #0]
1000950a:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000950c:	07eb      	lsls	r3, r5, #31
1000950e:	d522      	bpl.n	10009556 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10009510:	6823      	ldr	r3, [r4, #0]
10009512:	7c1b      	ldrb	r3, [r3, #16]
10009514:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10009516:	6962      	ldr	r2, [r4, #20]
10009518:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000951a:	6963      	ldr	r3, [r4, #20]
1000951c:	3301      	adds	r3, #1
1000951e:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10009520:	8ba3      	ldrh	r3, [r4, #28]
10009522:	3b01      	subs	r3, #1
10009524:	b29b      	uxth	r3, r3
10009526:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10009528:	8ba3      	ldrh	r3, [r4, #28]
1000952a:	b29b      	uxth	r3, r3
1000952c:	2b00      	cmp	r3, #0
1000952e:	d112      	bne.n	10009556 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009530:	3321      	adds	r3, #33	; 0x21
10009532:	5ce3      	ldrb	r3, [r4, r3]
10009534:	075b      	lsls	r3, r3, #29
10009536:	d50e      	bpl.n	10009556 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10009538:	2320      	movs	r3, #32
1000953a:	5ce3      	ldrb	r3, [r4, r3]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000953c:	075b      	lsls	r3, r3, #29
1000953e:	d50a      	bpl.n	10009556 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10009540:	2200      	movs	r2, #0
10009542:	2322      	movs	r3, #34	; 0x22
10009544:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10009546:	6822      	ldr	r2, [r4, #0]
10009548:	7e13      	ldrb	r3, [r2, #24]
1000954a:	2101      	movs	r1, #1
1000954c:	438b      	bics	r3, r1
1000954e:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10009550:	68e3      	ldr	r3, [r4, #12]
10009552:	1c20      	adds	r0, r4, #0
10009554:	4798      	blx	r3
			}
		}
	}
}
10009556:	bd38      	pop	{r3, r4, r5, pc}
10009558:	1000aef0 	.word	0x1000aef0

1000955c <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000955c:	b538      	push	{r3, r4, r5, lr}
	struct uart_module *module = _uart_instances[1];
1000955e:	4b21      	ldr	r3, [pc, #132]	; (100095e4 <uart_tx1_isr_handler+0x88>)
10009560:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
10009562:	6823      	ldr	r3, [r4, #0]
10009564:	791d      	ldrb	r5, [r3, #4]
10009566:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10009568:	07ea      	lsls	r2, r5, #31
1000956a:	d517      	bpl.n	1000959c <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000956c:	69a2      	ldr	r2, [r4, #24]
1000956e:	7811      	ldrb	r1, [r2, #0]
10009570:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10009572:	3201      	adds	r2, #1
10009574:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
10009576:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009578:	8be3      	ldrh	r3, [r4, #30]
1000957a:	3b01      	subs	r3, #1
1000957c:	b29b      	uxth	r3, r3
1000957e:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
10009580:	8be3      	ldrh	r3, [r4, #30]
10009582:	b29b      	uxth	r3, r3
10009584:	2b00      	cmp	r3, #0
10009586:	d109      	bne.n	1000959c <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009588:	6822      	ldr	r2, [r4, #0]
1000958a:	7a13      	ldrb	r3, [r2, #8]
1000958c:	2101      	movs	r1, #1
1000958e:	438b      	bics	r3, r1
10009590:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
10009592:	6822      	ldr	r2, [r4, #0]
10009594:	7a11      	ldrb	r1, [r2, #8]
10009596:	2310      	movs	r3, #16
10009598:	430b      	orrs	r3, r1
1000959a:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000959c:	06eb      	lsls	r3, r5, #27
1000959e:	d512      	bpl.n	100095c6 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100095a0:	2321      	movs	r3, #33	; 0x21
100095a2:	5ce3      	ldrb	r3, [r4, r3]
100095a4:	07db      	lsls	r3, r3, #31
100095a6:	d50e      	bpl.n	100095c6 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
100095a8:	2320      	movs	r3, #32
100095aa:	5ce3      	ldrb	r3, [r4, r3]
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100095ac:	07db      	lsls	r3, r3, #31
100095ae:	d50a      	bpl.n	100095c6 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
100095b0:	2200      	movs	r2, #0
100095b2:	2322      	movs	r3, #34	; 0x22
100095b4:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
100095b6:	6822      	ldr	r2, [r4, #0]
100095b8:	7a13      	ldrb	r3, [r2, #8]
100095ba:	2110      	movs	r1, #16
100095bc:	438b      	bics	r3, r1
100095be:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
100095c0:	1c20      	adds	r0, r4, #0
100095c2:	6863      	ldr	r3, [r4, #4]
100095c4:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
100095c6:	06ab      	lsls	r3, r5, #26
100095c8:	d50a      	bpl.n	100095e0 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
100095ca:	2321      	movs	r3, #33	; 0x21
100095cc:	5ce3      	ldrb	r3, [r4, r3]
100095ce:	079b      	lsls	r3, r3, #30
100095d0:	d506      	bpl.n	100095e0 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
100095d2:	2320      	movs	r3, #32
100095d4:	5ce3      	ldrb	r3, [r4, r3]
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
100095d6:	079b      	lsls	r3, r3, #30
100095d8:	d502      	bpl.n	100095e0 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
100095da:	68a3      	ldr	r3, [r4, #8]
100095dc:	1c20      	adds	r0, r4, #0
100095de:	4798      	blx	r3
		}

	}
}
100095e0:	bd38      	pop	{r3, r4, r5, pc}
100095e2:	46c0      	nop			; (mov r8, r8)
100095e4:	1000aef0 	.word	0x1000aef0

100095e8 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
100095e8:	23e1      	movs	r3, #225	; 0xe1
100095ea:	025b      	lsls	r3, r3, #9
100095ec:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
100095ee:	2300      	movs	r3, #0
100095f0:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
100095f2:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
100095f4:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
100095f6:	71c3      	strb	r3, [r0, #7]
	config->pin_number_pad[0] = PIN_LP_GPIO_2_MUX2_UART0_RXD;
100095f8:	3302      	adds	r3, #2
100095fa:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3_MUX2_UART0_TXD;
100095fc:	2203      	movs	r2, #3
100095fe:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4_MUX2_UART0_CTS;
10009600:	3201      	adds	r2, #1
10009602:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5_MUX2_UART0_RTS;
10009604:	3201      	adds	r2, #1
10009606:	6142      	str	r2, [r0, #20]
	
	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_MUX2_UART0_RXD;
10009608:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_MUX2_UART0_TXD;
1000960a:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_MUX2_UART0_CTS;
1000960c:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_MUX2_UART0_RTS;
1000960e:	6243      	str	r3, [r0, #36]	; 0x24
}
10009610:	4770      	bx	lr
10009612:	46c0      	nop			; (mov r8, r8)

10009614 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009616:	464f      	mov	r7, r9
10009618:	4646      	mov	r6, r8
1000961a:	b4c0      	push	{r6, r7}
1000961c:	1c05      	adds	r5, r0, #0
1000961e:	1c17      	adds	r7, r2, #0

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
10009620:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
10009622:	2300      	movs	r3, #0
10009624:	6043      	str	r3, [r0, #4]
10009626:	6083      	str	r3, [r0, #8]
10009628:	60c3      	str	r3, [r0, #12]
1000962a:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000962c:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000962e:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
10009630:	2200      	movs	r2, #0
10009632:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
10009634:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
10009636:	3320      	adds	r3, #32
10009638:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000963a:	3301      	adds	r3, #1
1000963c:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000963e:	3301      	adds	r3, #1
10009640:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
10009642:	4b55      	ldr	r3, [pc, #340]	; (10009798 <uart_init+0x184>)
10009644:	4299      	cmp	r1, r3
10009646:	d118      	bne.n	1000967a <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
10009648:	2009      	movs	r0, #9
1000964a:	4c54      	ldr	r4, [pc, #336]	; (1000979c <uart_init+0x188>)
1000964c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000964e:	200a      	movs	r0, #10
10009650:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
10009652:	2009      	movs	r0, #9
10009654:	4c52      	ldr	r4, [pc, #328]	; (100097a0 <uart_init+0x18c>)
10009656:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
10009658:	200a      	movs	r0, #10
1000965a:	47a0      	blx	r4
		_uart_instances[0] = module;
1000965c:	4b51      	ldr	r3, [pc, #324]	; (100097a4 <uart_init+0x190>)
1000965e:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
10009660:	2010      	movs	r0, #16
10009662:	4951      	ldr	r1, [pc, #324]	; (100097a8 <uart_init+0x194>)
10009664:	4c51      	ldr	r4, [pc, #324]	; (100097ac <uart_init+0x198>)
10009666:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
10009668:	2011      	movs	r0, #17
1000966a:	4951      	ldr	r1, [pc, #324]	; (100097b0 <uart_init+0x19c>)
1000966c:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000966e:	4b51      	ldr	r3, [pc, #324]	; (100097b4 <uart_init+0x1a0>)
10009670:	2201      	movs	r2, #1
10009672:	601a      	str	r2, [r3, #0]
10009674:	3201      	adds	r2, #1
10009676:	601a      	str	r2, [r3, #0]
10009678:	e01a      	b.n	100096b0 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000967a:	4b4f      	ldr	r3, [pc, #316]	; (100097b8 <uart_init+0x1a4>)
1000967c:	4299      	cmp	r1, r3
1000967e:	d117      	bne.n	100096b0 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
10009680:	200b      	movs	r0, #11
10009682:	4c46      	ldr	r4, [pc, #280]	; (1000979c <uart_init+0x188>)
10009684:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
10009686:	200c      	movs	r0, #12
10009688:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000968a:	200b      	movs	r0, #11
1000968c:	4c44      	ldr	r4, [pc, #272]	; (100097a0 <uart_init+0x18c>)
1000968e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
10009690:	200c      	movs	r0, #12
10009692:	47a0      	blx	r4
		_uart_instances[1] = module;
10009694:	4b43      	ldr	r3, [pc, #268]	; (100097a4 <uart_init+0x190>)
10009696:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
10009698:	2012      	movs	r0, #18
1000969a:	4948      	ldr	r1, [pc, #288]	; (100097bc <uart_init+0x1a8>)
1000969c:	4c43      	ldr	r4, [pc, #268]	; (100097ac <uart_init+0x198>)
1000969e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
100096a0:	2013      	movs	r0, #19
100096a2:	4947      	ldr	r1, [pc, #284]	; (100097c0 <uart_init+0x1ac>)
100096a4:	47a0      	blx	r4
100096a6:	4b43      	ldr	r3, [pc, #268]	; (100097b4 <uart_init+0x1a0>)
100096a8:	2204      	movs	r2, #4
100096aa:	601a      	str	r2, [r3, #0]
100096ac:	3204      	adds	r2, #4
100096ae:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
100096b0:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
100096b2:	2204      	movs	r2, #4
100096b4:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
100096b6:	2b00      	cmp	r3, #0
100096b8:	d152      	bne.n	10009760 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
100096ba:	3302      	adds	r3, #2
100096bc:	4698      	mov	r8, r3
100096be:	e04f      	b.n	10009760 <uart_init+0x14c>
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
100096c0:	7830      	ldrb	r0, [r6, #0]
100096c2:	8a31      	ldrh	r1, [r6, #16]
100096c4:	47c8      	blx	r9
	if(config->flow_control) {
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
100096c6:	3401      	adds	r4, #1
100096c8:	b2e4      	uxtb	r4, r4
100096ca:	3604      	adds	r6, #4
100096cc:	4544      	cmp	r4, r8
100096ce:	d3f7      	bcc.n	100096c0 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
100096d0:	682b      	ldr	r3, [r5, #0]
100096d2:	7d1a      	ldrb	r2, [r3, #20]
100096d4:	07d2      	lsls	r2, r2, #31
100096d6:	d504      	bpl.n	100096e2 <uart_init+0xce>
100096d8:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
100096da:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
100096dc:	7d1a      	ldrb	r2, [r3, #20]
100096de:	420a      	tst	r2, r1
100096e0:	d1fb      	bne.n	100096da <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
100096e2:	2100      	movs	r1, #0
100096e4:	2220      	movs	r2, #32
100096e6:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
100096e8:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_UART_CONFIGURATION_CTS_ENABLE_1;
100096ea:	1e59      	subs	r1, r3, #1
100096ec:	418b      	sbcs	r3, r1
100096ee:	0159      	lsls	r1, r3, #5
100096f0:	797b      	ldrb	r3, [r7, #5]
100096f2:	793a      	ldrb	r2, [r7, #4]
100096f4:	4313      	orrs	r3, r2
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
100096f6:	430b      	orrs	r3, r1
	switch(config->parity) {
100096f8:	79ba      	ldrb	r2, [r7, #6]
100096fa:	2a02      	cmp	r2, #2
100096fc:	d00d      	beq.n	1000971a <uart_init+0x106>
100096fe:	b2d1      	uxtb	r1, r2
10009700:	2902      	cmp	r1, #2
10009702:	d802      	bhi.n	1000970a <uart_init+0xf6>
10009704:	2a01      	cmp	r2, #1
10009706:	d005      	beq.n	10009714 <uart_init+0x100>
10009708:	e00f      	b.n	1000972a <uart_init+0x116>
1000970a:	2a03      	cmp	r2, #3
1000970c:	d008      	beq.n	10009720 <uart_init+0x10c>
1000970e:	2a04      	cmp	r2, #4
10009710:	d009      	beq.n	10009726 <uart_init+0x112>
10009712:	e00a      	b.n	1000972a <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
10009714:	2202      	movs	r2, #2
10009716:	4313      	orrs	r3, r2
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_0;
			break;
10009718:	e007      	b.n	1000972a <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_1;
1000971a:	2206      	movs	r2, #6
1000971c:	4313      	orrs	r3, r2
			break;
1000971e:	e004      	b.n	1000972a <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_2;
10009720:	220a      	movs	r2, #10
10009722:	4313      	orrs	r3, r2
			break;
10009724:	e001      	b.n	1000972a <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_3;
10009726:	220e      	movs	r2, #14
10009728:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000972a:	2220      	movs	r2, #32
1000972c:	6829      	ldr	r1, [r5, #0]
1000972e:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
10009730:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
10009732:	4b24      	ldr	r3, [pc, #144]	; (100097c4 <uart_init+0x1b0>)
10009734:	4798      	blx	r3
10009736:	1c04      	adds	r4, r0, #0
	integerpart = clock / baud_rate;
10009738:	1c31      	adds	r1, r6, #0
1000973a:	4b23      	ldr	r3, [pc, #140]	; (100097c8 <uart_init+0x1b4>)
1000973c:	4798      	blx	r3
1000973e:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
10009740:	0400      	lsls	r0, r0, #16
10009742:	0c00      	lsrs	r0, r0, #16
10009744:	4370      	muls	r0, r6
10009746:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
10009748:	0931      	lsrs	r1, r6, #4
1000974a:	4288      	cmp	r0, r1
1000974c:	d906      	bls.n	1000975c <uart_init+0x148>
1000974e:	2300      	movs	r3, #0
		i++;
10009750:	3301      	adds	r3, #1
10009752:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
10009754:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
10009756:	4288      	cmp	r0, r1
10009758:	d8fa      	bhi.n	10009750 <uart_init+0x13c>
1000975a:	e007      	b.n	1000976c <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000975c:	2300      	movs	r3, #0
1000975e:	e005      	b.n	1000976c <uart_init+0x158>
10009760:	1c3e      	adds	r6, r7, #0
10009762:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009764:	2400      	movs	r4, #0
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
10009766:	4b19      	ldr	r3, [pc, #100]	; (100097cc <uart_init+0x1b8>)
10009768:	4699      	mov	r9, r3
1000976a:	e7a9      	b.n	100096c0 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000976c:	2100      	movs	r1, #0
1000976e:	2028      	movs	r0, #40	; 0x28
10009770:	682c      	ldr	r4, [r5, #0]
10009772:	5421      	strb	r1, [r4, r0]
	i = 0;
	while(diff > (baud_rate / 16)) {
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;
10009774:	3301      	adds	r3, #1

	module->hw->UART_CLOCK_SOURCE.reg = UART_UART_CLOCK_SOURCE_CLOCK_SELECT_0;
	module->hw->UART_BAUD_RATE.reg =
10009776:	071b      	lsls	r3, r3, #28
10009778:	0f5b      	lsrs	r3, r3, #29
1000977a:	00d2      	lsls	r2, r2, #3
1000977c:	4313      	orrs	r3, r2
1000977e:	b29b      	uxth	r3, r3
10009780:	682a      	ldr	r2, [r5, #0]
10009782:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
10009784:	682b      	ldr	r3, [r5, #0]
10009786:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
10009788:	682b      	ldr	r3, [r5, #0]
1000978a:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000978c:	2000      	movs	r0, #0
1000978e:	bc0c      	pop	{r2, r3}
10009790:	4690      	mov	r8, r2
10009792:	4699      	mov	r9, r3
10009794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009796:	46c0      	nop			; (mov r8, r8)
10009798:	40004000 	.word	0x40004000
1000979c:	10008f49 	.word	0x10008f49
100097a0:	10008bed 	.word	0x10008bed
100097a4:	1000aef0 	.word	0x1000aef0
100097a8:	100093c1 	.word	0x100093c1
100097ac:	100093b1 	.word	0x100093b1
100097b0:	10009449 	.word	0x10009449
100097b4:	e000e100 	.word	0xe000e100
100097b8:	40005000 	.word	0x40005000
100097bc:	100094d5 	.word	0x100094d5
100097c0:	1000955d 	.word	0x1000955d
100097c4:	10008be1 	.word	0x10008be1
100097c8:	10009a91 	.word	0x10009a91
100097cc:	10008a05 	.word	0x10008a05

100097d0 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
100097d0:	6802      	ldr	r2, [r0, #0]
100097d2:	2001      	movs	r0, #1
100097d4:	7913      	ldrb	r3, [r2, #4]
100097d6:	4203      	tst	r3, r0
100097d8:	d0fc      	beq.n	100097d4 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
100097da:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
100097dc:	2000      	movs	r0, #0
100097de:	4770      	bx	lr

100097e0 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
100097e0:	6802      	ldr	r2, [r0, #0]
100097e2:	2001      	movs	r0, #1
100097e4:	7d13      	ldrb	r3, [r2, #20]
100097e6:	4203      	tst	r3, r0
100097e8:	d0fc      	beq.n	100097e4 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
100097ea:	7c13      	ldrb	r3, [r2, #16]
100097ec:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
100097ee:	2000      	movs	r0, #0
100097f0:	4770      	bx	lr
100097f2:	46c0      	nop			; (mov r8, r8)

100097f4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100097f4:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100097f6:	4a06      	ldr	r2, [pc, #24]	; (10009810 <_sbrk+0x1c>)
100097f8:	6812      	ldr	r2, [r2, #0]
100097fa:	2a00      	cmp	r2, #0
100097fc:	d102      	bne.n	10009804 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
100097fe:	4905      	ldr	r1, [pc, #20]	; (10009814 <_sbrk+0x20>)
10009800:	4a03      	ldr	r2, [pc, #12]	; (10009810 <_sbrk+0x1c>)
10009802:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
10009804:	4a02      	ldr	r2, [pc, #8]	; (10009810 <_sbrk+0x1c>)
10009806:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10009808:	18c3      	adds	r3, r0, r3
1000980a:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000980c:	4770      	bx	lr
1000980e:	46c0      	nop			; (mov r8, r8)
10009810:	1000aea4 	.word	0x1000aea4
10009814:	1000b908 	.word	0x1000b908

10009818 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10009818:	2001      	movs	r0, #1
1000981a:	4240      	negs	r0, r0
1000981c:	4770      	bx	lr
1000981e:	46c0      	nop			; (mov r8, r8)

10009820 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10009820:	2380      	movs	r3, #128	; 0x80
10009822:	019b      	lsls	r3, r3, #6
10009824:	604b      	str	r3, [r1, #4]

	return 0;
}
10009826:	2000      	movs	r0, #0
10009828:	4770      	bx	lr
1000982a:	46c0      	nop			; (mov r8, r8)

1000982c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000982c:	2001      	movs	r0, #1
1000982e:	4770      	bx	lr

10009830 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10009830:	2000      	movs	r0, #0
10009832:	4770      	bx	lr

10009834 <timer_callback>:

#define CONF_TIMER_RELOAD_VALUE 26000000/1000

static void timer_callback(void)
{
	msTick++;
10009834:	4a06      	ldr	r2, [pc, #24]	; (10009850 <timer_callback+0x1c>)
10009836:	6813      	ldr	r3, [r2, #0]
10009838:	3301      	adds	r3, #1
1000983a:	6013      	str	r3, [r2, #0]
	task_1++;
1000983c:	4a05      	ldr	r2, [pc, #20]	; (10009854 <timer_callback+0x20>)
1000983e:	6813      	ldr	r3, [r2, #0]
10009840:	3301      	adds	r3, #1
10009842:	6013      	str	r3, [r2, #0]
	task_2++;
10009844:	4a04      	ldr	r2, [pc, #16]	; (10009858 <timer_callback+0x24>)
10009846:	6813      	ldr	r3, [r2, #0]
10009848:	3301      	adds	r3, #1
1000984a:	6013      	str	r3, [r2, #0]
}
1000984c:	4770      	bx	lr
1000984e:	46c0      	nop			; (mov r8, r8)
10009850:	1000aeb0 	.word	0x1000aeb0
10009854:	1000aea8 	.word	0x1000aea8
10009858:	1000aeac 	.word	0x1000aeac

1000985c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000985c:	b570      	push	{r4, r5, r6, lr}
1000985e:	1c06      	adds	r6, r0, #0
10009860:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK != uart_read_wait(module, c));
10009862:	4c03      	ldr	r4, [pc, #12]	; (10009870 <usart_serial_getchar+0x14>)
10009864:	1c30      	adds	r0, r6, #0
10009866:	1c29      	adds	r1, r5, #0
10009868:	47a0      	blx	r4
1000986a:	2800      	cmp	r0, #0
1000986c:	d1fa      	bne.n	10009864 <usart_serial_getchar+0x8>
}
1000986e:	bd70      	pop	{r4, r5, r6, pc}
10009870:	100097e1 	.word	0x100097e1

10009874 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
10009874:	b570      	push	{r4, r5, r6, lr}
10009876:	1c06      	adds	r6, r0, #0
10009878:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=uart_write_wait(module, c));
1000987a:	4c03      	ldr	r4, [pc, #12]	; (10009888 <usart_serial_putchar+0x14>)
1000987c:	1c30      	adds	r0, r6, #0
1000987e:	1c29      	adds	r1, r5, #0
10009880:	47a0      	blx	r4
10009882:	2800      	cmp	r0, #0
10009884:	d1fa      	bne.n	1000987c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
10009886:	bd70      	pop	{r4, r5, r6, pc}
10009888:	100097d1 	.word	0x100097d1

1000988c <readAccGryoData>:
	destination[0] = (int16_t)((rawData[1] << 8) | rawData[0]) ;
	destination[1] = (int16_t)((rawData[3] << 8) | rawData[2]) ;
	destination[2] = (int16_t)((rawData[5] << 8) | rawData[4]) ;
}

void readAccGryoData(int16_t * destination){
1000988c:	b570      	push	{r4, r5, r6, lr}
1000988e:	b084      	sub	sp, #16
10009890:	1c06      	adds	r6, r0, #0
10009892:	2400      	movs	r4, #0
	uint8_t rawData[15];
	for (uint8_t i = 0; i < 15; i++)
	{
		rawData[i] = i2c_sentral_read_reg(0x1A + i);
10009894:	4d1d      	ldr	r5, [pc, #116]	; (1000990c <readAccGryoData+0x80>)
10009896:	1c20      	adds	r0, r4, #0
10009898:	301a      	adds	r0, #26
1000989a:	b2c0      	uxtb	r0, r0
1000989c:	47a8      	blx	r5
1000989e:	466b      	mov	r3, sp
100098a0:	54e0      	strb	r0, [r4, r3]
100098a2:	3401      	adds	r4, #1
	destination[2] = (int16_t)((rawData[5] << 8) | rawData[4]) ;
}

void readAccGryoData(int16_t * destination){
	uint8_t rawData[15];
	for (uint8_t i = 0; i < 15; i++)
100098a4:	2c0f      	cmp	r4, #15
100098a6:	d1f6      	bne.n	10009896 <readAccGryoData+0xa>
	{
		rawData[i] = i2c_sentral_read_reg(0x1A + i);
	}
	
	destination[0] = (int16_t)((rawData[1] << 8) | rawData[0]) ; // acc data
100098a8:	785b      	ldrb	r3, [r3, #1]
100098aa:	021b      	lsls	r3, r3, #8
100098ac:	466a      	mov	r2, sp
100098ae:	7812      	ldrb	r2, [r2, #0]
100098b0:	4313      	orrs	r3, r2
100098b2:	8033      	strh	r3, [r6, #0]
	destination[1] = (int16_t)((rawData[3] << 8) | rawData[2]) ;
100098b4:	466b      	mov	r3, sp
100098b6:	78db      	ldrb	r3, [r3, #3]
100098b8:	021b      	lsls	r3, r3, #8
100098ba:	466a      	mov	r2, sp
100098bc:	7892      	ldrb	r2, [r2, #2]
100098be:	4313      	orrs	r3, r2
100098c0:	8073      	strh	r3, [r6, #2]
	destination[2] = (int16_t)((rawData[5] << 8) | rawData[4]) ;
100098c2:	466b      	mov	r3, sp
100098c4:	795b      	ldrb	r3, [r3, #5]
100098c6:	021b      	lsls	r3, r3, #8
100098c8:	466a      	mov	r2, sp
100098ca:	7912      	ldrb	r2, [r2, #4]
100098cc:	4313      	orrs	r3, r2
100098ce:	80b3      	strh	r3, [r6, #4]
	
	destination[3] = (int16_t)((rawData[7] << 8) | rawData[6]) ; //timestamp
100098d0:	466b      	mov	r3, sp
100098d2:	79db      	ldrb	r3, [r3, #7]
100098d4:	021b      	lsls	r3, r3, #8
100098d6:	466a      	mov	r2, sp
100098d8:	7992      	ldrb	r2, [r2, #6]
100098da:	4313      	orrs	r3, r2
100098dc:	80f3      	strh	r3, [r6, #6]
	
	destination[4] = (int16_t)((rawData[9] << 8) | rawData[8]) ; //gyro data
100098de:	466b      	mov	r3, sp
100098e0:	7a5b      	ldrb	r3, [r3, #9]
100098e2:	021b      	lsls	r3, r3, #8
100098e4:	466a      	mov	r2, sp
100098e6:	7a12      	ldrb	r2, [r2, #8]
100098e8:	4313      	orrs	r3, r2
100098ea:	8133      	strh	r3, [r6, #8]
	destination[5] = (int16_t)((rawData[11] << 8) | rawData[10]) ;
100098ec:	466b      	mov	r3, sp
100098ee:	7adb      	ldrb	r3, [r3, #11]
100098f0:	021b      	lsls	r3, r3, #8
100098f2:	466a      	mov	r2, sp
100098f4:	7a92      	ldrb	r2, [r2, #10]
100098f6:	4313      	orrs	r3, r2
100098f8:	8173      	strh	r3, [r6, #10]
	destination[6] = (int16_t)((rawData[13] << 8) | rawData[12]) ;
100098fa:	466b      	mov	r3, sp
100098fc:	7b5b      	ldrb	r3, [r3, #13]
100098fe:	021b      	lsls	r3, r3, #8
10009900:	466a      	mov	r2, sp
10009902:	7b12      	ldrb	r2, [r2, #12]
10009904:	4313      	orrs	r3, r2
10009906:	81b3      	strh	r3, [r6, #12]
	
}
10009908:	b004      	add	sp, #16
1000990a:	bd70      	pop	{r4, r5, r6, pc}
1000990c:	1000819d 	.word	0x1000819d

10009910 <main>:
	aef[1] = quat[2];
	aef[2] = quat[3];
}

int main(void)
{
10009910:	b5f0      	push	{r4, r5, r6, r7, lr}
10009912:	b08f      	sub	sp, #60	; 0x3c
	 * Should not do it if you want the BLE functions.
	 */
	
	//SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;

	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
10009914:	2000      	movs	r0, #0
10009916:	2100      	movs	r1, #0
10009918:	4b3f      	ldr	r3, [pc, #252]	; (10009a18 <main+0x108>)
1000991a:	4798      	blx	r3
}

static void configure_gpio_pins(void)
{
	struct gpio_config config_gpio_pin;
	gpio_get_config_defaults(&config_gpio_pin);
1000991c:	ac04      	add	r4, sp, #16
1000991e:	1c20      	adds	r0, r4, #0
10009920:	4b3e      	ldr	r3, [pc, #248]	; (10009a1c <main+0x10c>)
10009922:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10009924:	2301      	movs	r3, #1
10009926:	7023      	strb	r3, [r4, #0]
	gpio_pin_set_config(LED_0_PIN, &config_gpio_pin);
10009928:	2016      	movs	r0, #22
1000992a:	1c21      	adds	r1, r4, #0
1000992c:	4b3c      	ldr	r3, [pc, #240]	; (10009a20 <main+0x110>)
1000992e:	4798      	blx	r3

static void configure_uart(void)
{
	struct uart_config config_uart;

	uart_get_config_defaults(&config_uart);
10009930:	1c20      	adds	r0, r4, #0
10009932:	4b3c      	ldr	r3, [pc, #240]	; (10009a24 <main+0x114>)
10009934:	4798      	blx	r3

	config_uart.baud_rate = 115200;
10009936:	23e1      	movs	r3, #225	; 0xe1
10009938:	025b      	lsls	r3, r3, #9
1000993a:	9304      	str	r3, [sp, #16]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1000993c:	2302      	movs	r3, #2
1000993e:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
10009940:	2203      	movs	r2, #3
10009942:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
10009944:	3201      	adds	r2, #1
10009946:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
10009948:	3201      	adds	r2, #1
1000994a:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
1000994c:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
1000994e:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
10009950:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
10009952:	6263      	str	r3, [r4, #36]	; 0x24

	while (uart_init(&uart_instance,
10009954:	4e34      	ldr	r6, [pc, #208]	; (10009a28 <main+0x118>)
10009956:	4d35      	ldr	r5, [pc, #212]	; (10009a2c <main+0x11c>)
10009958:	4c35      	ldr	r4, [pc, #212]	; (10009a30 <main+0x120>)
1000995a:	1c30      	adds	r0, r6, #0
1000995c:	1c29      	adds	r1, r5, #0
1000995e:	aa04      	add	r2, sp, #16
10009960:	47a0      	blx	r4
10009962:	2800      	cmp	r0, #0
10009964:	d1f9      	bne.n	1000995a <main+0x4a>
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
10009966:	4830      	ldr	r0, [pc, #192]	; (10009a28 <main+0x118>)
10009968:	4b32      	ldr	r3, [pc, #200]	; (10009a34 <main+0x124>)
1000996a:	6018      	str	r0, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000996c:	4a32      	ldr	r2, [pc, #200]	; (10009a38 <main+0x128>)
1000996e:	4b33      	ldr	r3, [pc, #204]	; (10009a3c <main+0x12c>)
10009970:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
10009972:	4a33      	ldr	r2, [pc, #204]	; (10009a40 <main+0x130>)
10009974:	4b33      	ldr	r3, [pc, #204]	; (10009a44 <main+0x134>)
10009976:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
10009978:	492c      	ldr	r1, [pc, #176]	; (10009a2c <main+0x11c>)
1000997a:	aa04      	add	r2, sp, #16
1000997c:	4b2c      	ldr	r3, [pc, #176]	; (10009a30 <main+0x120>)
1000997e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
10009980:	4d31      	ldr	r5, [pc, #196]	; (10009a48 <main+0x138>)
10009982:	682b      	ldr	r3, [r5, #0]
10009984:	6898      	ldr	r0, [r3, #8]
10009986:	2100      	movs	r1, #0
10009988:	4c30      	ldr	r4, [pc, #192]	; (10009a4c <main+0x13c>)
1000998a:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000998c:	682b      	ldr	r3, [r5, #0]
1000998e:	6858      	ldr	r0, [r3, #4]
10009990:	2100      	movs	r1, #0
10009992:	47a0      	blx	r4
}

static void configure_timer(void)
{
	struct timer_config config_timer;
	timer_get_config_defaults(&config_timer);
10009994:	a804      	add	r0, sp, #16
10009996:	4b2e      	ldr	r3, [pc, #184]	; (10009a50 <main+0x140>)
10009998:	4798      	blx	r3
	config_timer.reload_value = CONF_TIMER_RELOAD_VALUE;
1000999a:	4b2e      	ldr	r3, [pc, #184]	; (10009a54 <main+0x144>)
1000999c:	9304      	str	r3, [sp, #16]
	timer_init(&config_timer);
1000999e:	a804      	add	r0, sp, #16
100099a0:	4b2d      	ldr	r3, [pc, #180]	; (10009a58 <main+0x148>)
100099a2:	4798      	blx	r3
	timer_enable();
100099a4:	4b2d      	ldr	r3, [pc, #180]	; (10009a5c <main+0x14c>)
100099a6:	4798      	blx	r3
}

static void configure_timer_callback(void)
{
	timer_register_callback(timer_callback);
100099a8:	482d      	ldr	r0, [pc, #180]	; (10009a60 <main+0x150>)
100099aa:	4b2e      	ldr	r3, [pc, #184]	; (10009a64 <main+0x154>)
100099ac:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100099ae:	2280      	movs	r2, #128	; 0x80
100099b0:	04d2      	lsls	r2, r2, #19
100099b2:	4b2d      	ldr	r3, [pc, #180]	; (10009a68 <main+0x158>)
100099b4:	601a      	str	r2, [r3, #0]
	
	configure_timer();
	
	configure_timer_callback();
	
	i2c_init_sentral();
100099b6:	4b2d      	ldr	r3, [pc, #180]	; (10009a6c <main+0x15c>)
100099b8:	4798      	blx	r3
	
	init_sentral();
100099ba:	4b2d      	ldr	r3, [pc, #180]	; (10009a70 <main+0x160>)
100099bc:	4798      	blx	r3
	
	while (true)
	{
		if(task_1 > 100)
100099be:	4c2d      	ldr	r4, [pc, #180]	; (10009a74 <main+0x164>)
		{
			gpio_pin_toggle_output_level(LED_0_PIN);
100099c0:	4f2d      	ldr	r7, [pc, #180]	; (10009a78 <main+0x168>)
			task_1 = 0;
100099c2:	1c26      	adds	r6, r4, #0
	
	init_sentral();
	
	while (true)
	{
		if(task_1 > 100)
100099c4:	6823      	ldr	r3, [r4, #0]
100099c6:	2b64      	cmp	r3, #100	; 0x64
100099c8:	d903      	bls.n	100099d2 <main+0xc2>
		{
			gpio_pin_toggle_output_level(LED_0_PIN);
100099ca:	2016      	movs	r0, #22
100099cc:	47b8      	blx	r7
			task_1 = 0;
100099ce:	2300      	movs	r3, #0
100099d0:	6033      	str	r3, [r6, #0]
		}
		if(task_2 > 10)
100099d2:	4b2a      	ldr	r3, [pc, #168]	; (10009a7c <main+0x16c>)
100099d4:	681b      	ldr	r3, [r3, #0]
100099d6:	2b0a      	cmp	r3, #10
100099d8:	d9f4      	bls.n	100099c4 <main+0xb4>
		{
			readAccGryoData(&dataAccGyro);
100099da:	4d29      	ldr	r5, [pc, #164]	; (10009a80 <main+0x170>)
100099dc:	1c28      	adds	r0, r5, #0
100099de:	4b29      	ldr	r3, [pc, #164]	; (10009a84 <main+0x174>)
100099e0:	4798      	blx	r3
			printf("%d:%d:%d:%d:%d:%d:%d\n\r",(int16_t)dataAccGyro[0],(int16_t)dataAccGyro[1],(int16_t)dataAccGyro[2],(uint16_t)dataAccGyro[3],(int16_t)dataAccGyro[4],(int16_t)dataAccGyro[5],(int16_t)dataAccGyro[6]);
100099e2:	2300      	movs	r3, #0
100099e4:	5ee9      	ldrsh	r1, [r5, r3]
100099e6:	2302      	movs	r3, #2
100099e8:	5eea      	ldrsh	r2, [r5, r3]
100099ea:	2004      	movs	r0, #4
100099ec:	5e2b      	ldrsh	r3, [r5, r0]
100099ee:	469c      	mov	ip, r3
100099f0:	88e8      	ldrh	r0, [r5, #6]
100099f2:	9000      	str	r0, [sp, #0]
100099f4:	2308      	movs	r3, #8
100099f6:	5ee8      	ldrsh	r0, [r5, r3]
100099f8:	9001      	str	r0, [sp, #4]
100099fa:	230a      	movs	r3, #10
100099fc:	5ee8      	ldrsh	r0, [r5, r3]
100099fe:	9002      	str	r0, [sp, #8]
10009a00:	230c      	movs	r3, #12
10009a02:	5ee8      	ldrsh	r0, [r5, r3]
10009a04:	9003      	str	r0, [sp, #12]
10009a06:	4820      	ldr	r0, [pc, #128]	; (10009a88 <main+0x178>)
10009a08:	4663      	mov	r3, ip
10009a0a:	4d20      	ldr	r5, [pc, #128]	; (10009a8c <main+0x17c>)
10009a0c:	47a8      	blx	r5
// 			gcvt(acc_mag_filter,5,temp_acc_mag);
// 			gcvt(stationary, 2, temp_stationary);
// 			
// 			printf("%s:%s:%s:%s:%s:%s:%s:%s\n\r", temp_acc_mag,temp_stationary,temp_vel_x,temp_vel_y,temp_vel_z,temp_pos_x,temp_pos_y,temp_pos_z);
			
			task_2 = 0;
10009a0e:	2200      	movs	r2, #0
10009a10:	4b1a      	ldr	r3, [pc, #104]	; (10009a7c <main+0x16c>)
10009a12:	601a      	str	r2, [r3, #0]
10009a14:	e7d6      	b.n	100099c4 <main+0xb4>
10009a16:	46c0      	nop			; (mov r8, r8)
10009a18:	10008b5d 	.word	0x10008b5d
10009a1c:	100087d9 	.word	0x100087d9
10009a20:	100087e9 	.word	0x100087e9
10009a24:	100095e9 	.word	0x100095e9
10009a28:	1000af34 	.word	0x1000af34
10009a2c:	40004000 	.word	0x40004000
10009a30:	10009615 	.word	0x10009615
10009a34:	1000aee8 	.word	0x1000aee8
10009a38:	10009875 	.word	0x10009875
10009a3c:	1000aee4 	.word	0x1000aee4
10009a40:	1000985d 	.word	0x1000985d
10009a44:	1000aee0 	.word	0x1000aee0
10009a48:	1000ae7c 	.word	0x1000ae7c
10009a4c:	10009c45 	.word	0x10009c45
10009a50:	100086a9 	.word	0x100086a9
10009a54:	00006590 	.word	0x00006590
10009a58:	10008709 	.word	0x10008709
10009a5c:	100086ed 	.word	0x100086ed
10009a60:	10009835 	.word	0x10009835
10009a64:	100086fd 	.word	0x100086fd
10009a68:	e000e100 	.word	0xe000e100
10009a6c:	100080e9 	.word	0x100080e9
10009a70:	10008279 	.word	0x10008279
10009a74:	1000aea8 	.word	0x1000aea8
10009a78:	100089b1 	.word	0x100089b1
10009a7c:	1000aeac 	.word	0x1000aeac
10009a80:	1000af74 	.word	0x1000af74
10009a84:	1000988d 	.word	0x1000988d
10009a88:	1000ad48 	.word	0x1000ad48
10009a8c:	10009c11 	.word	0x10009c11

10009a90 <__aeabi_uidiv>:
10009a90:	2200      	movs	r2, #0
10009a92:	0843      	lsrs	r3, r0, #1
10009a94:	428b      	cmp	r3, r1
10009a96:	d374      	bcc.n	10009b82 <__aeabi_uidiv+0xf2>
10009a98:	0903      	lsrs	r3, r0, #4
10009a9a:	428b      	cmp	r3, r1
10009a9c:	d35f      	bcc.n	10009b5e <__aeabi_uidiv+0xce>
10009a9e:	0a03      	lsrs	r3, r0, #8
10009aa0:	428b      	cmp	r3, r1
10009aa2:	d344      	bcc.n	10009b2e <__aeabi_uidiv+0x9e>
10009aa4:	0b03      	lsrs	r3, r0, #12
10009aa6:	428b      	cmp	r3, r1
10009aa8:	d328      	bcc.n	10009afc <__aeabi_uidiv+0x6c>
10009aaa:	0c03      	lsrs	r3, r0, #16
10009aac:	428b      	cmp	r3, r1
10009aae:	d30d      	bcc.n	10009acc <__aeabi_uidiv+0x3c>
10009ab0:	22ff      	movs	r2, #255	; 0xff
10009ab2:	0209      	lsls	r1, r1, #8
10009ab4:	ba12      	rev	r2, r2
10009ab6:	0c03      	lsrs	r3, r0, #16
10009ab8:	428b      	cmp	r3, r1
10009aba:	d302      	bcc.n	10009ac2 <__aeabi_uidiv+0x32>
10009abc:	1212      	asrs	r2, r2, #8
10009abe:	0209      	lsls	r1, r1, #8
10009ac0:	d065      	beq.n	10009b8e <__aeabi_uidiv+0xfe>
10009ac2:	0b03      	lsrs	r3, r0, #12
10009ac4:	428b      	cmp	r3, r1
10009ac6:	d319      	bcc.n	10009afc <__aeabi_uidiv+0x6c>
10009ac8:	e000      	b.n	10009acc <__aeabi_uidiv+0x3c>
10009aca:	0a09      	lsrs	r1, r1, #8
10009acc:	0bc3      	lsrs	r3, r0, #15
10009ace:	428b      	cmp	r3, r1
10009ad0:	d301      	bcc.n	10009ad6 <__aeabi_uidiv+0x46>
10009ad2:	03cb      	lsls	r3, r1, #15
10009ad4:	1ac0      	subs	r0, r0, r3
10009ad6:	4152      	adcs	r2, r2
10009ad8:	0b83      	lsrs	r3, r0, #14
10009ada:	428b      	cmp	r3, r1
10009adc:	d301      	bcc.n	10009ae2 <__aeabi_uidiv+0x52>
10009ade:	038b      	lsls	r3, r1, #14
10009ae0:	1ac0      	subs	r0, r0, r3
10009ae2:	4152      	adcs	r2, r2
10009ae4:	0b43      	lsrs	r3, r0, #13
10009ae6:	428b      	cmp	r3, r1
10009ae8:	d301      	bcc.n	10009aee <__aeabi_uidiv+0x5e>
10009aea:	034b      	lsls	r3, r1, #13
10009aec:	1ac0      	subs	r0, r0, r3
10009aee:	4152      	adcs	r2, r2
10009af0:	0b03      	lsrs	r3, r0, #12
10009af2:	428b      	cmp	r3, r1
10009af4:	d301      	bcc.n	10009afa <__aeabi_uidiv+0x6a>
10009af6:	030b      	lsls	r3, r1, #12
10009af8:	1ac0      	subs	r0, r0, r3
10009afa:	4152      	adcs	r2, r2
10009afc:	0ac3      	lsrs	r3, r0, #11
10009afe:	428b      	cmp	r3, r1
10009b00:	d301      	bcc.n	10009b06 <__aeabi_uidiv+0x76>
10009b02:	02cb      	lsls	r3, r1, #11
10009b04:	1ac0      	subs	r0, r0, r3
10009b06:	4152      	adcs	r2, r2
10009b08:	0a83      	lsrs	r3, r0, #10
10009b0a:	428b      	cmp	r3, r1
10009b0c:	d301      	bcc.n	10009b12 <__aeabi_uidiv+0x82>
10009b0e:	028b      	lsls	r3, r1, #10
10009b10:	1ac0      	subs	r0, r0, r3
10009b12:	4152      	adcs	r2, r2
10009b14:	0a43      	lsrs	r3, r0, #9
10009b16:	428b      	cmp	r3, r1
10009b18:	d301      	bcc.n	10009b1e <__aeabi_uidiv+0x8e>
10009b1a:	024b      	lsls	r3, r1, #9
10009b1c:	1ac0      	subs	r0, r0, r3
10009b1e:	4152      	adcs	r2, r2
10009b20:	0a03      	lsrs	r3, r0, #8
10009b22:	428b      	cmp	r3, r1
10009b24:	d301      	bcc.n	10009b2a <__aeabi_uidiv+0x9a>
10009b26:	020b      	lsls	r3, r1, #8
10009b28:	1ac0      	subs	r0, r0, r3
10009b2a:	4152      	adcs	r2, r2
10009b2c:	d2cd      	bcs.n	10009aca <__aeabi_uidiv+0x3a>
10009b2e:	09c3      	lsrs	r3, r0, #7
10009b30:	428b      	cmp	r3, r1
10009b32:	d301      	bcc.n	10009b38 <__aeabi_uidiv+0xa8>
10009b34:	01cb      	lsls	r3, r1, #7
10009b36:	1ac0      	subs	r0, r0, r3
10009b38:	4152      	adcs	r2, r2
10009b3a:	0983      	lsrs	r3, r0, #6
10009b3c:	428b      	cmp	r3, r1
10009b3e:	d301      	bcc.n	10009b44 <__aeabi_uidiv+0xb4>
10009b40:	018b      	lsls	r3, r1, #6
10009b42:	1ac0      	subs	r0, r0, r3
10009b44:	4152      	adcs	r2, r2
10009b46:	0943      	lsrs	r3, r0, #5
10009b48:	428b      	cmp	r3, r1
10009b4a:	d301      	bcc.n	10009b50 <__aeabi_uidiv+0xc0>
10009b4c:	014b      	lsls	r3, r1, #5
10009b4e:	1ac0      	subs	r0, r0, r3
10009b50:	4152      	adcs	r2, r2
10009b52:	0903      	lsrs	r3, r0, #4
10009b54:	428b      	cmp	r3, r1
10009b56:	d301      	bcc.n	10009b5c <__aeabi_uidiv+0xcc>
10009b58:	010b      	lsls	r3, r1, #4
10009b5a:	1ac0      	subs	r0, r0, r3
10009b5c:	4152      	adcs	r2, r2
10009b5e:	08c3      	lsrs	r3, r0, #3
10009b60:	428b      	cmp	r3, r1
10009b62:	d301      	bcc.n	10009b68 <__aeabi_uidiv+0xd8>
10009b64:	00cb      	lsls	r3, r1, #3
10009b66:	1ac0      	subs	r0, r0, r3
10009b68:	4152      	adcs	r2, r2
10009b6a:	0883      	lsrs	r3, r0, #2
10009b6c:	428b      	cmp	r3, r1
10009b6e:	d301      	bcc.n	10009b74 <__aeabi_uidiv+0xe4>
10009b70:	008b      	lsls	r3, r1, #2
10009b72:	1ac0      	subs	r0, r0, r3
10009b74:	4152      	adcs	r2, r2
10009b76:	0843      	lsrs	r3, r0, #1
10009b78:	428b      	cmp	r3, r1
10009b7a:	d301      	bcc.n	10009b80 <__aeabi_uidiv+0xf0>
10009b7c:	004b      	lsls	r3, r1, #1
10009b7e:	1ac0      	subs	r0, r0, r3
10009b80:	4152      	adcs	r2, r2
10009b82:	1a41      	subs	r1, r0, r1
10009b84:	d200      	bcs.n	10009b88 <__aeabi_uidiv+0xf8>
10009b86:	4601      	mov	r1, r0
10009b88:	4152      	adcs	r2, r2
10009b8a:	4610      	mov	r0, r2
10009b8c:	4770      	bx	lr
10009b8e:	e7ff      	b.n	10009b90 <__aeabi_uidiv+0x100>
10009b90:	b501      	push	{r0, lr}
10009b92:	2000      	movs	r0, #0
10009b94:	f000 f80c 	bl	10009bb0 <__aeabi_idiv0>
10009b98:	bd02      	pop	{r1, pc}
10009b9a:	46c0      	nop			; (mov r8, r8)

10009b9c <__aeabi_uidivmod>:
10009b9c:	2900      	cmp	r1, #0
10009b9e:	d0f7      	beq.n	10009b90 <__aeabi_uidiv+0x100>
10009ba0:	b503      	push	{r0, r1, lr}
10009ba2:	f7ff ff75 	bl	10009a90 <__aeabi_uidiv>
10009ba6:	bc0e      	pop	{r1, r2, r3}
10009ba8:	4342      	muls	r2, r0
10009baa:	1a89      	subs	r1, r1, r2
10009bac:	4718      	bx	r3
10009bae:	46c0      	nop			; (mov r8, r8)

10009bb0 <__aeabi_idiv0>:
10009bb0:	4770      	bx	lr
10009bb2:	46c0      	nop			; (mov r8, r8)

10009bb4 <__libc_init_array>:
10009bb4:	4b0e      	ldr	r3, [pc, #56]	; (10009bf0 <__libc_init_array+0x3c>)
10009bb6:	b570      	push	{r4, r5, r6, lr}
10009bb8:	2500      	movs	r5, #0
10009bba:	1c1e      	adds	r6, r3, #0
10009bbc:	4c0d      	ldr	r4, [pc, #52]	; (10009bf4 <__libc_init_array+0x40>)
10009bbe:	1ae4      	subs	r4, r4, r3
10009bc0:	10a4      	asrs	r4, r4, #2
10009bc2:	42a5      	cmp	r5, r4
10009bc4:	d004      	beq.n	10009bd0 <__libc_init_array+0x1c>
10009bc6:	00ab      	lsls	r3, r5, #2
10009bc8:	58f3      	ldr	r3, [r6, r3]
10009bca:	4798      	blx	r3
10009bcc:	3501      	adds	r5, #1
10009bce:	e7f8      	b.n	10009bc2 <__libc_init_array+0xe>
10009bd0:	f001 f914 	bl	1000adfc <_init>
10009bd4:	4b08      	ldr	r3, [pc, #32]	; (10009bf8 <__libc_init_array+0x44>)
10009bd6:	2500      	movs	r5, #0
10009bd8:	1c1e      	adds	r6, r3, #0
10009bda:	4c08      	ldr	r4, [pc, #32]	; (10009bfc <__libc_init_array+0x48>)
10009bdc:	1ae4      	subs	r4, r4, r3
10009bde:	10a4      	asrs	r4, r4, #2
10009be0:	42a5      	cmp	r5, r4
10009be2:	d004      	beq.n	10009bee <__libc_init_array+0x3a>
10009be4:	00ab      	lsls	r3, r5, #2
10009be6:	58f3      	ldr	r3, [r6, r3]
10009be8:	4798      	blx	r3
10009bea:	3501      	adds	r5, #1
10009bec:	e7f8      	b.n	10009be0 <__libc_init_array+0x2c>
10009bee:	bd70      	pop	{r4, r5, r6, pc}
10009bf0:	1000ae08 	.word	0x1000ae08
10009bf4:	1000ae08 	.word	0x1000ae08
10009bf8:	1000ae08 	.word	0x1000ae08
10009bfc:	1000ae0c 	.word	0x1000ae0c

10009c00 <memset>:
10009c00:	1c03      	adds	r3, r0, #0
10009c02:	1882      	adds	r2, r0, r2
10009c04:	4293      	cmp	r3, r2
10009c06:	d002      	beq.n	10009c0e <memset+0xe>
10009c08:	7019      	strb	r1, [r3, #0]
10009c0a:	3301      	adds	r3, #1
10009c0c:	e7fa      	b.n	10009c04 <memset+0x4>
10009c0e:	4770      	bx	lr

10009c10 <iprintf>:
10009c10:	b40f      	push	{r0, r1, r2, r3}
10009c12:	4b0b      	ldr	r3, [pc, #44]	; (10009c40 <iprintf+0x30>)
10009c14:	b513      	push	{r0, r1, r4, lr}
10009c16:	681c      	ldr	r4, [r3, #0]
10009c18:	2c00      	cmp	r4, #0
10009c1a:	d005      	beq.n	10009c28 <iprintf+0x18>
10009c1c:	69a3      	ldr	r3, [r4, #24]
10009c1e:	2b00      	cmp	r3, #0
10009c20:	d102      	bne.n	10009c28 <iprintf+0x18>
10009c22:	1c20      	adds	r0, r4, #0
10009c24:	f000 f996 	bl	10009f54 <__sinit>
10009c28:	ab05      	add	r3, sp, #20
10009c2a:	1c20      	adds	r0, r4, #0
10009c2c:	68a1      	ldr	r1, [r4, #8]
10009c2e:	9a04      	ldr	r2, [sp, #16]
10009c30:	9301      	str	r3, [sp, #4]
10009c32:	f000 faf1 	bl	1000a218 <_vfiprintf_r>
10009c36:	bc16      	pop	{r1, r2, r4}
10009c38:	bc08      	pop	{r3}
10009c3a:	b004      	add	sp, #16
10009c3c:	4718      	bx	r3
10009c3e:	46c0      	nop			; (mov r8, r8)
10009c40:	1000ae7c 	.word	0x1000ae7c

10009c44 <setbuf>:
10009c44:	b508      	push	{r3, lr}
10009c46:	424a      	negs	r2, r1
10009c48:	414a      	adcs	r2, r1
10009c4a:	2380      	movs	r3, #128	; 0x80
10009c4c:	0052      	lsls	r2, r2, #1
10009c4e:	00db      	lsls	r3, r3, #3
10009c50:	f000 f802 	bl	10009c58 <setvbuf>
10009c54:	bd08      	pop	{r3, pc}
	...

10009c58 <setvbuf>:
10009c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10009c5a:	1c1e      	adds	r6, r3, #0
10009c5c:	4b3c      	ldr	r3, [pc, #240]	; (10009d50 <setvbuf+0xf8>)
10009c5e:	1c04      	adds	r4, r0, #0
10009c60:	681d      	ldr	r5, [r3, #0]
10009c62:	1c0f      	adds	r7, r1, #0
10009c64:	9201      	str	r2, [sp, #4]
10009c66:	2d00      	cmp	r5, #0
10009c68:	d005      	beq.n	10009c76 <setvbuf+0x1e>
10009c6a:	69ab      	ldr	r3, [r5, #24]
10009c6c:	2b00      	cmp	r3, #0
10009c6e:	d102      	bne.n	10009c76 <setvbuf+0x1e>
10009c70:	1c28      	adds	r0, r5, #0
10009c72:	f000 f96f 	bl	10009f54 <__sinit>
10009c76:	4b37      	ldr	r3, [pc, #220]	; (10009d54 <setvbuf+0xfc>)
10009c78:	429c      	cmp	r4, r3
10009c7a:	d101      	bne.n	10009c80 <setvbuf+0x28>
10009c7c:	686c      	ldr	r4, [r5, #4]
10009c7e:	e008      	b.n	10009c92 <setvbuf+0x3a>
10009c80:	4b35      	ldr	r3, [pc, #212]	; (10009d58 <setvbuf+0x100>)
10009c82:	429c      	cmp	r4, r3
10009c84:	d101      	bne.n	10009c8a <setvbuf+0x32>
10009c86:	68ac      	ldr	r4, [r5, #8]
10009c88:	e003      	b.n	10009c92 <setvbuf+0x3a>
10009c8a:	4b34      	ldr	r3, [pc, #208]	; (10009d5c <setvbuf+0x104>)
10009c8c:	429c      	cmp	r4, r3
10009c8e:	d100      	bne.n	10009c92 <setvbuf+0x3a>
10009c90:	68ec      	ldr	r4, [r5, #12]
10009c92:	9b01      	ldr	r3, [sp, #4]
10009c94:	2b02      	cmp	r3, #2
10009c96:	d858      	bhi.n	10009d4a <setvbuf+0xf2>
10009c98:	2e00      	cmp	r6, #0
10009c9a:	db56      	blt.n	10009d4a <setvbuf+0xf2>
10009c9c:	1c28      	adds	r0, r5, #0
10009c9e:	1c21      	adds	r1, r4, #0
10009ca0:	f000 f8ea 	bl	10009e78 <_fflush_r>
10009ca4:	2300      	movs	r3, #0
10009ca6:	6063      	str	r3, [r4, #4]
10009ca8:	61a3      	str	r3, [r4, #24]
10009caa:	89a3      	ldrh	r3, [r4, #12]
10009cac:	061b      	lsls	r3, r3, #24
10009cae:	d503      	bpl.n	10009cb8 <setvbuf+0x60>
10009cb0:	1c28      	adds	r0, r5, #0
10009cb2:	6921      	ldr	r1, [r4, #16]
10009cb4:	f000 f9ea 	bl	1000a08c <_free_r>
10009cb8:	2283      	movs	r2, #131	; 0x83
10009cba:	89a3      	ldrh	r3, [r4, #12]
10009cbc:	4393      	bics	r3, r2
10009cbe:	81a3      	strh	r3, [r4, #12]
10009cc0:	9b01      	ldr	r3, [sp, #4]
10009cc2:	2b02      	cmp	r3, #2
10009cc4:	d013      	beq.n	10009cee <setvbuf+0x96>
10009cc6:	2f00      	cmp	r7, #0
10009cc8:	d125      	bne.n	10009d16 <setvbuf+0xbe>
10009cca:	2e00      	cmp	r6, #0
10009ccc:	d101      	bne.n	10009cd2 <setvbuf+0x7a>
10009cce:	2680      	movs	r6, #128	; 0x80
10009cd0:	00f6      	lsls	r6, r6, #3
10009cd2:	1c30      	adds	r0, r6, #0
10009cd4:	f000 f9d0 	bl	1000a078 <malloc>
10009cd8:	1e07      	subs	r7, r0, #0
10009cda:	d118      	bne.n	10009d0e <setvbuf+0xb6>
10009cdc:	2080      	movs	r0, #128	; 0x80
10009cde:	00c0      	lsls	r0, r0, #3
10009ce0:	f000 f9ca 	bl	1000a078 <malloc>
10009ce4:	1e07      	subs	r7, r0, #0
10009ce6:	d110      	bne.n	10009d0a <setvbuf+0xb2>
10009ce8:	2001      	movs	r0, #1
10009cea:	4240      	negs	r0, r0
10009cec:	e000      	b.n	10009cf0 <setvbuf+0x98>
10009cee:	2000      	movs	r0, #0
10009cf0:	2202      	movs	r2, #2
10009cf2:	89a3      	ldrh	r3, [r4, #12]
10009cf4:	4313      	orrs	r3, r2
10009cf6:	81a3      	strh	r3, [r4, #12]
10009cf8:	2300      	movs	r3, #0
10009cfa:	60a3      	str	r3, [r4, #8]
10009cfc:	1c23      	adds	r3, r4, #0
10009cfe:	3347      	adds	r3, #71	; 0x47
10009d00:	6023      	str	r3, [r4, #0]
10009d02:	6123      	str	r3, [r4, #16]
10009d04:	2301      	movs	r3, #1
10009d06:	6163      	str	r3, [r4, #20]
10009d08:	e021      	b.n	10009d4e <setvbuf+0xf6>
10009d0a:	2680      	movs	r6, #128	; 0x80
10009d0c:	00f6      	lsls	r6, r6, #3
10009d0e:	2280      	movs	r2, #128	; 0x80
10009d10:	89a3      	ldrh	r3, [r4, #12]
10009d12:	4313      	orrs	r3, r2
10009d14:	81a3      	strh	r3, [r4, #12]
10009d16:	9b01      	ldr	r3, [sp, #4]
10009d18:	2b01      	cmp	r3, #1
10009d1a:	d105      	bne.n	10009d28 <setvbuf+0xd0>
10009d1c:	89a3      	ldrh	r3, [r4, #12]
10009d1e:	9a01      	ldr	r2, [sp, #4]
10009d20:	431a      	orrs	r2, r3
10009d22:	4273      	negs	r3, r6
10009d24:	81a2      	strh	r2, [r4, #12]
10009d26:	61a3      	str	r3, [r4, #24]
10009d28:	4b0d      	ldr	r3, [pc, #52]	; (10009d60 <setvbuf+0x108>)
10009d2a:	2000      	movs	r0, #0
10009d2c:	62ab      	str	r3, [r5, #40]	; 0x28
10009d2e:	89a2      	ldrh	r2, [r4, #12]
10009d30:	6027      	str	r7, [r4, #0]
10009d32:	6127      	str	r7, [r4, #16]
10009d34:	6166      	str	r6, [r4, #20]
10009d36:	0713      	lsls	r3, r2, #28
10009d38:	d509      	bpl.n	10009d4e <setvbuf+0xf6>
10009d3a:	2303      	movs	r3, #3
10009d3c:	401a      	ands	r2, r3
10009d3e:	4253      	negs	r3, r2
10009d40:	4153      	adcs	r3, r2
10009d42:	425b      	negs	r3, r3
10009d44:	401e      	ands	r6, r3
10009d46:	60a6      	str	r6, [r4, #8]
10009d48:	e001      	b.n	10009d4e <setvbuf+0xf6>
10009d4a:	2001      	movs	r0, #1
10009d4c:	4240      	negs	r0, r0
10009d4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10009d50:	1000ae7c 	.word	0x1000ae7c
10009d54:	1000ad68 	.word	0x1000ad68
10009d58:	1000ad88 	.word	0x1000ad88
10009d5c:	1000ada8 	.word	0x1000ada8
10009d60:	10009ed1 	.word	0x10009ed1

10009d64 <__sflush_r>:
10009d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10009d66:	898a      	ldrh	r2, [r1, #12]
10009d68:	1c05      	adds	r5, r0, #0
10009d6a:	1c0c      	adds	r4, r1, #0
10009d6c:	0713      	lsls	r3, r2, #28
10009d6e:	d45e      	bmi.n	10009e2e <__sflush_r+0xca>
10009d70:	684b      	ldr	r3, [r1, #4]
10009d72:	2b00      	cmp	r3, #0
10009d74:	dc02      	bgt.n	10009d7c <__sflush_r+0x18>
10009d76:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10009d78:	2b00      	cmp	r3, #0
10009d7a:	dd1a      	ble.n	10009db2 <__sflush_r+0x4e>
10009d7c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10009d7e:	2f00      	cmp	r7, #0
10009d80:	d017      	beq.n	10009db2 <__sflush_r+0x4e>
10009d82:	2300      	movs	r3, #0
10009d84:	682e      	ldr	r6, [r5, #0]
10009d86:	602b      	str	r3, [r5, #0]
10009d88:	2380      	movs	r3, #128	; 0x80
10009d8a:	015b      	lsls	r3, r3, #5
10009d8c:	401a      	ands	r2, r3
10009d8e:	d001      	beq.n	10009d94 <__sflush_r+0x30>
10009d90:	6d62      	ldr	r2, [r4, #84]	; 0x54
10009d92:	e015      	b.n	10009dc0 <__sflush_r+0x5c>
10009d94:	1c28      	adds	r0, r5, #0
10009d96:	6a21      	ldr	r1, [r4, #32]
10009d98:	2301      	movs	r3, #1
10009d9a:	47b8      	blx	r7
10009d9c:	1c02      	adds	r2, r0, #0
10009d9e:	1c43      	adds	r3, r0, #1
10009da0:	d10e      	bne.n	10009dc0 <__sflush_r+0x5c>
10009da2:	682b      	ldr	r3, [r5, #0]
10009da4:	2b00      	cmp	r3, #0
10009da6:	d00b      	beq.n	10009dc0 <__sflush_r+0x5c>
10009da8:	2b1d      	cmp	r3, #29
10009daa:	d001      	beq.n	10009db0 <__sflush_r+0x4c>
10009dac:	2b16      	cmp	r3, #22
10009dae:	d102      	bne.n	10009db6 <__sflush_r+0x52>
10009db0:	602e      	str	r6, [r5, #0]
10009db2:	2000      	movs	r0, #0
10009db4:	e05e      	b.n	10009e74 <__sflush_r+0x110>
10009db6:	2140      	movs	r1, #64	; 0x40
10009db8:	89a3      	ldrh	r3, [r4, #12]
10009dba:	430b      	orrs	r3, r1
10009dbc:	81a3      	strh	r3, [r4, #12]
10009dbe:	e059      	b.n	10009e74 <__sflush_r+0x110>
10009dc0:	89a3      	ldrh	r3, [r4, #12]
10009dc2:	075b      	lsls	r3, r3, #29
10009dc4:	d506      	bpl.n	10009dd4 <__sflush_r+0x70>
10009dc6:	6863      	ldr	r3, [r4, #4]
10009dc8:	1ad2      	subs	r2, r2, r3
10009dca:	6b63      	ldr	r3, [r4, #52]	; 0x34
10009dcc:	2b00      	cmp	r3, #0
10009dce:	d001      	beq.n	10009dd4 <__sflush_r+0x70>
10009dd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
10009dd2:	1ad2      	subs	r2, r2, r3
10009dd4:	2300      	movs	r3, #0
10009dd6:	1c28      	adds	r0, r5, #0
10009dd8:	6a21      	ldr	r1, [r4, #32]
10009dda:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10009ddc:	47b8      	blx	r7
10009dde:	89a3      	ldrh	r3, [r4, #12]
10009de0:	1c42      	adds	r2, r0, #1
10009de2:	d106      	bne.n	10009df2 <__sflush_r+0x8e>
10009de4:	682a      	ldr	r2, [r5, #0]
10009de6:	2a00      	cmp	r2, #0
10009de8:	d003      	beq.n	10009df2 <__sflush_r+0x8e>
10009dea:	2a1d      	cmp	r2, #29
10009dec:	d001      	beq.n	10009df2 <__sflush_r+0x8e>
10009dee:	2a16      	cmp	r2, #22
10009df0:	d119      	bne.n	10009e26 <__sflush_r+0xc2>
10009df2:	2200      	movs	r2, #0
10009df4:	6062      	str	r2, [r4, #4]
10009df6:	6922      	ldr	r2, [r4, #16]
10009df8:	6022      	str	r2, [r4, #0]
10009dfa:	04db      	lsls	r3, r3, #19
10009dfc:	d505      	bpl.n	10009e0a <__sflush_r+0xa6>
10009dfe:	1c43      	adds	r3, r0, #1
10009e00:	d102      	bne.n	10009e08 <__sflush_r+0xa4>
10009e02:	682b      	ldr	r3, [r5, #0]
10009e04:	2b00      	cmp	r3, #0
10009e06:	d100      	bne.n	10009e0a <__sflush_r+0xa6>
10009e08:	6560      	str	r0, [r4, #84]	; 0x54
10009e0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
10009e0c:	602e      	str	r6, [r5, #0]
10009e0e:	2900      	cmp	r1, #0
10009e10:	d0cf      	beq.n	10009db2 <__sflush_r+0x4e>
10009e12:	1c23      	adds	r3, r4, #0
10009e14:	3344      	adds	r3, #68	; 0x44
10009e16:	4299      	cmp	r1, r3
10009e18:	d002      	beq.n	10009e20 <__sflush_r+0xbc>
10009e1a:	1c28      	adds	r0, r5, #0
10009e1c:	f000 f936 	bl	1000a08c <_free_r>
10009e20:	2000      	movs	r0, #0
10009e22:	6360      	str	r0, [r4, #52]	; 0x34
10009e24:	e026      	b.n	10009e74 <__sflush_r+0x110>
10009e26:	2240      	movs	r2, #64	; 0x40
10009e28:	4313      	orrs	r3, r2
10009e2a:	81a3      	strh	r3, [r4, #12]
10009e2c:	e022      	b.n	10009e74 <__sflush_r+0x110>
10009e2e:	690f      	ldr	r7, [r1, #16]
10009e30:	2f00      	cmp	r7, #0
10009e32:	d0be      	beq.n	10009db2 <__sflush_r+0x4e>
10009e34:	680b      	ldr	r3, [r1, #0]
10009e36:	600f      	str	r7, [r1, #0]
10009e38:	1bdb      	subs	r3, r3, r7
10009e3a:	9301      	str	r3, [sp, #4]
10009e3c:	2300      	movs	r3, #0
10009e3e:	0792      	lsls	r2, r2, #30
10009e40:	d100      	bne.n	10009e44 <__sflush_r+0xe0>
10009e42:	694b      	ldr	r3, [r1, #20]
10009e44:	60a3      	str	r3, [r4, #8]
10009e46:	9b01      	ldr	r3, [sp, #4]
10009e48:	2b00      	cmp	r3, #0
10009e4a:	ddb2      	ble.n	10009db2 <__sflush_r+0x4e>
10009e4c:	1c28      	adds	r0, r5, #0
10009e4e:	6a21      	ldr	r1, [r4, #32]
10009e50:	1c3a      	adds	r2, r7, #0
10009e52:	9b01      	ldr	r3, [sp, #4]
10009e54:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10009e56:	47b0      	blx	r6
10009e58:	2800      	cmp	r0, #0
10009e5a:	dc06      	bgt.n	10009e6a <__sflush_r+0x106>
10009e5c:	2240      	movs	r2, #64	; 0x40
10009e5e:	2001      	movs	r0, #1
10009e60:	89a3      	ldrh	r3, [r4, #12]
10009e62:	4240      	negs	r0, r0
10009e64:	4313      	orrs	r3, r2
10009e66:	81a3      	strh	r3, [r4, #12]
10009e68:	e004      	b.n	10009e74 <__sflush_r+0x110>
10009e6a:	9b01      	ldr	r3, [sp, #4]
10009e6c:	183f      	adds	r7, r7, r0
10009e6e:	1a1b      	subs	r3, r3, r0
10009e70:	9301      	str	r3, [sp, #4]
10009e72:	e7e8      	b.n	10009e46 <__sflush_r+0xe2>
10009e74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10009e78 <_fflush_r>:
10009e78:	b538      	push	{r3, r4, r5, lr}
10009e7a:	690b      	ldr	r3, [r1, #16]
10009e7c:	1c05      	adds	r5, r0, #0
10009e7e:	1c0c      	adds	r4, r1, #0
10009e80:	2b00      	cmp	r3, #0
10009e82:	d101      	bne.n	10009e88 <_fflush_r+0x10>
10009e84:	2000      	movs	r0, #0
10009e86:	e01c      	b.n	10009ec2 <_fflush_r+0x4a>
10009e88:	2800      	cmp	r0, #0
10009e8a:	d004      	beq.n	10009e96 <_fflush_r+0x1e>
10009e8c:	6983      	ldr	r3, [r0, #24]
10009e8e:	2b00      	cmp	r3, #0
10009e90:	d101      	bne.n	10009e96 <_fflush_r+0x1e>
10009e92:	f000 f85f 	bl	10009f54 <__sinit>
10009e96:	4b0b      	ldr	r3, [pc, #44]	; (10009ec4 <_fflush_r+0x4c>)
10009e98:	429c      	cmp	r4, r3
10009e9a:	d101      	bne.n	10009ea0 <_fflush_r+0x28>
10009e9c:	686c      	ldr	r4, [r5, #4]
10009e9e:	e008      	b.n	10009eb2 <_fflush_r+0x3a>
10009ea0:	4b09      	ldr	r3, [pc, #36]	; (10009ec8 <_fflush_r+0x50>)
10009ea2:	429c      	cmp	r4, r3
10009ea4:	d101      	bne.n	10009eaa <_fflush_r+0x32>
10009ea6:	68ac      	ldr	r4, [r5, #8]
10009ea8:	e003      	b.n	10009eb2 <_fflush_r+0x3a>
10009eaa:	4b08      	ldr	r3, [pc, #32]	; (10009ecc <_fflush_r+0x54>)
10009eac:	429c      	cmp	r4, r3
10009eae:	d100      	bne.n	10009eb2 <_fflush_r+0x3a>
10009eb0:	68ec      	ldr	r4, [r5, #12]
10009eb2:	220c      	movs	r2, #12
10009eb4:	5ea3      	ldrsh	r3, [r4, r2]
10009eb6:	2b00      	cmp	r3, #0
10009eb8:	d0e4      	beq.n	10009e84 <_fflush_r+0xc>
10009eba:	1c28      	adds	r0, r5, #0
10009ebc:	1c21      	adds	r1, r4, #0
10009ebe:	f7ff ff51 	bl	10009d64 <__sflush_r>
10009ec2:	bd38      	pop	{r3, r4, r5, pc}
10009ec4:	1000ad68 	.word	0x1000ad68
10009ec8:	1000ad88 	.word	0x1000ad88
10009ecc:	1000ada8 	.word	0x1000ada8

10009ed0 <_cleanup_r>:
10009ed0:	b508      	push	{r3, lr}
10009ed2:	4902      	ldr	r1, [pc, #8]	; (10009edc <_cleanup_r+0xc>)
10009ed4:	f000 f8ae 	bl	1000a034 <_fwalk_reent>
10009ed8:	bd08      	pop	{r3, pc}
10009eda:	46c0      	nop			; (mov r8, r8)
10009edc:	10009e79 	.word	0x10009e79

10009ee0 <std.isra.0>:
10009ee0:	2300      	movs	r3, #0
10009ee2:	b510      	push	{r4, lr}
10009ee4:	1c04      	adds	r4, r0, #0
10009ee6:	6003      	str	r3, [r0, #0]
10009ee8:	6043      	str	r3, [r0, #4]
10009eea:	6083      	str	r3, [r0, #8]
10009eec:	8181      	strh	r1, [r0, #12]
10009eee:	6643      	str	r3, [r0, #100]	; 0x64
10009ef0:	81c2      	strh	r2, [r0, #14]
10009ef2:	6103      	str	r3, [r0, #16]
10009ef4:	6143      	str	r3, [r0, #20]
10009ef6:	6183      	str	r3, [r0, #24]
10009ef8:	1c19      	adds	r1, r3, #0
10009efa:	2208      	movs	r2, #8
10009efc:	305c      	adds	r0, #92	; 0x5c
10009efe:	f7ff fe7f 	bl	10009c00 <memset>
10009f02:	4b05      	ldr	r3, [pc, #20]	; (10009f18 <std.isra.0+0x38>)
10009f04:	6224      	str	r4, [r4, #32]
10009f06:	6263      	str	r3, [r4, #36]	; 0x24
10009f08:	4b04      	ldr	r3, [pc, #16]	; (10009f1c <std.isra.0+0x3c>)
10009f0a:	62a3      	str	r3, [r4, #40]	; 0x28
10009f0c:	4b04      	ldr	r3, [pc, #16]	; (10009f20 <std.isra.0+0x40>)
10009f0e:	62e3      	str	r3, [r4, #44]	; 0x2c
10009f10:	4b04      	ldr	r3, [pc, #16]	; (10009f24 <std.isra.0+0x44>)
10009f12:	6323      	str	r3, [r4, #48]	; 0x30
10009f14:	bd10      	pop	{r4, pc}
10009f16:	46c0      	nop			; (mov r8, r8)
10009f18:	1000a769 	.word	0x1000a769
10009f1c:	1000a791 	.word	0x1000a791
10009f20:	1000a7c9 	.word	0x1000a7c9
10009f24:	1000a7f5 	.word	0x1000a7f5

10009f28 <__sfmoreglue>:
10009f28:	b570      	push	{r4, r5, r6, lr}
10009f2a:	2568      	movs	r5, #104	; 0x68
10009f2c:	1e4b      	subs	r3, r1, #1
10009f2e:	435d      	muls	r5, r3
10009f30:	1c0e      	adds	r6, r1, #0
10009f32:	1c29      	adds	r1, r5, #0
10009f34:	3174      	adds	r1, #116	; 0x74
10009f36:	f000 f8ef 	bl	1000a118 <_malloc_r>
10009f3a:	1e04      	subs	r4, r0, #0
10009f3c:	d008      	beq.n	10009f50 <__sfmoreglue+0x28>
10009f3e:	2100      	movs	r1, #0
10009f40:	1c2a      	adds	r2, r5, #0
10009f42:	6001      	str	r1, [r0, #0]
10009f44:	6046      	str	r6, [r0, #4]
10009f46:	300c      	adds	r0, #12
10009f48:	60a0      	str	r0, [r4, #8]
10009f4a:	3268      	adds	r2, #104	; 0x68
10009f4c:	f7ff fe58 	bl	10009c00 <memset>
10009f50:	1c20      	adds	r0, r4, #0
10009f52:	bd70      	pop	{r4, r5, r6, pc}

10009f54 <__sinit>:
10009f54:	6983      	ldr	r3, [r0, #24]
10009f56:	b513      	push	{r0, r1, r4, lr}
10009f58:	2b00      	cmp	r3, #0
10009f5a:	d128      	bne.n	10009fae <__sinit+0x5a>
10009f5c:	6483      	str	r3, [r0, #72]	; 0x48
10009f5e:	64c3      	str	r3, [r0, #76]	; 0x4c
10009f60:	6503      	str	r3, [r0, #80]	; 0x50
10009f62:	4b13      	ldr	r3, [pc, #76]	; (10009fb0 <__sinit+0x5c>)
10009f64:	4a13      	ldr	r2, [pc, #76]	; (10009fb4 <__sinit+0x60>)
10009f66:	681b      	ldr	r3, [r3, #0]
10009f68:	6282      	str	r2, [r0, #40]	; 0x28
10009f6a:	9301      	str	r3, [sp, #4]
10009f6c:	4298      	cmp	r0, r3
10009f6e:	d101      	bne.n	10009f74 <__sinit+0x20>
10009f70:	2301      	movs	r3, #1
10009f72:	6183      	str	r3, [r0, #24]
10009f74:	1c04      	adds	r4, r0, #0
10009f76:	f000 f81f 	bl	10009fb8 <__sfp>
10009f7a:	6060      	str	r0, [r4, #4]
10009f7c:	1c20      	adds	r0, r4, #0
10009f7e:	f000 f81b 	bl	10009fb8 <__sfp>
10009f82:	60a0      	str	r0, [r4, #8]
10009f84:	1c20      	adds	r0, r4, #0
10009f86:	f000 f817 	bl	10009fb8 <__sfp>
10009f8a:	2104      	movs	r1, #4
10009f8c:	60e0      	str	r0, [r4, #12]
10009f8e:	2200      	movs	r2, #0
10009f90:	6860      	ldr	r0, [r4, #4]
10009f92:	f7ff ffa5 	bl	10009ee0 <std.isra.0>
10009f96:	68a0      	ldr	r0, [r4, #8]
10009f98:	2109      	movs	r1, #9
10009f9a:	2201      	movs	r2, #1
10009f9c:	f7ff ffa0 	bl	10009ee0 <std.isra.0>
10009fa0:	68e0      	ldr	r0, [r4, #12]
10009fa2:	2112      	movs	r1, #18
10009fa4:	2202      	movs	r2, #2
10009fa6:	f7ff ff9b 	bl	10009ee0 <std.isra.0>
10009faa:	2301      	movs	r3, #1
10009fac:	61a3      	str	r3, [r4, #24]
10009fae:	bd13      	pop	{r0, r1, r4, pc}
10009fb0:	1000ad64 	.word	0x1000ad64
10009fb4:	10009ed1 	.word	0x10009ed1

10009fb8 <__sfp>:
10009fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009fba:	4b1d      	ldr	r3, [pc, #116]	; (1000a030 <__sfp+0x78>)
10009fbc:	1c06      	adds	r6, r0, #0
10009fbe:	681d      	ldr	r5, [r3, #0]
10009fc0:	69ab      	ldr	r3, [r5, #24]
10009fc2:	2b00      	cmp	r3, #0
10009fc4:	d102      	bne.n	10009fcc <__sfp+0x14>
10009fc6:	1c28      	adds	r0, r5, #0
10009fc8:	f7ff ffc4 	bl	10009f54 <__sinit>
10009fcc:	3548      	adds	r5, #72	; 0x48
10009fce:	68ac      	ldr	r4, [r5, #8]
10009fd0:	686b      	ldr	r3, [r5, #4]
10009fd2:	3b01      	subs	r3, #1
10009fd4:	d405      	bmi.n	10009fe2 <__sfp+0x2a>
10009fd6:	220c      	movs	r2, #12
10009fd8:	5ea7      	ldrsh	r7, [r4, r2]
10009fda:	2f00      	cmp	r7, #0
10009fdc:	d010      	beq.n	1000a000 <__sfp+0x48>
10009fde:	3468      	adds	r4, #104	; 0x68
10009fe0:	e7f7      	b.n	10009fd2 <__sfp+0x1a>
10009fe2:	682b      	ldr	r3, [r5, #0]
10009fe4:	2b00      	cmp	r3, #0
10009fe6:	d106      	bne.n	10009ff6 <__sfp+0x3e>
10009fe8:	1c30      	adds	r0, r6, #0
10009fea:	2104      	movs	r1, #4
10009fec:	f7ff ff9c 	bl	10009f28 <__sfmoreglue>
10009ff0:	6028      	str	r0, [r5, #0]
10009ff2:	2800      	cmp	r0, #0
10009ff4:	d001      	beq.n	10009ffa <__sfp+0x42>
10009ff6:	682d      	ldr	r5, [r5, #0]
10009ff8:	e7e9      	b.n	10009fce <__sfp+0x16>
10009ffa:	230c      	movs	r3, #12
10009ffc:	6033      	str	r3, [r6, #0]
10009ffe:	e016      	b.n	1000a02e <__sfp+0x76>
1000a000:	2301      	movs	r3, #1
1000a002:	1c20      	adds	r0, r4, #0
1000a004:	425b      	negs	r3, r3
1000a006:	81e3      	strh	r3, [r4, #14]
1000a008:	3302      	adds	r3, #2
1000a00a:	81a3      	strh	r3, [r4, #12]
1000a00c:	6667      	str	r7, [r4, #100]	; 0x64
1000a00e:	6027      	str	r7, [r4, #0]
1000a010:	60a7      	str	r7, [r4, #8]
1000a012:	6067      	str	r7, [r4, #4]
1000a014:	6127      	str	r7, [r4, #16]
1000a016:	6167      	str	r7, [r4, #20]
1000a018:	61a7      	str	r7, [r4, #24]
1000a01a:	305c      	adds	r0, #92	; 0x5c
1000a01c:	1c39      	adds	r1, r7, #0
1000a01e:	2208      	movs	r2, #8
1000a020:	f7ff fdee 	bl	10009c00 <memset>
1000a024:	1c20      	adds	r0, r4, #0
1000a026:	6367      	str	r7, [r4, #52]	; 0x34
1000a028:	63a7      	str	r7, [r4, #56]	; 0x38
1000a02a:	64a7      	str	r7, [r4, #72]	; 0x48
1000a02c:	64e7      	str	r7, [r4, #76]	; 0x4c
1000a02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a030:	1000ad64 	.word	0x1000ad64

1000a034 <_fwalk_reent>:
1000a034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000a036:	1c04      	adds	r4, r0, #0
1000a038:	1c07      	adds	r7, r0, #0
1000a03a:	2600      	movs	r6, #0
1000a03c:	9101      	str	r1, [sp, #4]
1000a03e:	3448      	adds	r4, #72	; 0x48
1000a040:	2c00      	cmp	r4, #0
1000a042:	d016      	beq.n	1000a072 <_fwalk_reent+0x3e>
1000a044:	6863      	ldr	r3, [r4, #4]
1000a046:	68a5      	ldr	r5, [r4, #8]
1000a048:	9300      	str	r3, [sp, #0]
1000a04a:	9b00      	ldr	r3, [sp, #0]
1000a04c:	3b01      	subs	r3, #1
1000a04e:	9300      	str	r3, [sp, #0]
1000a050:	d40d      	bmi.n	1000a06e <_fwalk_reent+0x3a>
1000a052:	89ab      	ldrh	r3, [r5, #12]
1000a054:	2b01      	cmp	r3, #1
1000a056:	d908      	bls.n	1000a06a <_fwalk_reent+0x36>
1000a058:	220e      	movs	r2, #14
1000a05a:	5eab      	ldrsh	r3, [r5, r2]
1000a05c:	3301      	adds	r3, #1
1000a05e:	d004      	beq.n	1000a06a <_fwalk_reent+0x36>
1000a060:	1c38      	adds	r0, r7, #0
1000a062:	1c29      	adds	r1, r5, #0
1000a064:	9b01      	ldr	r3, [sp, #4]
1000a066:	4798      	blx	r3
1000a068:	4306      	orrs	r6, r0
1000a06a:	3568      	adds	r5, #104	; 0x68
1000a06c:	e7ed      	b.n	1000a04a <_fwalk_reent+0x16>
1000a06e:	6824      	ldr	r4, [r4, #0]
1000a070:	e7e6      	b.n	1000a040 <_fwalk_reent+0xc>
1000a072:	1c30      	adds	r0, r6, #0
1000a074:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

1000a078 <malloc>:
1000a078:	b508      	push	{r3, lr}
1000a07a:	4b03      	ldr	r3, [pc, #12]	; (1000a088 <malloc+0x10>)
1000a07c:	1c01      	adds	r1, r0, #0
1000a07e:	6818      	ldr	r0, [r3, #0]
1000a080:	f000 f84a 	bl	1000a118 <_malloc_r>
1000a084:	bd08      	pop	{r3, pc}
1000a086:	46c0      	nop			; (mov r8, r8)
1000a088:	1000ae7c 	.word	0x1000ae7c

1000a08c <_free_r>:
1000a08c:	b530      	push	{r4, r5, lr}
1000a08e:	2900      	cmp	r1, #0
1000a090:	d03e      	beq.n	1000a110 <_free_r+0x84>
1000a092:	3904      	subs	r1, #4
1000a094:	680b      	ldr	r3, [r1, #0]
1000a096:	2b00      	cmp	r3, #0
1000a098:	da00      	bge.n	1000a09c <_free_r+0x10>
1000a09a:	18c9      	adds	r1, r1, r3
1000a09c:	4a1d      	ldr	r2, [pc, #116]	; (1000a114 <_free_r+0x88>)
1000a09e:	6813      	ldr	r3, [r2, #0]
1000a0a0:	1c14      	adds	r4, r2, #0
1000a0a2:	2b00      	cmp	r3, #0
1000a0a4:	d102      	bne.n	1000a0ac <_free_r+0x20>
1000a0a6:	604b      	str	r3, [r1, #4]
1000a0a8:	6011      	str	r1, [r2, #0]
1000a0aa:	e031      	b.n	1000a110 <_free_r+0x84>
1000a0ac:	4299      	cmp	r1, r3
1000a0ae:	d20d      	bcs.n	1000a0cc <_free_r+0x40>
1000a0b0:	6808      	ldr	r0, [r1, #0]
1000a0b2:	180a      	adds	r2, r1, r0
1000a0b4:	429a      	cmp	r2, r3
1000a0b6:	d103      	bne.n	1000a0c0 <_free_r+0x34>
1000a0b8:	6813      	ldr	r3, [r2, #0]
1000a0ba:	18c3      	adds	r3, r0, r3
1000a0bc:	600b      	str	r3, [r1, #0]
1000a0be:	6853      	ldr	r3, [r2, #4]
1000a0c0:	604b      	str	r3, [r1, #4]
1000a0c2:	6021      	str	r1, [r4, #0]
1000a0c4:	e024      	b.n	1000a110 <_free_r+0x84>
1000a0c6:	428a      	cmp	r2, r1
1000a0c8:	d803      	bhi.n	1000a0d2 <_free_r+0x46>
1000a0ca:	1c13      	adds	r3, r2, #0
1000a0cc:	685a      	ldr	r2, [r3, #4]
1000a0ce:	2a00      	cmp	r2, #0
1000a0d0:	d1f9      	bne.n	1000a0c6 <_free_r+0x3a>
1000a0d2:	681d      	ldr	r5, [r3, #0]
1000a0d4:	195c      	adds	r4, r3, r5
1000a0d6:	428c      	cmp	r4, r1
1000a0d8:	d10b      	bne.n	1000a0f2 <_free_r+0x66>
1000a0da:	6809      	ldr	r1, [r1, #0]
1000a0dc:	1869      	adds	r1, r5, r1
1000a0de:	1858      	adds	r0, r3, r1
1000a0e0:	6019      	str	r1, [r3, #0]
1000a0e2:	4290      	cmp	r0, r2
1000a0e4:	d114      	bne.n	1000a110 <_free_r+0x84>
1000a0e6:	6810      	ldr	r0, [r2, #0]
1000a0e8:	6852      	ldr	r2, [r2, #4]
1000a0ea:	1809      	adds	r1, r1, r0
1000a0ec:	6019      	str	r1, [r3, #0]
1000a0ee:	605a      	str	r2, [r3, #4]
1000a0f0:	e00e      	b.n	1000a110 <_free_r+0x84>
1000a0f2:	428c      	cmp	r4, r1
1000a0f4:	d902      	bls.n	1000a0fc <_free_r+0x70>
1000a0f6:	230c      	movs	r3, #12
1000a0f8:	6003      	str	r3, [r0, #0]
1000a0fa:	e009      	b.n	1000a110 <_free_r+0x84>
1000a0fc:	6808      	ldr	r0, [r1, #0]
1000a0fe:	180c      	adds	r4, r1, r0
1000a100:	4294      	cmp	r4, r2
1000a102:	d103      	bne.n	1000a10c <_free_r+0x80>
1000a104:	6814      	ldr	r4, [r2, #0]
1000a106:	6852      	ldr	r2, [r2, #4]
1000a108:	1900      	adds	r0, r0, r4
1000a10a:	6008      	str	r0, [r1, #0]
1000a10c:	604a      	str	r2, [r1, #4]
1000a10e:	6059      	str	r1, [r3, #4]
1000a110:	bd30      	pop	{r4, r5, pc}
1000a112:	46c0      	nop			; (mov r8, r8)
1000a114:	1000aeb8 	.word	0x1000aeb8

1000a118 <_malloc_r>:
1000a118:	2303      	movs	r3, #3
1000a11a:	b570      	push	{r4, r5, r6, lr}
1000a11c:	1ccc      	adds	r4, r1, #3
1000a11e:	439c      	bics	r4, r3
1000a120:	3408      	adds	r4, #8
1000a122:	1c05      	adds	r5, r0, #0
1000a124:	2c0c      	cmp	r4, #12
1000a126:	d201      	bcs.n	1000a12c <_malloc_r+0x14>
1000a128:	240c      	movs	r4, #12
1000a12a:	e005      	b.n	1000a138 <_malloc_r+0x20>
1000a12c:	2c00      	cmp	r4, #0
1000a12e:	da03      	bge.n	1000a138 <_malloc_r+0x20>
1000a130:	230c      	movs	r3, #12
1000a132:	2000      	movs	r0, #0
1000a134:	602b      	str	r3, [r5, #0]
1000a136:	e042      	b.n	1000a1be <_malloc_r+0xa6>
1000a138:	428c      	cmp	r4, r1
1000a13a:	d3f9      	bcc.n	1000a130 <_malloc_r+0x18>
1000a13c:	4a20      	ldr	r2, [pc, #128]	; (1000a1c0 <_malloc_r+0xa8>)
1000a13e:	6813      	ldr	r3, [r2, #0]
1000a140:	1c10      	adds	r0, r2, #0
1000a142:	1c19      	adds	r1, r3, #0
1000a144:	2900      	cmp	r1, #0
1000a146:	d013      	beq.n	1000a170 <_malloc_r+0x58>
1000a148:	680a      	ldr	r2, [r1, #0]
1000a14a:	1b12      	subs	r2, r2, r4
1000a14c:	d40d      	bmi.n	1000a16a <_malloc_r+0x52>
1000a14e:	2a0b      	cmp	r2, #11
1000a150:	d902      	bls.n	1000a158 <_malloc_r+0x40>
1000a152:	600a      	str	r2, [r1, #0]
1000a154:	188b      	adds	r3, r1, r2
1000a156:	e01f      	b.n	1000a198 <_malloc_r+0x80>
1000a158:	428b      	cmp	r3, r1
1000a15a:	d102      	bne.n	1000a162 <_malloc_r+0x4a>
1000a15c:	685a      	ldr	r2, [r3, #4]
1000a15e:	6002      	str	r2, [r0, #0]
1000a160:	e01b      	b.n	1000a19a <_malloc_r+0x82>
1000a162:	684a      	ldr	r2, [r1, #4]
1000a164:	605a      	str	r2, [r3, #4]
1000a166:	1c0b      	adds	r3, r1, #0
1000a168:	e017      	b.n	1000a19a <_malloc_r+0x82>
1000a16a:	1c0b      	adds	r3, r1, #0
1000a16c:	6849      	ldr	r1, [r1, #4]
1000a16e:	e7e9      	b.n	1000a144 <_malloc_r+0x2c>
1000a170:	4e14      	ldr	r6, [pc, #80]	; (1000a1c4 <_malloc_r+0xac>)
1000a172:	6833      	ldr	r3, [r6, #0]
1000a174:	2b00      	cmp	r3, #0
1000a176:	d103      	bne.n	1000a180 <_malloc_r+0x68>
1000a178:	1c28      	adds	r0, r5, #0
1000a17a:	f000 fae3 	bl	1000a744 <_sbrk_r>
1000a17e:	6030      	str	r0, [r6, #0]
1000a180:	1c28      	adds	r0, r5, #0
1000a182:	1c21      	adds	r1, r4, #0
1000a184:	f000 fade 	bl	1000a744 <_sbrk_r>
1000a188:	1c03      	adds	r3, r0, #0
1000a18a:	1c42      	adds	r2, r0, #1
1000a18c:	d0d0      	beq.n	1000a130 <_malloc_r+0x18>
1000a18e:	2203      	movs	r2, #3
1000a190:	1cc6      	adds	r6, r0, #3
1000a192:	4396      	bics	r6, r2
1000a194:	4286      	cmp	r6, r0
1000a196:	d10a      	bne.n	1000a1ae <_malloc_r+0x96>
1000a198:	601c      	str	r4, [r3, #0]
1000a19a:	1c18      	adds	r0, r3, #0
1000a19c:	2107      	movs	r1, #7
1000a19e:	300b      	adds	r0, #11
1000a1a0:	1d1a      	adds	r2, r3, #4
1000a1a2:	4388      	bics	r0, r1
1000a1a4:	1a82      	subs	r2, r0, r2
1000a1a6:	d00a      	beq.n	1000a1be <_malloc_r+0xa6>
1000a1a8:	4251      	negs	r1, r2
1000a1aa:	5099      	str	r1, [r3, r2]
1000a1ac:	e007      	b.n	1000a1be <_malloc_r+0xa6>
1000a1ae:	1a31      	subs	r1, r6, r0
1000a1b0:	1c28      	adds	r0, r5, #0
1000a1b2:	f000 fac7 	bl	1000a744 <_sbrk_r>
1000a1b6:	1c43      	adds	r3, r0, #1
1000a1b8:	d0ba      	beq.n	1000a130 <_malloc_r+0x18>
1000a1ba:	1c33      	adds	r3, r6, #0
1000a1bc:	e7ec      	b.n	1000a198 <_malloc_r+0x80>
1000a1be:	bd70      	pop	{r4, r5, r6, pc}
1000a1c0:	1000aeb8 	.word	0x1000aeb8
1000a1c4:	1000aeb4 	.word	0x1000aeb4

1000a1c8 <__sfputc_r>:
1000a1c8:	6893      	ldr	r3, [r2, #8]
1000a1ca:	b510      	push	{r4, lr}
1000a1cc:	3b01      	subs	r3, #1
1000a1ce:	6093      	str	r3, [r2, #8]
1000a1d0:	2b00      	cmp	r3, #0
1000a1d2:	da05      	bge.n	1000a1e0 <__sfputc_r+0x18>
1000a1d4:	6994      	ldr	r4, [r2, #24]
1000a1d6:	42a3      	cmp	r3, r4
1000a1d8:	db08      	blt.n	1000a1ec <__sfputc_r+0x24>
1000a1da:	b2cb      	uxtb	r3, r1
1000a1dc:	2b0a      	cmp	r3, #10
1000a1de:	d005      	beq.n	1000a1ec <__sfputc_r+0x24>
1000a1e0:	6813      	ldr	r3, [r2, #0]
1000a1e2:	1c58      	adds	r0, r3, #1
1000a1e4:	6010      	str	r0, [r2, #0]
1000a1e6:	7019      	strb	r1, [r3, #0]
1000a1e8:	b2c8      	uxtb	r0, r1
1000a1ea:	e001      	b.n	1000a1f0 <__sfputc_r+0x28>
1000a1ec:	f000 fb08 	bl	1000a800 <__swbuf_r>
1000a1f0:	bd10      	pop	{r4, pc}

1000a1f2 <__sfputs_r>:
1000a1f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a1f4:	1c06      	adds	r6, r0, #0
1000a1f6:	1c0f      	adds	r7, r1, #0
1000a1f8:	1c14      	adds	r4, r2, #0
1000a1fa:	18d5      	adds	r5, r2, r3
1000a1fc:	42ac      	cmp	r4, r5
1000a1fe:	d008      	beq.n	1000a212 <__sfputs_r+0x20>
1000a200:	7821      	ldrb	r1, [r4, #0]
1000a202:	1c30      	adds	r0, r6, #0
1000a204:	1c3a      	adds	r2, r7, #0
1000a206:	f7ff ffdf 	bl	1000a1c8 <__sfputc_r>
1000a20a:	3401      	adds	r4, #1
1000a20c:	1c43      	adds	r3, r0, #1
1000a20e:	d1f5      	bne.n	1000a1fc <__sfputs_r+0xa>
1000a210:	e000      	b.n	1000a214 <__sfputs_r+0x22>
1000a212:	2000      	movs	r0, #0
1000a214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1000a218 <_vfiprintf_r>:
1000a218:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a21a:	b09f      	sub	sp, #124	; 0x7c
1000a21c:	1c06      	adds	r6, r0, #0
1000a21e:	1c0f      	adds	r7, r1, #0
1000a220:	9202      	str	r2, [sp, #8]
1000a222:	9305      	str	r3, [sp, #20]
1000a224:	2800      	cmp	r0, #0
1000a226:	d004      	beq.n	1000a232 <_vfiprintf_r+0x1a>
1000a228:	6983      	ldr	r3, [r0, #24]
1000a22a:	2b00      	cmp	r3, #0
1000a22c:	d101      	bne.n	1000a232 <_vfiprintf_r+0x1a>
1000a22e:	f7ff fe91 	bl	10009f54 <__sinit>
1000a232:	4b79      	ldr	r3, [pc, #484]	; (1000a418 <_vfiprintf_r+0x200>)
1000a234:	429f      	cmp	r7, r3
1000a236:	d101      	bne.n	1000a23c <_vfiprintf_r+0x24>
1000a238:	6877      	ldr	r7, [r6, #4]
1000a23a:	e008      	b.n	1000a24e <_vfiprintf_r+0x36>
1000a23c:	4b77      	ldr	r3, [pc, #476]	; (1000a41c <_vfiprintf_r+0x204>)
1000a23e:	429f      	cmp	r7, r3
1000a240:	d101      	bne.n	1000a246 <_vfiprintf_r+0x2e>
1000a242:	68b7      	ldr	r7, [r6, #8]
1000a244:	e003      	b.n	1000a24e <_vfiprintf_r+0x36>
1000a246:	4b76      	ldr	r3, [pc, #472]	; (1000a420 <_vfiprintf_r+0x208>)
1000a248:	429f      	cmp	r7, r3
1000a24a:	d100      	bne.n	1000a24e <_vfiprintf_r+0x36>
1000a24c:	68f7      	ldr	r7, [r6, #12]
1000a24e:	89bb      	ldrh	r3, [r7, #12]
1000a250:	071b      	lsls	r3, r3, #28
1000a252:	d50a      	bpl.n	1000a26a <_vfiprintf_r+0x52>
1000a254:	693b      	ldr	r3, [r7, #16]
1000a256:	2b00      	cmp	r3, #0
1000a258:	d007      	beq.n	1000a26a <_vfiprintf_r+0x52>
1000a25a:	2300      	movs	r3, #0
1000a25c:	ad06      	add	r5, sp, #24
1000a25e:	616b      	str	r3, [r5, #20]
1000a260:	3320      	adds	r3, #32
1000a262:	766b      	strb	r3, [r5, #25]
1000a264:	3310      	adds	r3, #16
1000a266:	76ab      	strb	r3, [r5, #26]
1000a268:	e03d      	b.n	1000a2e6 <_vfiprintf_r+0xce>
1000a26a:	1c30      	adds	r0, r6, #0
1000a26c:	1c39      	adds	r1, r7, #0
1000a26e:	f000 fb33 	bl	1000a8d8 <__swsetup_r>
1000a272:	2800      	cmp	r0, #0
1000a274:	d0f1      	beq.n	1000a25a <_vfiprintf_r+0x42>
1000a276:	2001      	movs	r0, #1
1000a278:	4240      	negs	r0, r0
1000a27a:	e0ca      	b.n	1000a412 <_vfiprintf_r+0x1fa>
1000a27c:	9a05      	ldr	r2, [sp, #20]
1000a27e:	1d11      	adds	r1, r2, #4
1000a280:	6812      	ldr	r2, [r2, #0]
1000a282:	9105      	str	r1, [sp, #20]
1000a284:	2a00      	cmp	r2, #0
1000a286:	db7e      	blt.n	1000a386 <_vfiprintf_r+0x16e>
1000a288:	9209      	str	r2, [sp, #36]	; 0x24
1000a28a:	3401      	adds	r4, #1
1000a28c:	7823      	ldrb	r3, [r4, #0]
1000a28e:	2b2e      	cmp	r3, #46	; 0x2e
1000a290:	d100      	bne.n	1000a294 <_vfiprintf_r+0x7c>
1000a292:	e089      	b.n	1000a3a8 <_vfiprintf_r+0x190>
1000a294:	7821      	ldrb	r1, [r4, #0]
1000a296:	4863      	ldr	r0, [pc, #396]	; (1000a424 <_vfiprintf_r+0x20c>)
1000a298:	2203      	movs	r2, #3
1000a29a:	f000 fc0f 	bl	1000aabc <memchr>
1000a29e:	2800      	cmp	r0, #0
1000a2a0:	d008      	beq.n	1000a2b4 <_vfiprintf_r+0x9c>
1000a2a2:	4b60      	ldr	r3, [pc, #384]	; (1000a424 <_vfiprintf_r+0x20c>)
1000a2a4:	3401      	adds	r4, #1
1000a2a6:	1ac0      	subs	r0, r0, r3
1000a2a8:	2340      	movs	r3, #64	; 0x40
1000a2aa:	4083      	lsls	r3, r0
1000a2ac:	1c18      	adds	r0, r3, #0
1000a2ae:	682b      	ldr	r3, [r5, #0]
1000a2b0:	4318      	orrs	r0, r3
1000a2b2:	6028      	str	r0, [r5, #0]
1000a2b4:	7821      	ldrb	r1, [r4, #0]
1000a2b6:	1c63      	adds	r3, r4, #1
1000a2b8:	485b      	ldr	r0, [pc, #364]	; (1000a428 <_vfiprintf_r+0x210>)
1000a2ba:	2206      	movs	r2, #6
1000a2bc:	9302      	str	r3, [sp, #8]
1000a2be:	7629      	strb	r1, [r5, #24]
1000a2c0:	f000 fbfc 	bl	1000aabc <memchr>
1000a2c4:	2800      	cmp	r0, #0
1000a2c6:	d100      	bne.n	1000a2ca <_vfiprintf_r+0xb2>
1000a2c8:	e091      	b.n	1000a3ee <_vfiprintf_r+0x1d6>
1000a2ca:	4b58      	ldr	r3, [pc, #352]	; (1000a42c <_vfiprintf_r+0x214>)
1000a2cc:	2b00      	cmp	r3, #0
1000a2ce:	d000      	beq.n	1000a2d2 <_vfiprintf_r+0xba>
1000a2d0:	e084      	b.n	1000a3dc <_vfiprintf_r+0x1c4>
1000a2d2:	2207      	movs	r2, #7
1000a2d4:	9b05      	ldr	r3, [sp, #20]
1000a2d6:	3307      	adds	r3, #7
1000a2d8:	4393      	bics	r3, r2
1000a2da:	3308      	adds	r3, #8
1000a2dc:	9305      	str	r3, [sp, #20]
1000a2de:	696b      	ldr	r3, [r5, #20]
1000a2e0:	9a03      	ldr	r2, [sp, #12]
1000a2e2:	189b      	adds	r3, r3, r2
1000a2e4:	616b      	str	r3, [r5, #20]
1000a2e6:	9c02      	ldr	r4, [sp, #8]
1000a2e8:	7823      	ldrb	r3, [r4, #0]
1000a2ea:	2b00      	cmp	r3, #0
1000a2ec:	d104      	bne.n	1000a2f8 <_vfiprintf_r+0xe0>
1000a2ee:	9b02      	ldr	r3, [sp, #8]
1000a2f0:	1ae3      	subs	r3, r4, r3
1000a2f2:	9304      	str	r3, [sp, #16]
1000a2f4:	d011      	beq.n	1000a31a <_vfiprintf_r+0x102>
1000a2f6:	e003      	b.n	1000a300 <_vfiprintf_r+0xe8>
1000a2f8:	2b25      	cmp	r3, #37	; 0x25
1000a2fa:	d0f8      	beq.n	1000a2ee <_vfiprintf_r+0xd6>
1000a2fc:	3401      	adds	r4, #1
1000a2fe:	e7f3      	b.n	1000a2e8 <_vfiprintf_r+0xd0>
1000a300:	9b04      	ldr	r3, [sp, #16]
1000a302:	1c30      	adds	r0, r6, #0
1000a304:	1c39      	adds	r1, r7, #0
1000a306:	9a02      	ldr	r2, [sp, #8]
1000a308:	f7ff ff73 	bl	1000a1f2 <__sfputs_r>
1000a30c:	1c43      	adds	r3, r0, #1
1000a30e:	d07b      	beq.n	1000a408 <_vfiprintf_r+0x1f0>
1000a310:	696a      	ldr	r2, [r5, #20]
1000a312:	9b04      	ldr	r3, [sp, #16]
1000a314:	4694      	mov	ip, r2
1000a316:	4463      	add	r3, ip
1000a318:	616b      	str	r3, [r5, #20]
1000a31a:	7823      	ldrb	r3, [r4, #0]
1000a31c:	2b00      	cmp	r3, #0
1000a31e:	d073      	beq.n	1000a408 <_vfiprintf_r+0x1f0>
1000a320:	2201      	movs	r2, #1
1000a322:	2300      	movs	r3, #0
1000a324:	4252      	negs	r2, r2
1000a326:	606a      	str	r2, [r5, #4]
1000a328:	a902      	add	r1, sp, #8
1000a32a:	3254      	adds	r2, #84	; 0x54
1000a32c:	1852      	adds	r2, r2, r1
1000a32e:	3401      	adds	r4, #1
1000a330:	602b      	str	r3, [r5, #0]
1000a332:	60eb      	str	r3, [r5, #12]
1000a334:	60ab      	str	r3, [r5, #8]
1000a336:	7013      	strb	r3, [r2, #0]
1000a338:	65ab      	str	r3, [r5, #88]	; 0x58
1000a33a:	7821      	ldrb	r1, [r4, #0]
1000a33c:	483c      	ldr	r0, [pc, #240]	; (1000a430 <_vfiprintf_r+0x218>)
1000a33e:	2205      	movs	r2, #5
1000a340:	f000 fbbc 	bl	1000aabc <memchr>
1000a344:	2800      	cmp	r0, #0
1000a346:	d009      	beq.n	1000a35c <_vfiprintf_r+0x144>
1000a348:	4b39      	ldr	r3, [pc, #228]	; (1000a430 <_vfiprintf_r+0x218>)
1000a34a:	3401      	adds	r4, #1
1000a34c:	1ac0      	subs	r0, r0, r3
1000a34e:	2301      	movs	r3, #1
1000a350:	4083      	lsls	r3, r0
1000a352:	1c18      	adds	r0, r3, #0
1000a354:	682b      	ldr	r3, [r5, #0]
1000a356:	4318      	orrs	r0, r3
1000a358:	6028      	str	r0, [r5, #0]
1000a35a:	e7ee      	b.n	1000a33a <_vfiprintf_r+0x122>
1000a35c:	682b      	ldr	r3, [r5, #0]
1000a35e:	06da      	lsls	r2, r3, #27
1000a360:	d504      	bpl.n	1000a36c <_vfiprintf_r+0x154>
1000a362:	2253      	movs	r2, #83	; 0x53
1000a364:	2120      	movs	r1, #32
1000a366:	a802      	add	r0, sp, #8
1000a368:	1812      	adds	r2, r2, r0
1000a36a:	7011      	strb	r1, [r2, #0]
1000a36c:	071a      	lsls	r2, r3, #28
1000a36e:	d504      	bpl.n	1000a37a <_vfiprintf_r+0x162>
1000a370:	2253      	movs	r2, #83	; 0x53
1000a372:	212b      	movs	r1, #43	; 0x2b
1000a374:	a802      	add	r0, sp, #8
1000a376:	1812      	adds	r2, r2, r0
1000a378:	7011      	strb	r1, [r2, #0]
1000a37a:	7822      	ldrb	r2, [r4, #0]
1000a37c:	2a2a      	cmp	r2, #42	; 0x2a
1000a37e:	d100      	bne.n	1000a382 <_vfiprintf_r+0x16a>
1000a380:	e77c      	b.n	1000a27c <_vfiprintf_r+0x64>
1000a382:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000a384:	e005      	b.n	1000a392 <_vfiprintf_r+0x17a>
1000a386:	4252      	negs	r2, r2
1000a388:	60ea      	str	r2, [r5, #12]
1000a38a:	2202      	movs	r2, #2
1000a38c:	4313      	orrs	r3, r2
1000a38e:	602b      	str	r3, [r5, #0]
1000a390:	e77b      	b.n	1000a28a <_vfiprintf_r+0x72>
1000a392:	7822      	ldrb	r2, [r4, #0]
1000a394:	3a30      	subs	r2, #48	; 0x30
1000a396:	2a09      	cmp	r2, #9
1000a398:	d804      	bhi.n	1000a3a4 <_vfiprintf_r+0x18c>
1000a39a:	210a      	movs	r1, #10
1000a39c:	434b      	muls	r3, r1
1000a39e:	3401      	adds	r4, #1
1000a3a0:	189b      	adds	r3, r3, r2
1000a3a2:	e7f6      	b.n	1000a392 <_vfiprintf_r+0x17a>
1000a3a4:	9309      	str	r3, [sp, #36]	; 0x24
1000a3a6:	e771      	b.n	1000a28c <_vfiprintf_r+0x74>
1000a3a8:	7863      	ldrb	r3, [r4, #1]
1000a3aa:	2b2a      	cmp	r3, #42	; 0x2a
1000a3ac:	d109      	bne.n	1000a3c2 <_vfiprintf_r+0x1aa>
1000a3ae:	9b05      	ldr	r3, [sp, #20]
1000a3b0:	3402      	adds	r4, #2
1000a3b2:	1d1a      	adds	r2, r3, #4
1000a3b4:	681b      	ldr	r3, [r3, #0]
1000a3b6:	9205      	str	r2, [sp, #20]
1000a3b8:	2b00      	cmp	r3, #0
1000a3ba:	da0d      	bge.n	1000a3d8 <_vfiprintf_r+0x1c0>
1000a3bc:	2301      	movs	r3, #1
1000a3be:	425b      	negs	r3, r3
1000a3c0:	e00a      	b.n	1000a3d8 <_vfiprintf_r+0x1c0>
1000a3c2:	2300      	movs	r3, #0
1000a3c4:	3401      	adds	r4, #1
1000a3c6:	7822      	ldrb	r2, [r4, #0]
1000a3c8:	3a30      	subs	r2, #48	; 0x30
1000a3ca:	2a09      	cmp	r2, #9
1000a3cc:	d804      	bhi.n	1000a3d8 <_vfiprintf_r+0x1c0>
1000a3ce:	210a      	movs	r1, #10
1000a3d0:	434b      	muls	r3, r1
1000a3d2:	3401      	adds	r4, #1
1000a3d4:	189b      	adds	r3, r3, r2
1000a3d6:	e7f6      	b.n	1000a3c6 <_vfiprintf_r+0x1ae>
1000a3d8:	9307      	str	r3, [sp, #28]
1000a3da:	e75b      	b.n	1000a294 <_vfiprintf_r+0x7c>
1000a3dc:	ab05      	add	r3, sp, #20
1000a3de:	9300      	str	r3, [sp, #0]
1000a3e0:	1c30      	adds	r0, r6, #0
1000a3e2:	1c29      	adds	r1, r5, #0
1000a3e4:	1c3a      	adds	r2, r7, #0
1000a3e6:	4b13      	ldr	r3, [pc, #76]	; (1000a434 <_vfiprintf_r+0x21c>)
1000a3e8:	e000      	b.n	1000a3ec <_vfiprintf_r+0x1d4>
1000a3ea:	bf00      	nop
1000a3ec:	e007      	b.n	1000a3fe <_vfiprintf_r+0x1e6>
1000a3ee:	ab05      	add	r3, sp, #20
1000a3f0:	9300      	str	r3, [sp, #0]
1000a3f2:	1c30      	adds	r0, r6, #0
1000a3f4:	1c29      	adds	r1, r5, #0
1000a3f6:	1c3a      	adds	r2, r7, #0
1000a3f8:	4b0e      	ldr	r3, [pc, #56]	; (1000a434 <_vfiprintf_r+0x21c>)
1000a3fa:	f000 f88b 	bl	1000a514 <_printf_i>
1000a3fe:	9003      	str	r0, [sp, #12]
1000a400:	9b03      	ldr	r3, [sp, #12]
1000a402:	3301      	adds	r3, #1
1000a404:	d000      	beq.n	1000a408 <_vfiprintf_r+0x1f0>
1000a406:	e76a      	b.n	1000a2de <_vfiprintf_r+0xc6>
1000a408:	89bb      	ldrh	r3, [r7, #12]
1000a40a:	065b      	lsls	r3, r3, #25
1000a40c:	d500      	bpl.n	1000a410 <_vfiprintf_r+0x1f8>
1000a40e:	e732      	b.n	1000a276 <_vfiprintf_r+0x5e>
1000a410:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000a412:	b01f      	add	sp, #124	; 0x7c
1000a414:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a416:	46c0      	nop			; (mov r8, r8)
1000a418:	1000ad68 	.word	0x1000ad68
1000a41c:	1000ad88 	.word	0x1000ad88
1000a420:	1000ada8 	.word	0x1000ada8
1000a424:	1000adce 	.word	0x1000adce
1000a428:	1000add2 	.word	0x1000add2
1000a42c:	00000000 	.word	0x00000000
1000a430:	1000adc8 	.word	0x1000adc8
1000a434:	1000a1f3 	.word	0x1000a1f3

1000a438 <_printf_common>:
1000a438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000a43a:	1c17      	adds	r7, r2, #0
1000a43c:	9301      	str	r3, [sp, #4]
1000a43e:	690a      	ldr	r2, [r1, #16]
1000a440:	688b      	ldr	r3, [r1, #8]
1000a442:	9000      	str	r0, [sp, #0]
1000a444:	1c0c      	adds	r4, r1, #0
1000a446:	4293      	cmp	r3, r2
1000a448:	da00      	bge.n	1000a44c <_printf_common+0x14>
1000a44a:	1c13      	adds	r3, r2, #0
1000a44c:	1c22      	adds	r2, r4, #0
1000a44e:	603b      	str	r3, [r7, #0]
1000a450:	3243      	adds	r2, #67	; 0x43
1000a452:	7812      	ldrb	r2, [r2, #0]
1000a454:	2a00      	cmp	r2, #0
1000a456:	d001      	beq.n	1000a45c <_printf_common+0x24>
1000a458:	3301      	adds	r3, #1
1000a45a:	603b      	str	r3, [r7, #0]
1000a45c:	6823      	ldr	r3, [r4, #0]
1000a45e:	069b      	lsls	r3, r3, #26
1000a460:	d502      	bpl.n	1000a468 <_printf_common+0x30>
1000a462:	683b      	ldr	r3, [r7, #0]
1000a464:	3302      	adds	r3, #2
1000a466:	603b      	str	r3, [r7, #0]
1000a468:	2506      	movs	r5, #6
1000a46a:	6823      	ldr	r3, [r4, #0]
1000a46c:	401d      	ands	r5, r3
1000a46e:	d01e      	beq.n	1000a4ae <_printf_common+0x76>
1000a470:	1c23      	adds	r3, r4, #0
1000a472:	3343      	adds	r3, #67	; 0x43
1000a474:	781b      	ldrb	r3, [r3, #0]
1000a476:	1e5a      	subs	r2, r3, #1
1000a478:	4193      	sbcs	r3, r2
1000a47a:	6822      	ldr	r2, [r4, #0]
1000a47c:	0692      	lsls	r2, r2, #26
1000a47e:	d51c      	bpl.n	1000a4ba <_printf_common+0x82>
1000a480:	2030      	movs	r0, #48	; 0x30
1000a482:	18e1      	adds	r1, r4, r3
1000a484:	3140      	adds	r1, #64	; 0x40
1000a486:	70c8      	strb	r0, [r1, #3]
1000a488:	1c21      	adds	r1, r4, #0
1000a48a:	1c5a      	adds	r2, r3, #1
1000a48c:	3145      	adds	r1, #69	; 0x45
1000a48e:	7809      	ldrb	r1, [r1, #0]
1000a490:	18a2      	adds	r2, r4, r2
1000a492:	3240      	adds	r2, #64	; 0x40
1000a494:	3302      	adds	r3, #2
1000a496:	70d1      	strb	r1, [r2, #3]
1000a498:	e00f      	b.n	1000a4ba <_printf_common+0x82>
1000a49a:	1c22      	adds	r2, r4, #0
1000a49c:	2301      	movs	r3, #1
1000a49e:	9800      	ldr	r0, [sp, #0]
1000a4a0:	9901      	ldr	r1, [sp, #4]
1000a4a2:	3219      	adds	r2, #25
1000a4a4:	9e08      	ldr	r6, [sp, #32]
1000a4a6:	47b0      	blx	r6
1000a4a8:	1c43      	adds	r3, r0, #1
1000a4aa:	d00e      	beq.n	1000a4ca <_printf_common+0x92>
1000a4ac:	3501      	adds	r5, #1
1000a4ae:	68e3      	ldr	r3, [r4, #12]
1000a4b0:	683a      	ldr	r2, [r7, #0]
1000a4b2:	1a9b      	subs	r3, r3, r2
1000a4b4:	429d      	cmp	r5, r3
1000a4b6:	dbf0      	blt.n	1000a49a <_printf_common+0x62>
1000a4b8:	e7da      	b.n	1000a470 <_printf_common+0x38>
1000a4ba:	1c22      	adds	r2, r4, #0
1000a4bc:	9800      	ldr	r0, [sp, #0]
1000a4be:	9901      	ldr	r1, [sp, #4]
1000a4c0:	3243      	adds	r2, #67	; 0x43
1000a4c2:	9d08      	ldr	r5, [sp, #32]
1000a4c4:	47a8      	blx	r5
1000a4c6:	1c43      	adds	r3, r0, #1
1000a4c8:	d102      	bne.n	1000a4d0 <_printf_common+0x98>
1000a4ca:	2001      	movs	r0, #1
1000a4cc:	4240      	negs	r0, r0
1000a4ce:	e020      	b.n	1000a512 <_printf_common+0xda>
1000a4d0:	2306      	movs	r3, #6
1000a4d2:	6820      	ldr	r0, [r4, #0]
1000a4d4:	68e1      	ldr	r1, [r4, #12]
1000a4d6:	683a      	ldr	r2, [r7, #0]
1000a4d8:	4003      	ands	r3, r0
1000a4da:	2500      	movs	r5, #0
1000a4dc:	2b04      	cmp	r3, #4
1000a4de:	d103      	bne.n	1000a4e8 <_printf_common+0xb0>
1000a4e0:	1a8d      	subs	r5, r1, r2
1000a4e2:	43eb      	mvns	r3, r5
1000a4e4:	17db      	asrs	r3, r3, #31
1000a4e6:	401d      	ands	r5, r3
1000a4e8:	68a3      	ldr	r3, [r4, #8]
1000a4ea:	6922      	ldr	r2, [r4, #16]
1000a4ec:	4293      	cmp	r3, r2
1000a4ee:	dd01      	ble.n	1000a4f4 <_printf_common+0xbc>
1000a4f0:	1a9b      	subs	r3, r3, r2
1000a4f2:	18ed      	adds	r5, r5, r3
1000a4f4:	2700      	movs	r7, #0
1000a4f6:	42af      	cmp	r7, r5
1000a4f8:	da0a      	bge.n	1000a510 <_printf_common+0xd8>
1000a4fa:	1c22      	adds	r2, r4, #0
1000a4fc:	2301      	movs	r3, #1
1000a4fe:	9800      	ldr	r0, [sp, #0]
1000a500:	9901      	ldr	r1, [sp, #4]
1000a502:	321a      	adds	r2, #26
1000a504:	9e08      	ldr	r6, [sp, #32]
1000a506:	47b0      	blx	r6
1000a508:	1c43      	adds	r3, r0, #1
1000a50a:	d0de      	beq.n	1000a4ca <_printf_common+0x92>
1000a50c:	3701      	adds	r7, #1
1000a50e:	e7f2      	b.n	1000a4f6 <_printf_common+0xbe>
1000a510:	2000      	movs	r0, #0
1000a512:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000a514 <_printf_i>:
1000a514:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a516:	b08b      	sub	sp, #44	; 0x2c
1000a518:	9206      	str	r2, [sp, #24]
1000a51a:	1c0a      	adds	r2, r1, #0
1000a51c:	3243      	adds	r2, #67	; 0x43
1000a51e:	9307      	str	r3, [sp, #28]
1000a520:	9005      	str	r0, [sp, #20]
1000a522:	9204      	str	r2, [sp, #16]
1000a524:	7e0a      	ldrb	r2, [r1, #24]
1000a526:	1c0c      	adds	r4, r1, #0
1000a528:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000a52a:	2a6e      	cmp	r2, #110	; 0x6e
1000a52c:	d100      	bne.n	1000a530 <_printf_i+0x1c>
1000a52e:	e0a8      	b.n	1000a682 <_printf_i+0x16e>
1000a530:	d811      	bhi.n	1000a556 <_printf_i+0x42>
1000a532:	2a63      	cmp	r2, #99	; 0x63
1000a534:	d022      	beq.n	1000a57c <_printf_i+0x68>
1000a536:	d809      	bhi.n	1000a54c <_printf_i+0x38>
1000a538:	2a00      	cmp	r2, #0
1000a53a:	d100      	bne.n	1000a53e <_printf_i+0x2a>
1000a53c:	e0b2      	b.n	1000a6a4 <_printf_i+0x190>
1000a53e:	2a58      	cmp	r2, #88	; 0x58
1000a540:	d000      	beq.n	1000a544 <_printf_i+0x30>
1000a542:	e0c2      	b.n	1000a6ca <_printf_i+0x1b6>
1000a544:	3145      	adds	r1, #69	; 0x45
1000a546:	700a      	strb	r2, [r1, #0]
1000a548:	4a7c      	ldr	r2, [pc, #496]	; (1000a73c <_printf_i+0x228>)
1000a54a:	e04f      	b.n	1000a5ec <_printf_i+0xd8>
1000a54c:	2a64      	cmp	r2, #100	; 0x64
1000a54e:	d01d      	beq.n	1000a58c <_printf_i+0x78>
1000a550:	2a69      	cmp	r2, #105	; 0x69
1000a552:	d01b      	beq.n	1000a58c <_printf_i+0x78>
1000a554:	e0b9      	b.n	1000a6ca <_printf_i+0x1b6>
1000a556:	2a73      	cmp	r2, #115	; 0x73
1000a558:	d100      	bne.n	1000a55c <_printf_i+0x48>
1000a55a:	e0a7      	b.n	1000a6ac <_printf_i+0x198>
1000a55c:	d809      	bhi.n	1000a572 <_printf_i+0x5e>
1000a55e:	2a6f      	cmp	r2, #111	; 0x6f
1000a560:	d029      	beq.n	1000a5b6 <_printf_i+0xa2>
1000a562:	2a70      	cmp	r2, #112	; 0x70
1000a564:	d000      	beq.n	1000a568 <_printf_i+0x54>
1000a566:	e0b0      	b.n	1000a6ca <_printf_i+0x1b6>
1000a568:	2220      	movs	r2, #32
1000a56a:	6809      	ldr	r1, [r1, #0]
1000a56c:	430a      	orrs	r2, r1
1000a56e:	6022      	str	r2, [r4, #0]
1000a570:	e037      	b.n	1000a5e2 <_printf_i+0xce>
1000a572:	2a75      	cmp	r2, #117	; 0x75
1000a574:	d01f      	beq.n	1000a5b6 <_printf_i+0xa2>
1000a576:	2a78      	cmp	r2, #120	; 0x78
1000a578:	d033      	beq.n	1000a5e2 <_printf_i+0xce>
1000a57a:	e0a6      	b.n	1000a6ca <_printf_i+0x1b6>
1000a57c:	1c0e      	adds	r6, r1, #0
1000a57e:	681a      	ldr	r2, [r3, #0]
1000a580:	3642      	adds	r6, #66	; 0x42
1000a582:	1d11      	adds	r1, r2, #4
1000a584:	6019      	str	r1, [r3, #0]
1000a586:	6813      	ldr	r3, [r2, #0]
1000a588:	7033      	strb	r3, [r6, #0]
1000a58a:	e0a1      	b.n	1000a6d0 <_printf_i+0x1bc>
1000a58c:	6821      	ldr	r1, [r4, #0]
1000a58e:	681a      	ldr	r2, [r3, #0]
1000a590:	0608      	lsls	r0, r1, #24
1000a592:	d406      	bmi.n	1000a5a2 <_printf_i+0x8e>
1000a594:	0649      	lsls	r1, r1, #25
1000a596:	d504      	bpl.n	1000a5a2 <_printf_i+0x8e>
1000a598:	1d11      	adds	r1, r2, #4
1000a59a:	6019      	str	r1, [r3, #0]
1000a59c:	2300      	movs	r3, #0
1000a59e:	5ed5      	ldrsh	r5, [r2, r3]
1000a5a0:	e002      	b.n	1000a5a8 <_printf_i+0x94>
1000a5a2:	1d11      	adds	r1, r2, #4
1000a5a4:	6019      	str	r1, [r3, #0]
1000a5a6:	6815      	ldr	r5, [r2, #0]
1000a5a8:	2d00      	cmp	r5, #0
1000a5aa:	da3b      	bge.n	1000a624 <_printf_i+0x110>
1000a5ac:	232d      	movs	r3, #45	; 0x2d
1000a5ae:	9a04      	ldr	r2, [sp, #16]
1000a5b0:	426d      	negs	r5, r5
1000a5b2:	7013      	strb	r3, [r2, #0]
1000a5b4:	e036      	b.n	1000a624 <_printf_i+0x110>
1000a5b6:	6821      	ldr	r1, [r4, #0]
1000a5b8:	681a      	ldr	r2, [r3, #0]
1000a5ba:	0608      	lsls	r0, r1, #24
1000a5bc:	d406      	bmi.n	1000a5cc <_printf_i+0xb8>
1000a5be:	0649      	lsls	r1, r1, #25
1000a5c0:	d504      	bpl.n	1000a5cc <_printf_i+0xb8>
1000a5c2:	6815      	ldr	r5, [r2, #0]
1000a5c4:	1d11      	adds	r1, r2, #4
1000a5c6:	6019      	str	r1, [r3, #0]
1000a5c8:	b2ad      	uxth	r5, r5
1000a5ca:	e002      	b.n	1000a5d2 <_printf_i+0xbe>
1000a5cc:	1d11      	adds	r1, r2, #4
1000a5ce:	6019      	str	r1, [r3, #0]
1000a5d0:	6815      	ldr	r5, [r2, #0]
1000a5d2:	4b5a      	ldr	r3, [pc, #360]	; (1000a73c <_printf_i+0x228>)
1000a5d4:	7e22      	ldrb	r2, [r4, #24]
1000a5d6:	9303      	str	r3, [sp, #12]
1000a5d8:	270a      	movs	r7, #10
1000a5da:	2a6f      	cmp	r2, #111	; 0x6f
1000a5dc:	d11d      	bne.n	1000a61a <_printf_i+0x106>
1000a5de:	2708      	movs	r7, #8
1000a5e0:	e01b      	b.n	1000a61a <_printf_i+0x106>
1000a5e2:	1c22      	adds	r2, r4, #0
1000a5e4:	2178      	movs	r1, #120	; 0x78
1000a5e6:	3245      	adds	r2, #69	; 0x45
1000a5e8:	7011      	strb	r1, [r2, #0]
1000a5ea:	4a55      	ldr	r2, [pc, #340]	; (1000a740 <_printf_i+0x22c>)
1000a5ec:	6819      	ldr	r1, [r3, #0]
1000a5ee:	9203      	str	r2, [sp, #12]
1000a5f0:	1d08      	adds	r0, r1, #4
1000a5f2:	6822      	ldr	r2, [r4, #0]
1000a5f4:	6018      	str	r0, [r3, #0]
1000a5f6:	680d      	ldr	r5, [r1, #0]
1000a5f8:	0610      	lsls	r0, r2, #24
1000a5fa:	d402      	bmi.n	1000a602 <_printf_i+0xee>
1000a5fc:	0650      	lsls	r0, r2, #25
1000a5fe:	d500      	bpl.n	1000a602 <_printf_i+0xee>
1000a600:	b2ad      	uxth	r5, r5
1000a602:	07d3      	lsls	r3, r2, #31
1000a604:	d502      	bpl.n	1000a60c <_printf_i+0xf8>
1000a606:	2320      	movs	r3, #32
1000a608:	431a      	orrs	r2, r3
1000a60a:	6022      	str	r2, [r4, #0]
1000a60c:	2710      	movs	r7, #16
1000a60e:	2d00      	cmp	r5, #0
1000a610:	d103      	bne.n	1000a61a <_printf_i+0x106>
1000a612:	2320      	movs	r3, #32
1000a614:	6822      	ldr	r2, [r4, #0]
1000a616:	439a      	bics	r2, r3
1000a618:	6022      	str	r2, [r4, #0]
1000a61a:	1c23      	adds	r3, r4, #0
1000a61c:	2200      	movs	r2, #0
1000a61e:	3343      	adds	r3, #67	; 0x43
1000a620:	701a      	strb	r2, [r3, #0]
1000a622:	e002      	b.n	1000a62a <_printf_i+0x116>
1000a624:	270a      	movs	r7, #10
1000a626:	4b45      	ldr	r3, [pc, #276]	; (1000a73c <_printf_i+0x228>)
1000a628:	9303      	str	r3, [sp, #12]
1000a62a:	6863      	ldr	r3, [r4, #4]
1000a62c:	60a3      	str	r3, [r4, #8]
1000a62e:	2b00      	cmp	r3, #0
1000a630:	db03      	blt.n	1000a63a <_printf_i+0x126>
1000a632:	2204      	movs	r2, #4
1000a634:	6821      	ldr	r1, [r4, #0]
1000a636:	4391      	bics	r1, r2
1000a638:	6021      	str	r1, [r4, #0]
1000a63a:	2d00      	cmp	r5, #0
1000a63c:	d102      	bne.n	1000a644 <_printf_i+0x130>
1000a63e:	9e04      	ldr	r6, [sp, #16]
1000a640:	2b00      	cmp	r3, #0
1000a642:	d00e      	beq.n	1000a662 <_printf_i+0x14e>
1000a644:	9e04      	ldr	r6, [sp, #16]
1000a646:	1c28      	adds	r0, r5, #0
1000a648:	1c39      	adds	r1, r7, #0
1000a64a:	f7ff faa7 	bl	10009b9c <__aeabi_uidivmod>
1000a64e:	9b03      	ldr	r3, [sp, #12]
1000a650:	3e01      	subs	r6, #1
1000a652:	5c5b      	ldrb	r3, [r3, r1]
1000a654:	1c28      	adds	r0, r5, #0
1000a656:	7033      	strb	r3, [r6, #0]
1000a658:	1c39      	adds	r1, r7, #0
1000a65a:	f7ff fa19 	bl	10009a90 <__aeabi_uidiv>
1000a65e:	1e05      	subs	r5, r0, #0
1000a660:	d1f1      	bne.n	1000a646 <_printf_i+0x132>
1000a662:	2f08      	cmp	r7, #8
1000a664:	d109      	bne.n	1000a67a <_printf_i+0x166>
1000a666:	6823      	ldr	r3, [r4, #0]
1000a668:	07db      	lsls	r3, r3, #31
1000a66a:	d506      	bpl.n	1000a67a <_printf_i+0x166>
1000a66c:	6863      	ldr	r3, [r4, #4]
1000a66e:	6922      	ldr	r2, [r4, #16]
1000a670:	4293      	cmp	r3, r2
1000a672:	dc02      	bgt.n	1000a67a <_printf_i+0x166>
1000a674:	2330      	movs	r3, #48	; 0x30
1000a676:	3e01      	subs	r6, #1
1000a678:	7033      	strb	r3, [r6, #0]
1000a67a:	9b04      	ldr	r3, [sp, #16]
1000a67c:	1b9b      	subs	r3, r3, r6
1000a67e:	6123      	str	r3, [r4, #16]
1000a680:	e02b      	b.n	1000a6da <_printf_i+0x1c6>
1000a682:	6809      	ldr	r1, [r1, #0]
1000a684:	681a      	ldr	r2, [r3, #0]
1000a686:	0608      	lsls	r0, r1, #24
1000a688:	d407      	bmi.n	1000a69a <_printf_i+0x186>
1000a68a:	0649      	lsls	r1, r1, #25
1000a68c:	d505      	bpl.n	1000a69a <_printf_i+0x186>
1000a68e:	1d11      	adds	r1, r2, #4
1000a690:	6019      	str	r1, [r3, #0]
1000a692:	6813      	ldr	r3, [r2, #0]
1000a694:	8aa2      	ldrh	r2, [r4, #20]
1000a696:	801a      	strh	r2, [r3, #0]
1000a698:	e004      	b.n	1000a6a4 <_printf_i+0x190>
1000a69a:	1d11      	adds	r1, r2, #4
1000a69c:	6019      	str	r1, [r3, #0]
1000a69e:	6813      	ldr	r3, [r2, #0]
1000a6a0:	6962      	ldr	r2, [r4, #20]
1000a6a2:	601a      	str	r2, [r3, #0]
1000a6a4:	2300      	movs	r3, #0
1000a6a6:	9e04      	ldr	r6, [sp, #16]
1000a6a8:	6123      	str	r3, [r4, #16]
1000a6aa:	e016      	b.n	1000a6da <_printf_i+0x1c6>
1000a6ac:	681a      	ldr	r2, [r3, #0]
1000a6ae:	1d11      	adds	r1, r2, #4
1000a6b0:	6019      	str	r1, [r3, #0]
1000a6b2:	6816      	ldr	r6, [r2, #0]
1000a6b4:	2100      	movs	r1, #0
1000a6b6:	1c30      	adds	r0, r6, #0
1000a6b8:	6862      	ldr	r2, [r4, #4]
1000a6ba:	f000 f9ff 	bl	1000aabc <memchr>
1000a6be:	2800      	cmp	r0, #0
1000a6c0:	d001      	beq.n	1000a6c6 <_printf_i+0x1b2>
1000a6c2:	1b80      	subs	r0, r0, r6
1000a6c4:	6060      	str	r0, [r4, #4]
1000a6c6:	6863      	ldr	r3, [r4, #4]
1000a6c8:	e003      	b.n	1000a6d2 <_printf_i+0x1be>
1000a6ca:	1c26      	adds	r6, r4, #0
1000a6cc:	3642      	adds	r6, #66	; 0x42
1000a6ce:	7032      	strb	r2, [r6, #0]
1000a6d0:	2301      	movs	r3, #1
1000a6d2:	6123      	str	r3, [r4, #16]
1000a6d4:	2300      	movs	r3, #0
1000a6d6:	9a04      	ldr	r2, [sp, #16]
1000a6d8:	7013      	strb	r3, [r2, #0]
1000a6da:	9b07      	ldr	r3, [sp, #28]
1000a6dc:	9805      	ldr	r0, [sp, #20]
1000a6de:	9300      	str	r3, [sp, #0]
1000a6e0:	1c21      	adds	r1, r4, #0
1000a6e2:	9b06      	ldr	r3, [sp, #24]
1000a6e4:	aa09      	add	r2, sp, #36	; 0x24
1000a6e6:	f7ff fea7 	bl	1000a438 <_printf_common>
1000a6ea:	1c43      	adds	r3, r0, #1
1000a6ec:	d102      	bne.n	1000a6f4 <_printf_i+0x1e0>
1000a6ee:	2001      	movs	r0, #1
1000a6f0:	4240      	negs	r0, r0
1000a6f2:	e021      	b.n	1000a738 <_printf_i+0x224>
1000a6f4:	6923      	ldr	r3, [r4, #16]
1000a6f6:	9805      	ldr	r0, [sp, #20]
1000a6f8:	9906      	ldr	r1, [sp, #24]
1000a6fa:	1c32      	adds	r2, r6, #0
1000a6fc:	9d07      	ldr	r5, [sp, #28]
1000a6fe:	47a8      	blx	r5
1000a700:	1c43      	adds	r3, r0, #1
1000a702:	d0f4      	beq.n	1000a6ee <_printf_i+0x1da>
1000a704:	6823      	ldr	r3, [r4, #0]
1000a706:	079b      	lsls	r3, r3, #30
1000a708:	d405      	bmi.n	1000a716 <_printf_i+0x202>
1000a70a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000a70c:	68e0      	ldr	r0, [r4, #12]
1000a70e:	4298      	cmp	r0, r3
1000a710:	da12      	bge.n	1000a738 <_printf_i+0x224>
1000a712:	1c18      	adds	r0, r3, #0
1000a714:	e010      	b.n	1000a738 <_printf_i+0x224>
1000a716:	2500      	movs	r5, #0
1000a718:	68e3      	ldr	r3, [r4, #12]
1000a71a:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000a71c:	1a9b      	subs	r3, r3, r2
1000a71e:	429d      	cmp	r5, r3
1000a720:	daf3      	bge.n	1000a70a <_printf_i+0x1f6>
1000a722:	1c22      	adds	r2, r4, #0
1000a724:	2301      	movs	r3, #1
1000a726:	9805      	ldr	r0, [sp, #20]
1000a728:	9906      	ldr	r1, [sp, #24]
1000a72a:	3219      	adds	r2, #25
1000a72c:	9e07      	ldr	r6, [sp, #28]
1000a72e:	47b0      	blx	r6
1000a730:	1c43      	adds	r3, r0, #1
1000a732:	d0dc      	beq.n	1000a6ee <_printf_i+0x1da>
1000a734:	3501      	adds	r5, #1
1000a736:	e7ef      	b.n	1000a718 <_printf_i+0x204>
1000a738:	b00b      	add	sp, #44	; 0x2c
1000a73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a73c:	1000add9 	.word	0x1000add9
1000a740:	1000adea 	.word	0x1000adea

1000a744 <_sbrk_r>:
1000a744:	b538      	push	{r3, r4, r5, lr}
1000a746:	2300      	movs	r3, #0
1000a748:	4c06      	ldr	r4, [pc, #24]	; (1000a764 <_sbrk_r+0x20>)
1000a74a:	1c05      	adds	r5, r0, #0
1000a74c:	1c08      	adds	r0, r1, #0
1000a74e:	6023      	str	r3, [r4, #0]
1000a750:	f7ff f850 	bl	100097f4 <_sbrk>
1000a754:	1c43      	adds	r3, r0, #1
1000a756:	d103      	bne.n	1000a760 <_sbrk_r+0x1c>
1000a758:	6823      	ldr	r3, [r4, #0]
1000a75a:	2b00      	cmp	r3, #0
1000a75c:	d000      	beq.n	1000a760 <_sbrk_r+0x1c>
1000a75e:	602b      	str	r3, [r5, #0]
1000a760:	bd38      	pop	{r3, r4, r5, pc}
1000a762:	46c0      	nop			; (mov r8, r8)
1000a764:	1000b100 	.word	0x1000b100

1000a768 <__sread>:
1000a768:	b538      	push	{r3, r4, r5, lr}
1000a76a:	1c0c      	adds	r4, r1, #0
1000a76c:	250e      	movs	r5, #14
1000a76e:	5f49      	ldrsh	r1, [r1, r5]
1000a770:	f000 f9b0 	bl	1000aad4 <_read_r>
1000a774:	2800      	cmp	r0, #0
1000a776:	db03      	blt.n	1000a780 <__sread+0x18>
1000a778:	6d63      	ldr	r3, [r4, #84]	; 0x54
1000a77a:	181b      	adds	r3, r3, r0
1000a77c:	6563      	str	r3, [r4, #84]	; 0x54
1000a77e:	e003      	b.n	1000a788 <__sread+0x20>
1000a780:	89a2      	ldrh	r2, [r4, #12]
1000a782:	4b02      	ldr	r3, [pc, #8]	; (1000a78c <__sread+0x24>)
1000a784:	4013      	ands	r3, r2
1000a786:	81a3      	strh	r3, [r4, #12]
1000a788:	bd38      	pop	{r3, r4, r5, pc}
1000a78a:	46c0      	nop			; (mov r8, r8)
1000a78c:	ffffefff 	.word	0xffffefff

1000a790 <__swrite>:
1000a790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a792:	1c1e      	adds	r6, r3, #0
1000a794:	898b      	ldrh	r3, [r1, #12]
1000a796:	1c05      	adds	r5, r0, #0
1000a798:	1c0c      	adds	r4, r1, #0
1000a79a:	1c17      	adds	r7, r2, #0
1000a79c:	05db      	lsls	r3, r3, #23
1000a79e:	d505      	bpl.n	1000a7ac <__swrite+0x1c>
1000a7a0:	230e      	movs	r3, #14
1000a7a2:	5ec9      	ldrsh	r1, [r1, r3]
1000a7a4:	2200      	movs	r2, #0
1000a7a6:	2302      	movs	r3, #2
1000a7a8:	f000 f91c 	bl	1000a9e4 <_lseek_r>
1000a7ac:	89a2      	ldrh	r2, [r4, #12]
1000a7ae:	4b05      	ldr	r3, [pc, #20]	; (1000a7c4 <__swrite+0x34>)
1000a7b0:	1c28      	adds	r0, r5, #0
1000a7b2:	4013      	ands	r3, r2
1000a7b4:	81a3      	strh	r3, [r4, #12]
1000a7b6:	1c3a      	adds	r2, r7, #0
1000a7b8:	230e      	movs	r3, #14
1000a7ba:	5ee1      	ldrsh	r1, [r4, r3]
1000a7bc:	1c33      	adds	r3, r6, #0
1000a7be:	f000 f877 	bl	1000a8b0 <_write_r>
1000a7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a7c4:	ffffefff 	.word	0xffffefff

1000a7c8 <__sseek>:
1000a7c8:	b538      	push	{r3, r4, r5, lr}
1000a7ca:	1c0c      	adds	r4, r1, #0
1000a7cc:	250e      	movs	r5, #14
1000a7ce:	5f49      	ldrsh	r1, [r1, r5]
1000a7d0:	f000 f908 	bl	1000a9e4 <_lseek_r>
1000a7d4:	89a3      	ldrh	r3, [r4, #12]
1000a7d6:	1c42      	adds	r2, r0, #1
1000a7d8:	d103      	bne.n	1000a7e2 <__sseek+0x1a>
1000a7da:	4a05      	ldr	r2, [pc, #20]	; (1000a7f0 <__sseek+0x28>)
1000a7dc:	4013      	ands	r3, r2
1000a7de:	81a3      	strh	r3, [r4, #12]
1000a7e0:	e004      	b.n	1000a7ec <__sseek+0x24>
1000a7e2:	2280      	movs	r2, #128	; 0x80
1000a7e4:	0152      	lsls	r2, r2, #5
1000a7e6:	4313      	orrs	r3, r2
1000a7e8:	81a3      	strh	r3, [r4, #12]
1000a7ea:	6560      	str	r0, [r4, #84]	; 0x54
1000a7ec:	bd38      	pop	{r3, r4, r5, pc}
1000a7ee:	46c0      	nop			; (mov r8, r8)
1000a7f0:	ffffefff 	.word	0xffffefff

1000a7f4 <__sclose>:
1000a7f4:	b508      	push	{r3, lr}
1000a7f6:	230e      	movs	r3, #14
1000a7f8:	5ec9      	ldrsh	r1, [r1, r3]
1000a7fa:	f000 f8e1 	bl	1000a9c0 <_close_r>
1000a7fe:	bd08      	pop	{r3, pc}

1000a800 <__swbuf_r>:
1000a800:	b570      	push	{r4, r5, r6, lr}
1000a802:	1c05      	adds	r5, r0, #0
1000a804:	1c0e      	adds	r6, r1, #0
1000a806:	1c14      	adds	r4, r2, #0
1000a808:	2800      	cmp	r0, #0
1000a80a:	d004      	beq.n	1000a816 <__swbuf_r+0x16>
1000a80c:	6983      	ldr	r3, [r0, #24]
1000a80e:	2b00      	cmp	r3, #0
1000a810:	d101      	bne.n	1000a816 <__swbuf_r+0x16>
1000a812:	f7ff fb9f 	bl	10009f54 <__sinit>
1000a816:	4b23      	ldr	r3, [pc, #140]	; (1000a8a4 <__swbuf_r+0xa4>)
1000a818:	429c      	cmp	r4, r3
1000a81a:	d101      	bne.n	1000a820 <__swbuf_r+0x20>
1000a81c:	686c      	ldr	r4, [r5, #4]
1000a81e:	e008      	b.n	1000a832 <__swbuf_r+0x32>
1000a820:	4b21      	ldr	r3, [pc, #132]	; (1000a8a8 <__swbuf_r+0xa8>)
1000a822:	429c      	cmp	r4, r3
1000a824:	d101      	bne.n	1000a82a <__swbuf_r+0x2a>
1000a826:	68ac      	ldr	r4, [r5, #8]
1000a828:	e003      	b.n	1000a832 <__swbuf_r+0x32>
1000a82a:	4b20      	ldr	r3, [pc, #128]	; (1000a8ac <__swbuf_r+0xac>)
1000a82c:	429c      	cmp	r4, r3
1000a82e:	d100      	bne.n	1000a832 <__swbuf_r+0x32>
1000a830:	68ec      	ldr	r4, [r5, #12]
1000a832:	69a3      	ldr	r3, [r4, #24]
1000a834:	60a3      	str	r3, [r4, #8]
1000a836:	89a3      	ldrh	r3, [r4, #12]
1000a838:	071b      	lsls	r3, r3, #28
1000a83a:	d50a      	bpl.n	1000a852 <__swbuf_r+0x52>
1000a83c:	6923      	ldr	r3, [r4, #16]
1000a83e:	2b00      	cmp	r3, #0
1000a840:	d007      	beq.n	1000a852 <__swbuf_r+0x52>
1000a842:	6823      	ldr	r3, [r4, #0]
1000a844:	6922      	ldr	r2, [r4, #16]
1000a846:	b2f6      	uxtb	r6, r6
1000a848:	1a98      	subs	r0, r3, r2
1000a84a:	6963      	ldr	r3, [r4, #20]
1000a84c:	4298      	cmp	r0, r3
1000a84e:	db0f      	blt.n	1000a870 <__swbuf_r+0x70>
1000a850:	e008      	b.n	1000a864 <__swbuf_r+0x64>
1000a852:	1c28      	adds	r0, r5, #0
1000a854:	1c21      	adds	r1, r4, #0
1000a856:	f000 f83f 	bl	1000a8d8 <__swsetup_r>
1000a85a:	2800      	cmp	r0, #0
1000a85c:	d0f1      	beq.n	1000a842 <__swbuf_r+0x42>
1000a85e:	2001      	movs	r0, #1
1000a860:	4240      	negs	r0, r0
1000a862:	e01d      	b.n	1000a8a0 <__swbuf_r+0xa0>
1000a864:	1c28      	adds	r0, r5, #0
1000a866:	1c21      	adds	r1, r4, #0
1000a868:	f7ff fb06 	bl	10009e78 <_fflush_r>
1000a86c:	2800      	cmp	r0, #0
1000a86e:	d1f6      	bne.n	1000a85e <__swbuf_r+0x5e>
1000a870:	68a3      	ldr	r3, [r4, #8]
1000a872:	3001      	adds	r0, #1
1000a874:	3b01      	subs	r3, #1
1000a876:	60a3      	str	r3, [r4, #8]
1000a878:	6823      	ldr	r3, [r4, #0]
1000a87a:	1c5a      	adds	r2, r3, #1
1000a87c:	6022      	str	r2, [r4, #0]
1000a87e:	701e      	strb	r6, [r3, #0]
1000a880:	6963      	ldr	r3, [r4, #20]
1000a882:	4298      	cmp	r0, r3
1000a884:	d005      	beq.n	1000a892 <__swbuf_r+0x92>
1000a886:	89a3      	ldrh	r3, [r4, #12]
1000a888:	1c30      	adds	r0, r6, #0
1000a88a:	07db      	lsls	r3, r3, #31
1000a88c:	d508      	bpl.n	1000a8a0 <__swbuf_r+0xa0>
1000a88e:	2e0a      	cmp	r6, #10
1000a890:	d106      	bne.n	1000a8a0 <__swbuf_r+0xa0>
1000a892:	1c28      	adds	r0, r5, #0
1000a894:	1c21      	adds	r1, r4, #0
1000a896:	f7ff faef 	bl	10009e78 <_fflush_r>
1000a89a:	2800      	cmp	r0, #0
1000a89c:	d1df      	bne.n	1000a85e <__swbuf_r+0x5e>
1000a89e:	1c30      	adds	r0, r6, #0
1000a8a0:	bd70      	pop	{r4, r5, r6, pc}
1000a8a2:	46c0      	nop			; (mov r8, r8)
1000a8a4:	1000ad68 	.word	0x1000ad68
1000a8a8:	1000ad88 	.word	0x1000ad88
1000a8ac:	1000ada8 	.word	0x1000ada8

1000a8b0 <_write_r>:
1000a8b0:	b538      	push	{r3, r4, r5, lr}
1000a8b2:	1c05      	adds	r5, r0, #0
1000a8b4:	2000      	movs	r0, #0
1000a8b6:	4c07      	ldr	r4, [pc, #28]	; (1000a8d4 <_write_r+0x24>)
1000a8b8:	6020      	str	r0, [r4, #0]
1000a8ba:	1c08      	adds	r0, r1, #0
1000a8bc:	1c11      	adds	r1, r2, #0
1000a8be:	1c1a      	adds	r2, r3, #0
1000a8c0:	f7fd ff62 	bl	10008788 <_write>
1000a8c4:	1c43      	adds	r3, r0, #1
1000a8c6:	d103      	bne.n	1000a8d0 <_write_r+0x20>
1000a8c8:	6823      	ldr	r3, [r4, #0]
1000a8ca:	2b00      	cmp	r3, #0
1000a8cc:	d000      	beq.n	1000a8d0 <_write_r+0x20>
1000a8ce:	602b      	str	r3, [r5, #0]
1000a8d0:	bd38      	pop	{r3, r4, r5, pc}
1000a8d2:	46c0      	nop			; (mov r8, r8)
1000a8d4:	1000b100 	.word	0x1000b100

1000a8d8 <__swsetup_r>:
1000a8d8:	4b35      	ldr	r3, [pc, #212]	; (1000a9b0 <__swsetup_r+0xd8>)
1000a8da:	b570      	push	{r4, r5, r6, lr}
1000a8dc:	681d      	ldr	r5, [r3, #0]
1000a8de:	1c06      	adds	r6, r0, #0
1000a8e0:	1c0c      	adds	r4, r1, #0
1000a8e2:	2d00      	cmp	r5, #0
1000a8e4:	d005      	beq.n	1000a8f2 <__swsetup_r+0x1a>
1000a8e6:	69ab      	ldr	r3, [r5, #24]
1000a8e8:	2b00      	cmp	r3, #0
1000a8ea:	d102      	bne.n	1000a8f2 <__swsetup_r+0x1a>
1000a8ec:	1c28      	adds	r0, r5, #0
1000a8ee:	f7ff fb31 	bl	10009f54 <__sinit>
1000a8f2:	4b30      	ldr	r3, [pc, #192]	; (1000a9b4 <__swsetup_r+0xdc>)
1000a8f4:	429c      	cmp	r4, r3
1000a8f6:	d101      	bne.n	1000a8fc <__swsetup_r+0x24>
1000a8f8:	686c      	ldr	r4, [r5, #4]
1000a8fa:	e008      	b.n	1000a90e <__swsetup_r+0x36>
1000a8fc:	4b2e      	ldr	r3, [pc, #184]	; (1000a9b8 <__swsetup_r+0xe0>)
1000a8fe:	429c      	cmp	r4, r3
1000a900:	d101      	bne.n	1000a906 <__swsetup_r+0x2e>
1000a902:	68ac      	ldr	r4, [r5, #8]
1000a904:	e003      	b.n	1000a90e <__swsetup_r+0x36>
1000a906:	4b2d      	ldr	r3, [pc, #180]	; (1000a9bc <__swsetup_r+0xe4>)
1000a908:	429c      	cmp	r4, r3
1000a90a:	d100      	bne.n	1000a90e <__swsetup_r+0x36>
1000a90c:	68ec      	ldr	r4, [r5, #12]
1000a90e:	89a3      	ldrh	r3, [r4, #12]
1000a910:	b29a      	uxth	r2, r3
1000a912:	0711      	lsls	r1, r2, #28
1000a914:	d423      	bmi.n	1000a95e <__swsetup_r+0x86>
1000a916:	06d1      	lsls	r1, r2, #27
1000a918:	d407      	bmi.n	1000a92a <__swsetup_r+0x52>
1000a91a:	2209      	movs	r2, #9
1000a91c:	2001      	movs	r0, #1
1000a91e:	6032      	str	r2, [r6, #0]
1000a920:	3237      	adds	r2, #55	; 0x37
1000a922:	4313      	orrs	r3, r2
1000a924:	81a3      	strh	r3, [r4, #12]
1000a926:	4240      	negs	r0, r0
1000a928:	e040      	b.n	1000a9ac <__swsetup_r+0xd4>
1000a92a:	0753      	lsls	r3, r2, #29
1000a92c:	d513      	bpl.n	1000a956 <__swsetup_r+0x7e>
1000a92e:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000a930:	2900      	cmp	r1, #0
1000a932:	d008      	beq.n	1000a946 <__swsetup_r+0x6e>
1000a934:	1c23      	adds	r3, r4, #0
1000a936:	3344      	adds	r3, #68	; 0x44
1000a938:	4299      	cmp	r1, r3
1000a93a:	d002      	beq.n	1000a942 <__swsetup_r+0x6a>
1000a93c:	1c30      	adds	r0, r6, #0
1000a93e:	f7ff fba5 	bl	1000a08c <_free_r>
1000a942:	2300      	movs	r3, #0
1000a944:	6363      	str	r3, [r4, #52]	; 0x34
1000a946:	2224      	movs	r2, #36	; 0x24
1000a948:	89a3      	ldrh	r3, [r4, #12]
1000a94a:	4393      	bics	r3, r2
1000a94c:	81a3      	strh	r3, [r4, #12]
1000a94e:	2300      	movs	r3, #0
1000a950:	6063      	str	r3, [r4, #4]
1000a952:	6923      	ldr	r3, [r4, #16]
1000a954:	6023      	str	r3, [r4, #0]
1000a956:	2208      	movs	r2, #8
1000a958:	89a3      	ldrh	r3, [r4, #12]
1000a95a:	4313      	orrs	r3, r2
1000a95c:	81a3      	strh	r3, [r4, #12]
1000a95e:	6923      	ldr	r3, [r4, #16]
1000a960:	2b00      	cmp	r3, #0
1000a962:	d10b      	bne.n	1000a97c <__swsetup_r+0xa4>
1000a964:	23a0      	movs	r3, #160	; 0xa0
1000a966:	89a2      	ldrh	r2, [r4, #12]
1000a968:	009b      	lsls	r3, r3, #2
1000a96a:	4013      	ands	r3, r2
1000a96c:	2280      	movs	r2, #128	; 0x80
1000a96e:	0092      	lsls	r2, r2, #2
1000a970:	4293      	cmp	r3, r2
1000a972:	d003      	beq.n	1000a97c <__swsetup_r+0xa4>
1000a974:	1c30      	adds	r0, r6, #0
1000a976:	1c21      	adds	r1, r4, #0
1000a978:	f000 f848 	bl	1000aa0c <__smakebuf_r>
1000a97c:	2301      	movs	r3, #1
1000a97e:	89a2      	ldrh	r2, [r4, #12]
1000a980:	4013      	ands	r3, r2
1000a982:	d005      	beq.n	1000a990 <__swsetup_r+0xb8>
1000a984:	2300      	movs	r3, #0
1000a986:	60a3      	str	r3, [r4, #8]
1000a988:	6963      	ldr	r3, [r4, #20]
1000a98a:	425b      	negs	r3, r3
1000a98c:	61a3      	str	r3, [r4, #24]
1000a98e:	e003      	b.n	1000a998 <__swsetup_r+0xc0>
1000a990:	0791      	lsls	r1, r2, #30
1000a992:	d400      	bmi.n	1000a996 <__swsetup_r+0xbe>
1000a994:	6963      	ldr	r3, [r4, #20]
1000a996:	60a3      	str	r3, [r4, #8]
1000a998:	2000      	movs	r0, #0
1000a99a:	6923      	ldr	r3, [r4, #16]
1000a99c:	4283      	cmp	r3, r0
1000a99e:	d105      	bne.n	1000a9ac <__swsetup_r+0xd4>
1000a9a0:	0613      	lsls	r3, r2, #24
1000a9a2:	d503      	bpl.n	1000a9ac <__swsetup_r+0xd4>
1000a9a4:	2340      	movs	r3, #64	; 0x40
1000a9a6:	431a      	orrs	r2, r3
1000a9a8:	81a2      	strh	r2, [r4, #12]
1000a9aa:	3801      	subs	r0, #1
1000a9ac:	bd70      	pop	{r4, r5, r6, pc}
1000a9ae:	46c0      	nop			; (mov r8, r8)
1000a9b0:	1000ae7c 	.word	0x1000ae7c
1000a9b4:	1000ad68 	.word	0x1000ad68
1000a9b8:	1000ad88 	.word	0x1000ad88
1000a9bc:	1000ada8 	.word	0x1000ada8

1000a9c0 <_close_r>:
1000a9c0:	b538      	push	{r3, r4, r5, lr}
1000a9c2:	2300      	movs	r3, #0
1000a9c4:	4c06      	ldr	r4, [pc, #24]	; (1000a9e0 <_close_r+0x20>)
1000a9c6:	1c05      	adds	r5, r0, #0
1000a9c8:	1c08      	adds	r0, r1, #0
1000a9ca:	6023      	str	r3, [r4, #0]
1000a9cc:	f7fe ff24 	bl	10009818 <_close>
1000a9d0:	1c43      	adds	r3, r0, #1
1000a9d2:	d103      	bne.n	1000a9dc <_close_r+0x1c>
1000a9d4:	6823      	ldr	r3, [r4, #0]
1000a9d6:	2b00      	cmp	r3, #0
1000a9d8:	d000      	beq.n	1000a9dc <_close_r+0x1c>
1000a9da:	602b      	str	r3, [r5, #0]
1000a9dc:	bd38      	pop	{r3, r4, r5, pc}
1000a9de:	46c0      	nop			; (mov r8, r8)
1000a9e0:	1000b100 	.word	0x1000b100

1000a9e4 <_lseek_r>:
1000a9e4:	b538      	push	{r3, r4, r5, lr}
1000a9e6:	1c05      	adds	r5, r0, #0
1000a9e8:	2000      	movs	r0, #0
1000a9ea:	4c07      	ldr	r4, [pc, #28]	; (1000aa08 <_lseek_r+0x24>)
1000a9ec:	6020      	str	r0, [r4, #0]
1000a9ee:	1c08      	adds	r0, r1, #0
1000a9f0:	1c11      	adds	r1, r2, #0
1000a9f2:	1c1a      	adds	r2, r3, #0
1000a9f4:	f7fe ff1c 	bl	10009830 <_lseek>
1000a9f8:	1c43      	adds	r3, r0, #1
1000a9fa:	d103      	bne.n	1000aa04 <_lseek_r+0x20>
1000a9fc:	6823      	ldr	r3, [r4, #0]
1000a9fe:	2b00      	cmp	r3, #0
1000aa00:	d000      	beq.n	1000aa04 <_lseek_r+0x20>
1000aa02:	602b      	str	r3, [r5, #0]
1000aa04:	bd38      	pop	{r3, r4, r5, pc}
1000aa06:	46c0      	nop			; (mov r8, r8)
1000aa08:	1000b100 	.word	0x1000b100

1000aa0c <__smakebuf_r>:
1000aa0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aa0e:	898b      	ldrh	r3, [r1, #12]
1000aa10:	b091      	sub	sp, #68	; 0x44
1000aa12:	079b      	lsls	r3, r3, #30
1000aa14:	d506      	bpl.n	1000aa24 <__smakebuf_r+0x18>
1000aa16:	1c0b      	adds	r3, r1, #0
1000aa18:	3347      	adds	r3, #71	; 0x47
1000aa1a:	600b      	str	r3, [r1, #0]
1000aa1c:	610b      	str	r3, [r1, #16]
1000aa1e:	2301      	movs	r3, #1
1000aa20:	614b      	str	r3, [r1, #20]
1000aa22:	e045      	b.n	1000aab0 <__smakebuf_r+0xa4>
1000aa24:	1c0c      	adds	r4, r1, #0
1000aa26:	230e      	movs	r3, #14
1000aa28:	5ec9      	ldrsh	r1, [r1, r3]
1000aa2a:	1c06      	adds	r6, r0, #0
1000aa2c:	2900      	cmp	r1, #0
1000aa2e:	da04      	bge.n	1000aa3a <__smakebuf_r+0x2e>
1000aa30:	2380      	movs	r3, #128	; 0x80
1000aa32:	89a5      	ldrh	r5, [r4, #12]
1000aa34:	401d      	ands	r5, r3
1000aa36:	d110      	bne.n	1000aa5a <__smakebuf_r+0x4e>
1000aa38:	e00c      	b.n	1000aa54 <__smakebuf_r+0x48>
1000aa3a:	aa01      	add	r2, sp, #4
1000aa3c:	f000 f85e 	bl	1000aafc <_fstat_r>
1000aa40:	2800      	cmp	r0, #0
1000aa42:	dbf5      	blt.n	1000aa30 <__smakebuf_r+0x24>
1000aa44:	23f0      	movs	r3, #240	; 0xf0
1000aa46:	9d02      	ldr	r5, [sp, #8]
1000aa48:	021b      	lsls	r3, r3, #8
1000aa4a:	401d      	ands	r5, r3
1000aa4c:	4b19      	ldr	r3, [pc, #100]	; (1000aab4 <__smakebuf_r+0xa8>)
1000aa4e:	18ed      	adds	r5, r5, r3
1000aa50:	426b      	negs	r3, r5
1000aa52:	415d      	adcs	r5, r3
1000aa54:	2780      	movs	r7, #128	; 0x80
1000aa56:	00ff      	lsls	r7, r7, #3
1000aa58:	e001      	b.n	1000aa5e <__smakebuf_r+0x52>
1000aa5a:	2500      	movs	r5, #0
1000aa5c:	2740      	movs	r7, #64	; 0x40
1000aa5e:	1c30      	adds	r0, r6, #0
1000aa60:	1c39      	adds	r1, r7, #0
1000aa62:	f7ff fb59 	bl	1000a118 <_malloc_r>
1000aa66:	2800      	cmp	r0, #0
1000aa68:	d10c      	bne.n	1000aa84 <__smakebuf_r+0x78>
1000aa6a:	89a3      	ldrh	r3, [r4, #12]
1000aa6c:	059a      	lsls	r2, r3, #22
1000aa6e:	d41f      	bmi.n	1000aab0 <__smakebuf_r+0xa4>
1000aa70:	2202      	movs	r2, #2
1000aa72:	4313      	orrs	r3, r2
1000aa74:	81a3      	strh	r3, [r4, #12]
1000aa76:	1c23      	adds	r3, r4, #0
1000aa78:	3347      	adds	r3, #71	; 0x47
1000aa7a:	6023      	str	r3, [r4, #0]
1000aa7c:	6123      	str	r3, [r4, #16]
1000aa7e:	2301      	movs	r3, #1
1000aa80:	6163      	str	r3, [r4, #20]
1000aa82:	e015      	b.n	1000aab0 <__smakebuf_r+0xa4>
1000aa84:	2280      	movs	r2, #128	; 0x80
1000aa86:	4b0c      	ldr	r3, [pc, #48]	; (1000aab8 <__smakebuf_r+0xac>)
1000aa88:	62b3      	str	r3, [r6, #40]	; 0x28
1000aa8a:	89a3      	ldrh	r3, [r4, #12]
1000aa8c:	6020      	str	r0, [r4, #0]
1000aa8e:	4313      	orrs	r3, r2
1000aa90:	81a3      	strh	r3, [r4, #12]
1000aa92:	6120      	str	r0, [r4, #16]
1000aa94:	6167      	str	r7, [r4, #20]
1000aa96:	2d00      	cmp	r5, #0
1000aa98:	d00a      	beq.n	1000aab0 <__smakebuf_r+0xa4>
1000aa9a:	230e      	movs	r3, #14
1000aa9c:	5ee1      	ldrsh	r1, [r4, r3]
1000aa9e:	1c30      	adds	r0, r6, #0
1000aaa0:	f000 f83e 	bl	1000ab20 <_isatty_r>
1000aaa4:	2800      	cmp	r0, #0
1000aaa6:	d003      	beq.n	1000aab0 <__smakebuf_r+0xa4>
1000aaa8:	2201      	movs	r2, #1
1000aaaa:	89a3      	ldrh	r3, [r4, #12]
1000aaac:	4313      	orrs	r3, r2
1000aaae:	81a3      	strh	r3, [r4, #12]
1000aab0:	b011      	add	sp, #68	; 0x44
1000aab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aab4:	ffffe000 	.word	0xffffe000
1000aab8:	10009ed1 	.word	0x10009ed1

1000aabc <memchr>:
1000aabc:	b2c9      	uxtb	r1, r1
1000aabe:	1882      	adds	r2, r0, r2
1000aac0:	4290      	cmp	r0, r2
1000aac2:	d004      	beq.n	1000aace <memchr+0x12>
1000aac4:	7803      	ldrb	r3, [r0, #0]
1000aac6:	428b      	cmp	r3, r1
1000aac8:	d002      	beq.n	1000aad0 <memchr+0x14>
1000aaca:	3001      	adds	r0, #1
1000aacc:	e7f8      	b.n	1000aac0 <memchr+0x4>
1000aace:	2000      	movs	r0, #0
1000aad0:	4770      	bx	lr
	...

1000aad4 <_read_r>:
1000aad4:	b538      	push	{r3, r4, r5, lr}
1000aad6:	1c05      	adds	r5, r0, #0
1000aad8:	2000      	movs	r0, #0
1000aada:	4c07      	ldr	r4, [pc, #28]	; (1000aaf8 <_read_r+0x24>)
1000aadc:	6020      	str	r0, [r4, #0]
1000aade:	1c08      	adds	r0, r1, #0
1000aae0:	1c11      	adds	r1, r2, #0
1000aae2:	1c1a      	adds	r2, r3, #0
1000aae4:	f7fd fe2e 	bl	10008744 <_read>
1000aae8:	1c43      	adds	r3, r0, #1
1000aaea:	d103      	bne.n	1000aaf4 <_read_r+0x20>
1000aaec:	6823      	ldr	r3, [r4, #0]
1000aaee:	2b00      	cmp	r3, #0
1000aaf0:	d000      	beq.n	1000aaf4 <_read_r+0x20>
1000aaf2:	602b      	str	r3, [r5, #0]
1000aaf4:	bd38      	pop	{r3, r4, r5, pc}
1000aaf6:	46c0      	nop			; (mov r8, r8)
1000aaf8:	1000b100 	.word	0x1000b100

1000aafc <_fstat_r>:
1000aafc:	b538      	push	{r3, r4, r5, lr}
1000aafe:	2300      	movs	r3, #0
1000ab00:	4c06      	ldr	r4, [pc, #24]	; (1000ab1c <_fstat_r+0x20>)
1000ab02:	1c05      	adds	r5, r0, #0
1000ab04:	1c08      	adds	r0, r1, #0
1000ab06:	1c11      	adds	r1, r2, #0
1000ab08:	6023      	str	r3, [r4, #0]
1000ab0a:	f7fe fe89 	bl	10009820 <_fstat>
1000ab0e:	1c43      	adds	r3, r0, #1
1000ab10:	d103      	bne.n	1000ab1a <_fstat_r+0x1e>
1000ab12:	6823      	ldr	r3, [r4, #0]
1000ab14:	2b00      	cmp	r3, #0
1000ab16:	d000      	beq.n	1000ab1a <_fstat_r+0x1e>
1000ab18:	602b      	str	r3, [r5, #0]
1000ab1a:	bd38      	pop	{r3, r4, r5, pc}
1000ab1c:	1000b100 	.word	0x1000b100

1000ab20 <_isatty_r>:
1000ab20:	b538      	push	{r3, r4, r5, lr}
1000ab22:	2300      	movs	r3, #0
1000ab24:	4c06      	ldr	r4, [pc, #24]	; (1000ab40 <_isatty_r+0x20>)
1000ab26:	1c05      	adds	r5, r0, #0
1000ab28:	1c08      	adds	r0, r1, #0
1000ab2a:	6023      	str	r3, [r4, #0]
1000ab2c:	f7fe fe7e 	bl	1000982c <_isatty>
1000ab30:	1c43      	adds	r3, r0, #1
1000ab32:	d103      	bne.n	1000ab3c <_isatty_r+0x1c>
1000ab34:	6823      	ldr	r3, [r4, #0]
1000ab36:	2b00      	cmp	r3, #0
1000ab38:	d000      	beq.n	1000ab3c <_isatty_r+0x1c>
1000ab3a:	602b      	str	r3, [r5, #0]
1000ab3c:	bd38      	pop	{r3, r4, r5, pc}
1000ab3e:	46c0      	nop			; (mov r8, r8)
1000ab40:	1000b100 	.word	0x1000b100

1000ab44 <Configuration>:
1000ab44:	0a566455 01320f57 025400a0 01340733     UdV.W.2...T.3.4.
1000ab54:	10008bfc 10008c0a 10008c18 10008c26     ............&...
1000ab64:	10008c34 10008c42 10008c50 10008c60     4...B...P...`...
1000ab74:	10008c70 10008c80 10008c90 10008ca0     p...............
1000ab84:	10008cb0 10008cc0 10008cd0 10008ce0     ................
1000ab94:	10008cf0 10008d00 10008d10 10008d20     ............ ...
1000aba4:	10008d30 10008d40 10008d50 10008d60     0...@...P...`...
1000abb4:	10008d70 10008d80 10008d90 10008da0     p...............
1000abc4:	10008dae 10008dbc 10008dca 10008dd8     ................
1000abd4:	10008de6 10008df4 10008e02 10008e10     ................
1000abe4:	10008e20 10008e30 10008e40 10008e50      ...0...@...P...
1000abf4:	10008e60 10008e70 10008e80 10008e90     `...p...........
1000ac04:	10008ea0 10008eb0 10008ec0 10008ed0     ................
1000ac14:	10008ee0 10008ef0 10008f00 10008f10     ................
1000ac24:	10008f1e 10008f2c 10008f6c 10008f94     ....,...l.......
1000ac34:	10008fbc 10008fe4 10009224 10009014     ........$.......
1000ac44:	1000902c 100090a4 100090bc 10009044     ,...........D...
1000ac54:	1000905c 10009074 1000908c 100090d4     \...t...........
1000ac64:	10009398 10009398 10009398 10009398     ................
1000ac74:	10009398 10009398 10009398 10009398     ................
1000ac84:	1000917c 10009194 100091ac 1000923a     |...........:...
1000ac94:	10009104 10009398 10009398 10009398     ................
1000aca4:	10009398 10009398 10009398 100091c4     ................
1000acb4:	100091dc 100091f4 1000920c 10009398     ................
1000acc4:	10009350 10009368 10009398 10009398     P...h...........
1000acd4:	10009266 1000927c 10009292 100092a8     f...|...........
1000ace4:	10009398 10009398 10009398 10009398     ................
1000acf4:	10009398 10009398 10009398 10009398     ................
1000ad04:	10008f58 10008f80 10008fa8 10008fd0     X...............
1000ad14:	10008ffc 100090ec 1000911c 10009134     ............4...
1000ad24:	1000914c 10009164 10009250 100092be     L...d...P.......
1000ad34:	10009338 10009380 646e6148 0a72656c     8.......Handler.
1000ad44:	0000000d 253a6425 64253a64 3a64253a     ....%d:%d:%d:%d:
1000ad54:	253a6425 64253a64 00000d0a 00000043     %d:%d:%d....C...

1000ad64 <_global_impure_ptr>:
1000ad64:	1000ae1c                                ....

1000ad68 <__sf_fake_stdin>:
	...

1000ad88 <__sf_fake_stdout>:
	...

1000ada8 <__sf_fake_stderr>:
	...
1000adc8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
1000add8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
1000ade8:	31300046 35343332 39383736 64636261     F.0123456789abcd
1000adf8:	00006665                                ef..

1000adfc <_init>:
1000adfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000adfe:	46c0      	nop			; (mov r8, r8)
1000ae00:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000ae02:	bc08      	pop	{r3}
1000ae04:	469e      	mov	lr, r3
1000ae06:	4770      	bx	lr

1000ae08 <__init_array_start>:
1000ae08:	100080b1 	.word	0x100080b1

1000ae0c <_fini>:
1000ae0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ae0e:	46c0      	nop			; (mov r8, r8)
1000ae10:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000ae12:	bc08      	pop	{r3}
1000ae14:	469e      	mov	lr, r3
1000ae16:	4770      	bx	lr

1000ae18 <__fini_array_start>:
1000ae18:	10008089 	.word	0x10008089
